// --------- Enums ---------
// Enum representing gaming platforms/systems
// Provides standardized tracking of player gaming environments
enum System {
  PS
  XBOX
}

// Enum representing verification status for platform connections
enum VerificationStatus {
  PENDING // Code generated but not yet verified
  VERIFIED // Successfully verified
  EXPIRED // Code has expired
  FAILED // Verification attempt failed
  UNKNOWN // Fallback if verification status is not known
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  COMMISSIONER
  BOG
  USER
}

enum LeagueType {
  NHL
  AHL
  ECHL
  CHL
}

enum CHLSubLeague {
  OHL
  QMJHL
  WHL
  NAJHL
}

enum PositionGroup {
  FORWARD // LW, C, RW
  DEFENSE // LD, RD
  GOALIE // G
}

enum PlayerPosition {
  LW // Left Wing
  C // Center
  RW // Right Wing
  LD // Left Defense
  RD // Right Defense
  G // Goalie

  ECU // Emergency Call-Up (can play any position)
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

// --------- Notification System ---------
enum NotificationType {
  SYSTEM
  FORUM
  TEAM
  LEAGUE
  MATCH
  CUSTOM
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

// --------- Forum System ---------
enum ForumPostStatus {
  PUBLISHED
  HIDDEN
  DELETED
}

enum ReactionType {
  LIKE
  DISLIKE
  LAUGH
  THINKING
  HEART
}

enum TeamManagementRole {
  OWNER
  GM
  AGM
  PAGM
}

// Enums for PSN integration

enum PSNSyncType {
  PROFILE
  TROPHIES
  GAMES
  ALL
}

enum PSNSyncStatus {
  PENDING
  IN_PROGRESS
  SUCCESS
  FAILED
}

model ForumPost {
  id          String                  @id @default(cuid())
  title       String
  content     String
  status      ForumPostStatus         @default(PUBLISHED)
  authorId    String                  @map("author_id")
  leagueId    String                  @map("league_id")
  createdAt   DateTime                @default(now()) @map("created_at")
  updatedAt   DateTime                @updatedAt @map("updated_at")
  author      User                    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    ForumComment[]
  reactions   ForumReaction[]
  followers   ForumFollower[]
  subscribers ForumPostSubscription[]
  gif         Json? // { id: string, url: string, title: string, width: string, height: string }

  @@index([authorId])
  @@index([leagueId])
  @@index([status])
  @@map("forum_posts")
}

model ForumReaction {
  id        String        @id @default(cuid())
  type      ReactionType
  userId    String        @map("user_id")
  postId    String?       @map("post_id")
  commentId String?       @map("comment_id")
  createdAt DateTime      @default(now()) @map("created_at")
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      ForumPost?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   ForumComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId, type])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
  @@map("forum_reactions")
}

model ForumFollower {
  id        String    @id @default(cuid())
  userId    String    @map("user_id")
  postId    String    @map("post_id")
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@map("forum_followers")
}

model ForumPostSubscription {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  createdAt DateTime  @default(now())

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@map("forum_post_subscriptions")
}

model ForumComment {
  id              String          @id @default(cuid())
  content         String
  status          ForumPostStatus @default(PUBLISHED)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  author          User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId        String          @map("author_id")
  post            ForumPost       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId          String          @map("post_id")
  quotedComment   ForumComment?   @relation("QuotedComment", fields: [quotedCommentId], references: [id], onDelete: Cascade)
  quotedCommentId String?         @map("quoted_comment_id")
  quotedBy        ForumComment[]  @relation("QuotedComment")
  reactions       ForumReaction[]
  gif             Json? // { id: string, url: string, title: string, width: string, height: string }

  @@index([authorId])
  @@index([postId])
  @@map("forum_comments")
}

// League model to represent both top-level and sub-leagues
model League {
  id             String     @id @default(uuid())
  name           String // Full name: "National Hockey League", "Ontario Hockey League", etc.
  shortName      String // Abbreviation: "NHL", "OHL", etc.
  leagueType     LeagueType // Top-level categorization
  isSubLeague    Boolean    @default(false)
  parentLeagueId String?    @map("parent_league_id")
  parentLeague   League?    @relation("SubLeagues", fields: [parentLeagueId], references: [id])
  subLeagues     League[]   @relation("SubLeagues")

  conferences Conference[]
  divisions   Division[]
  teams       Team[]

  seasons LeagueSeason[]

  @@unique([shortName])
}

model LeagueSeason {
  id       String @id @default(uuid())
  leagueId String @map("league_id")
  seasonId String @map("season_id")

  // Season-specific configurations
  salaryCap Int @default(0) @map("salary_cap")

  // Timestamps
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  league League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  season Season @relation(fields: [seasonId], references: [id], onDelete: Cascade)

  // Commissioner and BOG relationships
  commissioners LeagueCommissioner[]
  bogs          LeagueBOG[]

  // Team relationships
  teams TeamSeason[]

  // Player history
  playerHistory PlayerLeagueHistory[]

  @@unique([leagueId, seasonId])
  @@index([leagueId])
  @@index([seasonId])
}

model Conference {
  id        String     @id @default(uuid())
  name      String // "Eastern", "Western", etc.
  leagueId  String     @map("league_id")
  league    League     @relation(fields: [leagueId], references: [id])
  divisions Division[]

  @@unique([name, leagueId])
}

model Division {
  id           String      @id @default(uuid())
  name         String // "Atlantic", "Metropolitan", etc.
  conferenceId String      @map("conference_id")
  leagueId     String      @map("league_id")
  conference   Conference? @relation(fields: [conferenceId], references: [id])
  league       League      @relation(fields: [leagueId], references: [id])
  teams        Team[]

  @@unique([name, leagueId])
}

// --------- Season & League Structure ---------
// Season model represents a specific competitive period
// Supports tracking of multi-tier league seasons and player participation
model Season {
  id            String         @id @default(uuid())
  seasonNumber  Int            @map("season_number") // 1, 2, 3, etc.
  isLatest      Boolean        @default(false) @map("is_latest")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  leagueSeasons LeagueSeason[]
  players       PlayerSeason[]
}

// TIER COMMISSIONERS/BOGS
model LeagueCommissioner {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  leagueSeasonId String   @map("league_season_id") // Changed from tierId
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  leagueSeason LeagueSeason @relation(fields: [leagueSeasonId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueSeasonId])
  @@index([userId])
  @@index([leagueSeasonId])
  @@map("league_commissioners")
}

model LeagueBOG {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  leagueSeasonId String   @map("league_season_id") // Changed from tierId
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  leagueSeason LeagueSeason @relation(fields: [leagueSeasonId], references: [id], onDelete: Cascade)

  @@unique([userId, leagueSeasonId])
  @@index([userId])
  @@index([leagueSeasonId])
  @@map("league_bogs")
}

// PostgreSQL Database Connection Configuration
// Defines secure connection parameters for the application's primary database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// For multiple schema files via prisma/schema 
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

// Original 1-file schema
// generator client {
//   provider = "prisma-client-js"
// }

generator python {
  provider             = "prisma-client-py"
  previewFeatures      = ["prismaSchemaFolder"]
  output               = "../../../backend/services/database_service/prisma/"
  recursive_type_depth = -1
}

// --------- Match Stats ---------
model Match {
  id                      String                    @id @default(uuid())
  teamSeasonId            String                    @map("team_season_id")
  eaMatchId               String                    @map("ea_match_id")
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @updatedAt @map("updated_at")
  teamSeason              TeamSeason                @relation(fields: [teamSeasonId], references: [id], onDelete: Cascade)
  clubMatchStats          ClubMatchStats[]
  playerStats             PlayerMatch[]
  clubAggregateMatchStats ClubAggregateMatchStats[]
  matchAnalytics          MatchAnalytics[]

  // NEW: Many-to-many relation with PlayerSeason
  playerSeasons PlayerSeason[] // Players who participated in this match

  @@map("matches")
}

model ClubMatchStats {
  id      String @id @default(uuid())
  matchId String @map("match_id")

  // Basic Info
  clubDivision       Int    @map("club_division")
  cNhlOnlineGameType String @map("cNhlOnlineGameType")

  // Game Results
  goalsAgainstRaw   Int    @map("goals_against_raw")
  goalsForRaw       Int    @map("goals_for_raw")
  losses            Int    @map("losses")
  result            Int    @map("result")
  score             Int    @map("score")
  scoreString       String @map("score_string")
  winnerByDnf       Int    @map("winner_by_dnf") // 0 = no, 1 = yes
  winnerByGoalieDnf Int    @map("winner_by_goalie_dnf") // 0 = no, 1 = yes

  // Team Stats
  memberString           String @map("member_string")
  passesAttempted        Int    @map("passes_attempted")
  passesCompleted        Int    @map("passes_completed")
  powerplayGoals         Int    @map("powerplay_goals")
  powerplayOpportunities Int    @map("powerplay_opportunities")
  shots                  Int    @map("shots")
  teamArtAbbr            String @map("team_art_abbr")
  teamSide               Int    @map("team_side") // 0 = away, 1 = home
  timeOnAttack           Int    @map("time_on_attack")

  // Opponent Info
  opponentClubId      String @map("opponent_club_id")
  opponentScore       Int    @map("opponent_score")
  opponentTeamArtAbbr String @map("opponent_team_art_abbr")

  // Club Details
  goals        Int @map("goals")
  goalsAgainst Int @map("goals_against")

  details ClubMatchStatsDetails?
  match   Match                  @relation(fields: [matchId], references: [id], onDelete: Cascade)
}

model ClubMatchStatsDetails {
  id               String @id @default(uuid())
  clubMatchStatsId String @unique @map("club_match_stats_id")
  name             String @map("name")
  eaClubId         Int    @map("ea_club_id")
  regionId         Int    @map("region_id")
  teamId           Int    @map("team_id")

  // CustomKit is related to details, not directly to ClubMatchStats
  customKit CustomKit?

  // Relationship
  clubMatchStats ClubMatchStats? @relation(fields: [clubMatchStatsId], references: [id], onDelete: Cascade)
}

model CustomKit {
  id           String @id @default(uuid())
  detailsId    String @unique @map("details_id") // Changed from clubMatchStatsId
  isCustomTeam Int    @map("is_custom_team")
  crestAssetId Int    @map("crest_asset_id")
  useBaseAsset Int    @map("use_base_asset")

  // Relationship - now references details, not ClubMatchStats
  details ClubMatchStatsDetails? @relation(fields: [detailsId], references: [id], onDelete: Cascade)
}

model ClubAggregateMatchStats {
  id      String @id @default(uuid())
  matchId String @map("match_id")

  // Basic Info
  clubLevel Int @map("club_level")
  position  Int @map("position") // Always gives 0
  posSorted Int @map("pos_sorted") // Sum of (0, 1, 2, 3, 4, 5) = 15, this field doesn't do anything for us

  // Game Status
  isGuest     Int @map("is_guest") // If the team was the away team
  playerDnf   Int @map("player_dnf") // Number of players who did not finish the game
  playerLevel Int @map("player_level") // Cumulative player level of all players on the team

  // Team Info
  eaTeamId         Int @map("ea_team_id")
  teamSide         Int @map("team_side") // This sums the 1 or 0 on each of the players, where 1 means home so 6 players means = 6, away will always be 0. This isn't really a useful field but it's in the api so.
  opponentEaClubId Int @map("opponent_ea_club_id")
  opponentEaTeamId Int @map("opponent_ea_team_id")
  opponentScore    Int @map("opponent_score")

  // Game Results
  score Int @map("score")

  // Team Ratings
  // Cumulative ratings for all players on the team
  ratingDefense  Float @map("rating_defense")
  ratingOffense  Float @map("rating_offense")
  ratingTeamplay Float @map("rating_teamplay")

  // Time Stats
  toi        Int @map("toi") // Cumulative toi for all players on the team
  toiSeconds Int @map("toi_seconds") // Cumulative toi in seconds for all players on the team

  // Skater Stats
  // ALL CUMULATIVE
  assists           Int   @map("assists")
  blockedShots      Int   @map("blocked_shots")
  deflections       Int   @map("deflections")
  faceoffsLost      Int   @map("faceoffs_lost")
  faceoffPct        Float @map("faceoff_pct")
  faceoffsWon       Int   @map("faceoffs_won")
  giveaways         Int   @map("giveaways")
  goals             Int   @map("goals")
  hits              Int   @map("hits")
  interceptions     Int   @map("interceptions")
  passAttempts      Int   @map("pass_attempts")
  passes            Int   @map("passes")
  passPct           Float @map("pass_pct")
  penaltiesDrawn    Int   @map("penalties_drawn")
  penaltyMinutes    Int   @map("penalty_minutes") // PIM
  skaterPkClearZone Int   @map("skater_pk_clear_zone")
  plusMinus         Int   @map("plus_minus")
  possession        Int   @map("possession_seconds")
  powerPlayGoals    Int   @map("power_play_goals")
  saucerPasses      Int   @map("saucer_passes")
  shortHandedGoals  Int   @map("short_handed_goals")
  shotAttempts      Int   @map("shot_attempts")
  shotOnNetPct      Float @map("shot_on_net_pct")
  shots             Int   @map("shots")
  takeaways         Int   @map("takeaways")

  // Goalie Stats CUMULATIVE
  // While these are cumulative teams usually only have 1 goalie so these are the same as the player stats
  breakawaySavePct    Float @map("breakaway_save_pct")
  breakawaySaves      Int   @map("breakaway_saves")
  breakawayShots      Int   @map("breakaway_shots")
  desperationSaves    Int   @map("desperation_saves")
  goalsAgainst        Int   @map("goals_against")
  goalsAgainstAverage Float @map("goals_against_average")
  penaltyShotSavePct  Float @map("penalty_shot_save_pct")
  penaltyShotSaves    Int   @map("penalty_shot_saves")
  goaliePkClearZone   Int   @map("goalie_pk_clear_zone")
  pokeChecks          Int   @map("poke_checks")
  savePct             Float @map("save_pct")
  totalSaves          Int   @map("total_saves")
  totalShotsFaced     Int   @map("total_shots_faced")
  shutoutPeriods      Int   @map("shutout_periods")

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
}

model MatchAnalytics {
  id      String @id @default(uuid())
  matchId String @map("match_id")

  // Possession Metrics
  possessionDifferential   Int   @map("possession_differential")
  possessionPercentageHome Float @map("possession_percentage_home")
  possessionPercentageAway Float @map("possession_percentage_away")

  // Efficiency Metrics
  homeShootingEfficiency   Float @map("home_shooting_efficiency")
  awayShootingEfficiency   Float @map("away_shooting_efficiency")
  homePassingEfficiency    Float @map("home_passing_efficiency")
  awayPassingEfficiency    Float @map("away_passing_efficiency")
  homePossessionEfficiency Float @map("home_possession_efficiency")
  awayPossessionEfficiency Float @map("away_possession_efficiency")

  // Special Teams Metrics
  homePowerPlayPct   Float @map("home_power_play_pct")
  awayPowerPlayPct   Float @map("away_power_play_pct")
  homePenaltyKillPct Float @map("home_penalty_kill_pct")
  awayPenaltyKillPct Float @map("away_penalty_kill_pct")

  // Momentum and Control Metrics
  homeScore                  Float @map("home_score")
  awayScore                  Float @map("away_score")
  shotDifferential           Int   @map("shot_differential")
  hitDifferential            Int   @map("hit_differential")
  takeawayDifferential       Int   @map("takeaway_differential")
  scoringChancesDifferential Int   @map("scoring_chances_differential")

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
}

model PlayerMatch {
  id                 String @id @default(uuid())
  matchId            String @map("match_id")
  playerTeamSeasonId String @map("player_team_season_id")
  playerSeasonId     String @map("player_season_id")

  // Basic Info
  playerLevel        Int    @map("player_level")
  position           String @map("position")
  posSorted          Int    @map("pos_sorted")
  playerName         String @map("player_name")
  clientPlatform     String @map("client_platform")
  playerLevelDisplay Int    @map("player_level_display")

  // Game Status
  isGuest            Boolean @map("is_guest")
  playerDnf          Boolean @map("player_dnf") // did not finish (quit)
  pNhlOnlineGameType String  @map("pNhlOnlineGameType") // Should likely be "5"

  // Team Information
  eaTeamId         String @map("ea_team_id")
  teamSide         Int    @map("team_side") // 0 = home, 1 = away
  opponentClubId   String @map("opponent_club_id")
  opponentEaTeamId String @map("opponent_ea_team_id")
  opponentScore    Int    @map("opponent_score")
  score            Int    @map("score")

  // Player Ratings
  ratingDefense  Float @map("rating_defense")
  ratingOffense  Float @map("rating_offense")
  ratingTeamplay Float @map("rating_teamplay")

  // Time Stats
  toi        Int @map("toi") // time on ice
  toiSeconds Int @map("toi_seconds") // time on ice in seconds

  // Skater Stats
  assists              Int    @map("assists")
  blockedShots         Int    @map("blocked_shots")
  deflections          Int    @map("deflections")
  faceoffsLost         Int    @map("faceoffs_lost")
  faceoffPct           Float  @map("faceoff_pct")
  faceoffsWon          Int    @map("faceoffs_won")
  giveaways            Int    @map("giveaways")
  goals                Int    @map("goals")
  gameWinningGoals     Int    @map("game_winning_goals")
  hits                 Int    @map("hits")
  interceptions        Int    @map("interceptions")
  passAttempts         Int    @map("pass_attempts")
  passes               Int    @map("passes")
  passPct              Float  @map("pass_pct")
  penaltiesDrawn       Int    @map("penalties_drawn")
  penaltyMinutes       Int    @map("penalty_minutes") // PIM
  skaterPkClearZone    Int    @map("skater_pk_clear_zone")
  plusMinus            Int    @map("plus_minus")
  possessionSeconds    Int    @map("possession_seconds")
  powerPlayGoals       Int    @map("power_play_goals")
  saucerPasses         Int    @map("saucer_passes")
  shortHandedGoals     Int    @map("short_handed_goals")
  shotAttempts         Int    @map("shot_attempts")
  shotsOnNetPct        Float  @map("shots_on_net_pct")
  shootingPct          Float  @map("shooting_pct")
  shotsOnGoal          Int    @map("shots_on_goal")
  takeaways            Int    @map("takeaways")
  points               Int    @map("points")
  faceoffsTotal        Int    @map("faceoffs_total")
  shotsMissed          Int    @map("shots_missed")
  passesMissed         Int    @map("passes_missed")
  passingPct           Float  @map("passing_pct")
  majorPenalties       Int    @map("major_penalties")
  minorPenalties       Int    @map("minor_penalties")
  totalPenalties       Int    @map("total_penalties")
  pointsPer60          Float  @map("points_per_60")
  possessionPerMinute  Float  @map("possession_per_minute")
  shotEfficiency       Float  @map("shot_efficiency")
  tkawayGvawayRatio    Float  @map("tkaway_gvaway_ratio")
  penaltyDifferential  Int    @map("penalty_differential")
  defActionsPerMinute  Float  @map("def_actions_per_minute")
  offImpact            Float  @map("off_impact")
  defImpact            Float  @map("def_impact")
  detailedPosition     String @map("detailed_position")
  positionAbbreviation String @map("position_abbreviation")
  gameImpactScore      Float  @map("game_impact_score")
  puckManagementRating Float  @map("puck_management_rating")
  possessionEfficiency Float  @map("possession_efficiency")
  netDefContribution   Float  @map("net_def_contribution")
  timeAdjustedRating   Float  @map("time_adjusted_rating")
  shotGenerationRate   Float  @map("shot_generation_rate")
  offZonePresence      Float  @map("off_zone_presence")
  twoWayRating         Float  @map("two_way_rating")

  // Goalie Stats
  breakawaySavePct    Float @map("breakaway_save_pct")
  breakawaySaves      Int   @map("breakaway_saves")
  breakawayShots      Int   @map("breakaway_shots_faced")
  desperationSaves    Int   @map("desperation_saves")
  goalsAgainst        Int   @map("goals_against")
  goalsAgainstAverage Float @map("goals_against_average")
  penaltyShotSavePct  Float @map("penalty_shot_save_pct")
  penaltyShotSaves    Int   @map("penalty_shot_saves")
  penaltyShotsFaced   Int   @map("penalty_shots_faced")
  goaliePkClearZone   Int   @map("goalie_pk_clear_zone")
  pokeChecks          Int   @map("poke_checks")
  savePct             Float @map("save_pct")
  totalSaves          Int   @map("total_saves")
  totalShotsFaced     Int   @map("total_shots_faced")
  shutoutPeriods      Int   @map("shutout_periods")
  goalsSaved          Int   @map("goals_saved")

  // LOGS
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // RELATIONS
  match            Match            @relation(fields: [matchId], references: [id], onDelete: Cascade)
  playerTeamSeason PlayerTeamSeason @relation(fields: [playerTeamSeasonId], references: [id], onDelete: Cascade)
  playerSeason     PlayerSeason     @relation(fields: [playerSeasonId], references: [id], onDelete: Cascade) // NEW relation

  @@index([playerSeasonId]) // NEW: index for performance
  @@map("player_matches")
}

// --------- Player Season & Stats ---------
model PlayerSeason {
  id     String @id @default(uuid())
  userId String @map("user_id")

  // Season reference
  seasonId String @map("season_id")

  // Contract
  contractId String @unique @map("contract_id")

  // Position
  primaryPosition PlayerPosition @map("primary_position")
  positionGroup   PositionGroup  @map("position_group")

  isInBidding Boolean @default(true) @map("is_in_bidding")

  // Relations
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  season        Season                @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  contract      Contract              @relation(fields: [contractId], references: [id], onDelete: Cascade)
  teamSeasons   PlayerTeamSeason[]
  leagueHistory PlayerLeagueHistory[] // Changed from tierHistory

  // Match-related relations
  playerMatches PlayerMatch[]
  matches       Match[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("player_seasons")
}

model PlayerTeamSeason {
  id             String @id @default(uuid())
  playerSeasonId String @map("player_season_id")
  teamSeasonId   String @map("team_season_id")

  leagueType LeagueType @map("league_type")

  // Relationship references
  rosterTeamId       String? @map("roster_team_id")
  trainingCampTeamId String? @map("training_camp_team_id")
  inactiveTeamId     String? @map("inactive_team_id")

  // Status flags
  isRosterPlayer       Boolean @default(false) @map("is_roster_player")
  isTrainingCampPlayer Boolean @default(false) @map("is_training_camp_player")
  isInactivePlayer     Boolean @default(false) @map("is_inactive_player")

  // Relationships
  playerSeason     PlayerSeason @relation(fields: [playerSeasonId], references: [id], onDelete: Cascade)
  rosterTeam       TeamSeason?  @relation("RosterPlayers", fields: [rosterTeamId], references: [id])
  trainingCampTeam TeamSeason?  @relation("TrainingCampPlayers", fields: [trainingCampTeamId], references: [id])
  inactiveTeam     TeamSeason?  @relation("InactivePlayers", fields: [inactiveTeamId], references: [id])

  playerMatches PlayerMatch[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("player_team_seasons")
}

model PlayerLeagueHistory {
  id             String    @id @default(uuid())
  playerSeasonId String    @map("player_season_id")
  leagueSeasonId String    @map("league_season_id") // Changed from tierId
  startDate      DateTime  @default(now()) @map("start_date")
  endDate        DateTime? @map("end_date")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")

  playerSeason PlayerSeason @relation(fields: [playerSeasonId], references: [id], onDelete: Cascade)
  leagueSeason LeagueSeason @relation(fields: [leagueSeasonId], references: [id], onDelete: Cascade)

  @@index([playerSeasonId])
  @@index([leagueSeasonId])
  @@map("player_league_history")
}

// --------- PSN Integration Models ---------
// Models for PlayStation Network data integration

// PSNProfile stores basic PSN account information
// Links PSN accounts to application users
model PSNProfile {
  id                   String            @id @default(cuid())
  userId               String            @unique @map("user_id")
  onlineId             String            @unique @map("online_id")
  accountId            String?           @map("account_id")
  aboutMe              String?           @map("about_me")
  languages            String[]
  isPlus               Boolean?          @default(false) @map("is_plus")
  isOfficiallyVerified Boolean?          @default(false) @map("is_officially_verified")
  friendsCount         Int?              @map("friends_count")
  mutualFriendsCount   Int?              @map("mutual_friends_count")
  friendRelation       String?           @map("friend_relation")
  isBlocking           Boolean?          @default(false) @map("is_blocking")
  onlineStatus         String?           @map("online_status")
  platform             String?
  lastOnline           DateTime?         @map("last_online")
  availability         String?
  lastProfileSync      DateTime?         @map("last_profile_sync")
  lastTrophySync       DateTime?         @map("last_trophy_sync")
  lastGameSync         DateTime?         @map("last_game_sync")
  syncEnabled          Boolean           @default(true) @map("sync_enabled")
  lastUpdated          DateTime          @default(now()) @map("last_updated")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  user                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatars              PSNAvatar[]
  trophySummary        PSNTrophy?
  games                PSNGame[]
  syncLogs             PSNSyncLog[]
  gameTrophies         PSNGameTrophies[]

  @@index([onlineId])
  @@map("psn_profiles")
}

// PSNAvatar stores avatar images for the PSN profile
// PSN provides multiple sizes of the same avatar
model PSNAvatar {
  id        String     @id @default(cuid())
  profileId String     @map("profile_id")
  size      String // 's', 'm', 'l', 'xl'
  url       String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  profile   PSNProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, size])
  @@index([profileId])
  @@map("psn_avatars")
}

// PSNTrophy stores trophy information
// Represents a user's trophy level, progress, and counts
model PSNTrophy {
  id            String     @id @default(cuid())
  profileId     String     @unique @map("profile_id")
  trophyLevel   Int?       @map("trophy_level")
  progress      Int?
  tier          Int?
  // Earned trophies counts stored as separate fields
  platinumCount Int?       @map("platinum_count")
  goldCount     Int?       @map("gold_count")
  silverCount   Int?       @map("silver_count")
  bronzeCount   Int?       @map("bronze_count")
  totalTrophies Int?       @map("total_trophies") // Optional sum of all trophies
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  profile       PSNProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@map("psn_trophies")
}

// PSNGame stores information about games played by the user
// Includes play history, platform, and other game metadata
model PSNGame {
  id                 String           @id @default(cuid())
  profileId          String           @map("profile_id")
  name               String
  titleId            String           @map("title_id")
  platform           String // "ps4_game", "ps5_native_game", "unknown", etc.
  imageUrl           String?          @map("image_url")
  playCount          Int?             @map("play_count")
  firstPlayed        DateTime?        @map("first_played")
  lastPlayed         DateTime?        @map("last_played")
  playDuration       String?          @map("play_duration") // Stored as string like "1 day, 23:13:03"
  // Additional game metadata we might want to capture
  playTimeMinutes    Int?             @map("play_time_minutes") // Duration in minutes (calculated)
  isCurrentlyPlaying Boolean?         @default(false) @map("is_currently_playing")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  profile            PSNProfile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  trophyInfo         PSNGameTrophies? // Changed to trophyInfo to avoid name conflict

  @@unique([profileId, titleId, platform])
  @@index([profileId])
  @@index([titleId])
  @@map("psn_games")
}

// PSNSyncLog tracks the synchronization status of PSN data
// Helps with incremental updates and synchronization scheduling
model PSNSyncLog {
  id             String        @id @default(cuid())
  profileId      String        @map("profile_id")
  syncType       PSNSyncType   @map("sync_type")
  status         PSNSyncStatus @default(PENDING)
  startedAt      DateTime      @default(now()) @map("started_at")
  completedAt    DateTime?     @map("completed_at")
  errorMessage   String?       @map("error_message")
  recordsUpdated Int?          @default(0) @map("records_updated")
  profile        PSNProfile    @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([syncType])
  @@index([status])
  @@map("psn_sync_logs")
}

// PSNGameTrophies stores trophy information for a specific game
// Links to the PSNGame and provides trophy counts for that game
model PSNGameTrophies {
  id             String     @id @default(cuid())
  profileId      String     @map("profile_id")
  gameId         String     @unique @map("game_id") // Add unique constraint for one-to-one relation
  trophiesEarned Int        @default(0) @map("trophies_earned")
  trophiesTotal  Int        @default(0) @map("trophies_total")
  progress       Int? // percentage completed
  platinumEarned Int?       @default(0) @map("platinum_earned")
  goldEarned     Int?       @default(0) @map("gold_earned")
  silverEarned   Int?       @default(0) @map("silver_earned")
  bronzeEarned   Int?       @default(0) @map("bronze_earned")
  lastUpdated    DateTime   @default(now()) @map("last_updated")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")
  profile        PSNProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  game           PSNGame    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@map("psn_game_trophies")
}

// --------- Team Structure ---------
// Team model represents a sports team with comprehensive tracking capabilities
// Supports team affiliations, historical data, and cross-league relationships
model Team {
  id         String @id @default(uuid())
  eaClubId   String @map("ea_club_id")
  eaClubName String @map("ea_club_name")

  // Full name and abbreviation
  fullTeamName     String @map("full_team_name") // "Toronto Maple Leafs"
  teamAbbreviation String @map("team_abbreviation") @db.VarChar(14) // "TOR"

  logoPath String? @map("logo_path")

  // League relationships
  leagueId String @map("league_id")
  league   League @relation(fields: [leagueId], references: [id])

  // Division Relationships
  divisionId String?   @map("division_id")
  division   Division? @relation(fields: [divisionId], references: [id])

  // Colors
  primaryColor   String? @map("primary_color")
  secondaryColor String? @map("secondary_color")

  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  seasons   TeamSeason[]

  // Affiliation relationships
  nhlAffiliateId String? @map("nhl_affiliate_id")
  ahlAffiliateId String? @map("ahl_affiliate_id")
  nhlAffiliate   Team?   @relation("NHLAffiliation", fields: [nhlAffiliateId], references: [id], onDelete: Cascade)
  ahlAffiliate   Team?   @relation("AHLAffiliation", fields: [ahlAffiliateId], references: [id], onDelete: Cascade)

  // Reverse relationships
  ahlAffiliates  Team[] @relation("NHLAffiliation")
  echlAffiliates Team[] @relation("AHLAffiliation")

  @@unique([teamAbbreviation, leagueId])
  @@index([nhlAffiliateId])
  @@index([ahlAffiliateId])
}

// TeamSeason model captures a team's performance and statistics for a specific season
// Provides granular tracking of team performance metrics
model TeamSeason {
  id             String @id @default(uuid())
  teamId         String @map("team_id")
  leagueSeasonId String @map("league_season_id")

  // Roster counts
  forwardCount Int @default(0) @map("forward_count")
  defenseCount Int @default(0) @map("defense_count")
  goalieCount  Int @default(0) @map("goalie_count")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  team         Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  leagueSeason LeagueSeason @relation(fields: [leagueSeasonId], references: [id], onDelete: Cascade)

  matches Match[]

  rosterPlayers       PlayerTeamSeason[] @relation("RosterPlayers")
  trainingCampPlayers PlayerTeamSeason[] @relation("TrainingCampPlayers")
  inactivePlayers     PlayerTeamSeason[] @relation("InactivePlayers")

  bids     Bid[]         @relation("TeamSeasonBids")
  managers TeamManager[] // Manager here as managers can change per season

  @@index([teamId])
  @@index([leagueSeasonId])
}

// TeamManager with relation to TeamSeason
model TeamManager {
  id           String             @id @default(cuid())
  userId       String             @map("user_id")
  teamSeasonId String             @map("team_season_id") // Changed from teamId
  role         TeamManagementRole
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamSeason   TeamSeason         @relation(fields: [teamSeasonId], references: [id], onDelete: Cascade) // Change relation

  @@unique([userId, teamSeasonId, role])
  @@index([userId])
  @@index([teamSeasonId])
  @@map("team_managers")
}

model Bid {
  id           String     @id @default(uuid())
  contract     Contract   @relation(fields: [contractId], references: [id], onDelete: Cascade)
  contractId   String     @map("contract_id")
  teamSeason   TeamSeason @relation("TeamSeasonBids", fields: [teamSeasonId], references: [id], onDelete: Cascade)
  teamSeasonId String     @map("team_season_id")
  amount       Int // Bid amount in dollars
  status       BidStatus  @default(PENDING)
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@index([contractId])
  @@index([teamSeasonId])
  @@map("bids")
}

// New models for contracts and bidding
model Contract {
  id           String        @id @default(uuid())
  amount       Int // Contract amount in dollars, required
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  playerSeason PlayerSeason?
  bids         Bid[] // One-to-many relation with Bid

  @@map("contracts")
}

// --------- Authentication & Base User Models ---------
// User model represents the core authentication and profile information
// Serves as the primary identity management model for the application
model User {
  // AUTHENTICATION
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  password String
  name     String?

  // GLOBAL PERMISSIONS
  role UserRole @default(USER)

  // AVATAR
  avatarUrl String? @map("avatar_url")

  // PRIVELEDGES AND QUICK FILTERS
  isSuperAdmin   Boolean @default(false) @map("is_super_admin")
  isAdmin        Boolean @default(false) @map("is_admin")
  isCommissioner Boolean @default(false) @map("is_commissioner")
  isBog          Boolean @default(false) @map("is_bog")
  isTeamManager  Boolean @default(false) @map("is_team_manager")

  // PASSWORD RESET
  passwordResetToken          String?   @unique
  passwordResetTokenExpiresAt DateTime?

  // LOGS
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NOTIFICATIONS 
  notifications Notification[]

  // FORUM
  forumPosts         ForumPost[]
  forumComments      ForumComment[]
  forumReactions     ForumReaction[]
  forumFollowing     ForumFollower[]
  forumSubscriptions ForumPostSubscription[]

  // PLAYER RELATED INFO (moved from Player model)
  currentEaId  String? @map("current_ea_id")
  activeSystem System? @map("active_system")

  // HISTORY TRACKING
  eaIdHistory   EaIdHistory[]
  systemHistory SystemHistory[]
  gamertags     GamertagHistory[]

  // LEAGUE MANAGEMENT
  leagueCommissioners LeagueCommissioner[]
  leagueBogs          LeagueBOG[]

  // SEASONS & TEAM MANAGEMENT
  activeSeasons  PlayerSeason[]
  teamManagement TeamManager[]
  psnProfile     PSNProfile? // Add relation to PSN profile

  @@map("users")
}

model EaIdHistory {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  eaId      String   @map("ea_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("ea_id_history")
}

model SystemHistory {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  system    System
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("system_history")
}

// GamertagHistory tracks player's gaming identities across different systems
// Enables historical tracking of player gamertags and platform transitions
model GamertagHistory {
  userId               String              @map("user_id")
  system               System
  gamertag             String
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @default(now()) @map("updated_at")
  // Verification related fields
  verificationCode     String?             @map("verification_code")
  codeGeneratedAt      DateTime?           @map("code_generated_at")
  verificationStatus   VerificationStatus? @map("verification_status")
  verifiedAt           DateTime?           @map("verified_at")
  verificationAttempts Int?                @default(0) @map("verification_attempts")
  lastAttemptAt        DateTime?           @map("last_attempt_at")
  codeExpiresAt        DateTime?           @map("code_expires_at")
  isVerified           Boolean             @default(false) @map("is_verified")
  verificationMetadata Json?               @map("verification_metadata")
  user                 User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, system])
  @@index([gamertag, system])
  @@index([verificationCode])
}

model Notification {
  id        String             @id @default(cuid())
  userId    String             @map("user_id")
  type      NotificationType
  title     String
  message   String
  status    NotificationStatus @default(UNREAD)
  link      String? // Optional link to related content
  metadata  Json? // Flexible metadata for different notification types
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([type])
}
