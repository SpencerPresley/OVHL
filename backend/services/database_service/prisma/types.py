# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List['Serializable'],
    Dict[None, 'Serializable'],
    Dict[bool, 'Serializable'],
    Dict[float, 'Serializable'],
    Dict[int, 'Serializable'],
    Dict[str, 'Serializable'],
]


StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilter'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)



class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilter'],
    },
    total=False,
)



class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilter'],
    },
    total=False,
)



class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilter'],
    },
    total=False,
)



class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilter'],
    },
    total=False,
)



class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilter'],
    },
    total=False,
)



class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilter'],
    },
    total=False,
)



class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _SystemListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.System']]


class _SystemListFilterHasInput(TypedDict):
    has: 'enums.System'


class _SystemListFilterHasEveryInput(TypedDict):
    has_every: List['enums.System']


class _SystemListFilterHasSomeInput(TypedDict):
    has_some: List['enums.System']


class _SystemListFilterIsEmptyInput(TypedDict):
    is_empty: bool


SystemListFilter = Union[
    _SystemListFilterHasInput,
    _SystemListFilterEqualsInput,
    _SystemListFilterHasSomeInput,
    _SystemListFilterIsEmptyInput,
    _SystemListFilterHasEveryInput,
]


class _SystemListUpdateSet(TypedDict):
    set: List['enums.System']


class _SystemListUpdatePush(TypedDict):
    push: List['enums.System']


SystemListUpdate = Union[
    List['enums.System'],
    _SystemListUpdateSet,
    _SystemListUpdatePush,
]

class _VerificationStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.VerificationStatus']]


class _VerificationStatusListFilterHasInput(TypedDict):
    has: 'enums.VerificationStatus'


class _VerificationStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.VerificationStatus']


class _VerificationStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.VerificationStatus']


class _VerificationStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


VerificationStatusListFilter = Union[
    _VerificationStatusListFilterHasInput,
    _VerificationStatusListFilterEqualsInput,
    _VerificationStatusListFilterHasSomeInput,
    _VerificationStatusListFilterIsEmptyInput,
    _VerificationStatusListFilterHasEveryInput,
]


class _VerificationStatusListUpdateSet(TypedDict):
    set: List['enums.VerificationStatus']


class _VerificationStatusListUpdatePush(TypedDict):
    push: List['enums.VerificationStatus']


VerificationStatusListUpdate = Union[
    List['enums.VerificationStatus'],
    _VerificationStatusListUpdateSet,
    _VerificationStatusListUpdatePush,
]

class _UserRoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.UserRole']]


class _UserRoleListFilterHasInput(TypedDict):
    has: 'enums.UserRole'


class _UserRoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.UserRole']


class _UserRoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.UserRole']


class _UserRoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


UserRoleListFilter = Union[
    _UserRoleListFilterHasInput,
    _UserRoleListFilterEqualsInput,
    _UserRoleListFilterHasSomeInput,
    _UserRoleListFilterIsEmptyInput,
    _UserRoleListFilterHasEveryInput,
]


class _UserRoleListUpdateSet(TypedDict):
    set: List['enums.UserRole']


class _UserRoleListUpdatePush(TypedDict):
    push: List['enums.UserRole']


UserRoleListUpdate = Union[
    List['enums.UserRole'],
    _UserRoleListUpdateSet,
    _UserRoleListUpdatePush,
]

class _LeagueTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.LeagueType']]


class _LeagueTypeListFilterHasInput(TypedDict):
    has: 'enums.LeagueType'


class _LeagueTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.LeagueType']


class _LeagueTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.LeagueType']


class _LeagueTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


LeagueTypeListFilter = Union[
    _LeagueTypeListFilterHasInput,
    _LeagueTypeListFilterEqualsInput,
    _LeagueTypeListFilterHasSomeInput,
    _LeagueTypeListFilterIsEmptyInput,
    _LeagueTypeListFilterHasEveryInput,
]


class _LeagueTypeListUpdateSet(TypedDict):
    set: List['enums.LeagueType']


class _LeagueTypeListUpdatePush(TypedDict):
    push: List['enums.LeagueType']


LeagueTypeListUpdate = Union[
    List['enums.LeagueType'],
    _LeagueTypeListUpdateSet,
    _LeagueTypeListUpdatePush,
]

class _CHLSubLeagueListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.CHLSubLeague']]


class _CHLSubLeagueListFilterHasInput(TypedDict):
    has: 'enums.CHLSubLeague'


class _CHLSubLeagueListFilterHasEveryInput(TypedDict):
    has_every: List['enums.CHLSubLeague']


class _CHLSubLeagueListFilterHasSomeInput(TypedDict):
    has_some: List['enums.CHLSubLeague']


class _CHLSubLeagueListFilterIsEmptyInput(TypedDict):
    is_empty: bool


CHLSubLeagueListFilter = Union[
    _CHLSubLeagueListFilterHasInput,
    _CHLSubLeagueListFilterEqualsInput,
    _CHLSubLeagueListFilterHasSomeInput,
    _CHLSubLeagueListFilterIsEmptyInput,
    _CHLSubLeagueListFilterHasEveryInput,
]


class _CHLSubLeagueListUpdateSet(TypedDict):
    set: List['enums.CHLSubLeague']


class _CHLSubLeagueListUpdatePush(TypedDict):
    push: List['enums.CHLSubLeague']


CHLSubLeagueListUpdate = Union[
    List['enums.CHLSubLeague'],
    _CHLSubLeagueListUpdateSet,
    _CHLSubLeagueListUpdatePush,
]

class _PositionGroupListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.PositionGroup']]


class _PositionGroupListFilterHasInput(TypedDict):
    has: 'enums.PositionGroup'


class _PositionGroupListFilterHasEveryInput(TypedDict):
    has_every: List['enums.PositionGroup']


class _PositionGroupListFilterHasSomeInput(TypedDict):
    has_some: List['enums.PositionGroup']


class _PositionGroupListFilterIsEmptyInput(TypedDict):
    is_empty: bool


PositionGroupListFilter = Union[
    _PositionGroupListFilterHasInput,
    _PositionGroupListFilterEqualsInput,
    _PositionGroupListFilterHasSomeInput,
    _PositionGroupListFilterIsEmptyInput,
    _PositionGroupListFilterHasEveryInput,
]


class _PositionGroupListUpdateSet(TypedDict):
    set: List['enums.PositionGroup']


class _PositionGroupListUpdatePush(TypedDict):
    push: List['enums.PositionGroup']


PositionGroupListUpdate = Union[
    List['enums.PositionGroup'],
    _PositionGroupListUpdateSet,
    _PositionGroupListUpdatePush,
]

class _PlayerPositionListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.PlayerPosition']]


class _PlayerPositionListFilterHasInput(TypedDict):
    has: 'enums.PlayerPosition'


class _PlayerPositionListFilterHasEveryInput(TypedDict):
    has_every: List['enums.PlayerPosition']


class _PlayerPositionListFilterHasSomeInput(TypedDict):
    has_some: List['enums.PlayerPosition']


class _PlayerPositionListFilterIsEmptyInput(TypedDict):
    is_empty: bool


PlayerPositionListFilter = Union[
    _PlayerPositionListFilterHasInput,
    _PlayerPositionListFilterEqualsInput,
    _PlayerPositionListFilterHasSomeInput,
    _PlayerPositionListFilterIsEmptyInput,
    _PlayerPositionListFilterHasEveryInput,
]


class _PlayerPositionListUpdateSet(TypedDict):
    set: List['enums.PlayerPosition']


class _PlayerPositionListUpdatePush(TypedDict):
    push: List['enums.PlayerPosition']


PlayerPositionListUpdate = Union[
    List['enums.PlayerPosition'],
    _PlayerPositionListUpdateSet,
    _PlayerPositionListUpdatePush,
]

class _BidStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.BidStatus']]


class _BidStatusListFilterHasInput(TypedDict):
    has: 'enums.BidStatus'


class _BidStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.BidStatus']


class _BidStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.BidStatus']


class _BidStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BidStatusListFilter = Union[
    _BidStatusListFilterHasInput,
    _BidStatusListFilterEqualsInput,
    _BidStatusListFilterHasSomeInput,
    _BidStatusListFilterIsEmptyInput,
    _BidStatusListFilterHasEveryInput,
]


class _BidStatusListUpdateSet(TypedDict):
    set: List['enums.BidStatus']


class _BidStatusListUpdatePush(TypedDict):
    push: List['enums.BidStatus']


BidStatusListUpdate = Union[
    List['enums.BidStatus'],
    _BidStatusListUpdateSet,
    _BidStatusListUpdatePush,
]

class _NotificationTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.NotificationType']]


class _NotificationTypeListFilterHasInput(TypedDict):
    has: 'enums.NotificationType'


class _NotificationTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.NotificationType']


class _NotificationTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.NotificationType']


class _NotificationTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


NotificationTypeListFilter = Union[
    _NotificationTypeListFilterHasInput,
    _NotificationTypeListFilterEqualsInput,
    _NotificationTypeListFilterHasSomeInput,
    _NotificationTypeListFilterIsEmptyInput,
    _NotificationTypeListFilterHasEveryInput,
]


class _NotificationTypeListUpdateSet(TypedDict):
    set: List['enums.NotificationType']


class _NotificationTypeListUpdatePush(TypedDict):
    push: List['enums.NotificationType']


NotificationTypeListUpdate = Union[
    List['enums.NotificationType'],
    _NotificationTypeListUpdateSet,
    _NotificationTypeListUpdatePush,
]

class _NotificationStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.NotificationStatus']]


class _NotificationStatusListFilterHasInput(TypedDict):
    has: 'enums.NotificationStatus'


class _NotificationStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.NotificationStatus']


class _NotificationStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.NotificationStatus']


class _NotificationStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


NotificationStatusListFilter = Union[
    _NotificationStatusListFilterHasInput,
    _NotificationStatusListFilterEqualsInput,
    _NotificationStatusListFilterHasSomeInput,
    _NotificationStatusListFilterIsEmptyInput,
    _NotificationStatusListFilterHasEveryInput,
]


class _NotificationStatusListUpdateSet(TypedDict):
    set: List['enums.NotificationStatus']


class _NotificationStatusListUpdatePush(TypedDict):
    push: List['enums.NotificationStatus']


NotificationStatusListUpdate = Union[
    List['enums.NotificationStatus'],
    _NotificationStatusListUpdateSet,
    _NotificationStatusListUpdatePush,
]

class _ForumPostStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.ForumPostStatus']]


class _ForumPostStatusListFilterHasInput(TypedDict):
    has: 'enums.ForumPostStatus'


class _ForumPostStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.ForumPostStatus']


class _ForumPostStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.ForumPostStatus']


class _ForumPostStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


ForumPostStatusListFilter = Union[
    _ForumPostStatusListFilterHasInput,
    _ForumPostStatusListFilterEqualsInput,
    _ForumPostStatusListFilterHasSomeInput,
    _ForumPostStatusListFilterIsEmptyInput,
    _ForumPostStatusListFilterHasEveryInput,
]


class _ForumPostStatusListUpdateSet(TypedDict):
    set: List['enums.ForumPostStatus']


class _ForumPostStatusListUpdatePush(TypedDict):
    push: List['enums.ForumPostStatus']


ForumPostStatusListUpdate = Union[
    List['enums.ForumPostStatus'],
    _ForumPostStatusListUpdateSet,
    _ForumPostStatusListUpdatePush,
]

class _ReactionTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.ReactionType']]


class _ReactionTypeListFilterHasInput(TypedDict):
    has: 'enums.ReactionType'


class _ReactionTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.ReactionType']


class _ReactionTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.ReactionType']


class _ReactionTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


ReactionTypeListFilter = Union[
    _ReactionTypeListFilterHasInput,
    _ReactionTypeListFilterEqualsInput,
    _ReactionTypeListFilterHasSomeInput,
    _ReactionTypeListFilterIsEmptyInput,
    _ReactionTypeListFilterHasEveryInput,
]


class _ReactionTypeListUpdateSet(TypedDict):
    set: List['enums.ReactionType']


class _ReactionTypeListUpdatePush(TypedDict):
    push: List['enums.ReactionType']


ReactionTypeListUpdate = Union[
    List['enums.ReactionType'],
    _ReactionTypeListUpdateSet,
    _ReactionTypeListUpdatePush,
]

class _TeamManagementRoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.TeamManagementRole']]


class _TeamManagementRoleListFilterHasInput(TypedDict):
    has: 'enums.TeamManagementRole'


class _TeamManagementRoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.TeamManagementRole']


class _TeamManagementRoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.TeamManagementRole']


class _TeamManagementRoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


TeamManagementRoleListFilter = Union[
    _TeamManagementRoleListFilterHasInput,
    _TeamManagementRoleListFilterEqualsInput,
    _TeamManagementRoleListFilterHasSomeInput,
    _TeamManagementRoleListFilterIsEmptyInput,
    _TeamManagementRoleListFilterHasEveryInput,
]


class _TeamManagementRoleListUpdateSet(TypedDict):
    set: List['enums.TeamManagementRole']


class _TeamManagementRoleListUpdatePush(TypedDict):
    push: List['enums.TeamManagementRole']


TeamManagementRoleListUpdate = Union[
    List['enums.TeamManagementRole'],
    _TeamManagementRoleListUpdateSet,
    _TeamManagementRoleListUpdatePush,
]

class _PSNSyncTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.PSNSyncType']]


class _PSNSyncTypeListFilterHasInput(TypedDict):
    has: 'enums.PSNSyncType'


class _PSNSyncTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.PSNSyncType']


class _PSNSyncTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.PSNSyncType']


class _PSNSyncTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


PSNSyncTypeListFilter = Union[
    _PSNSyncTypeListFilterHasInput,
    _PSNSyncTypeListFilterEqualsInput,
    _PSNSyncTypeListFilterHasSomeInput,
    _PSNSyncTypeListFilterIsEmptyInput,
    _PSNSyncTypeListFilterHasEveryInput,
]


class _PSNSyncTypeListUpdateSet(TypedDict):
    set: List['enums.PSNSyncType']


class _PSNSyncTypeListUpdatePush(TypedDict):
    push: List['enums.PSNSyncType']


PSNSyncTypeListUpdate = Union[
    List['enums.PSNSyncType'],
    _PSNSyncTypeListUpdateSet,
    _PSNSyncTypeListUpdatePush,
]

class _PSNSyncStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.PSNSyncStatus']]


class _PSNSyncStatusListFilterHasInput(TypedDict):
    has: 'enums.PSNSyncStatus'


class _PSNSyncStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.PSNSyncStatus']


class _PSNSyncStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.PSNSyncStatus']


class _PSNSyncStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


PSNSyncStatusListFilter = Union[
    _PSNSyncStatusListFilterHasInput,
    _PSNSyncStatusListFilterEqualsInput,
    _PSNSyncStatusListFilterHasSomeInput,
    _PSNSyncStatusListFilterIsEmptyInput,
    _PSNSyncStatusListFilterHasEveryInput,
]


class _PSNSyncStatusListUpdateSet(TypedDict):
    set: List['enums.PSNSyncStatus']


class _PSNSyncStatusListUpdatePush(TypedDict):
    push: List['enums.PSNSyncStatus']


PSNSyncStatusListUpdate = Union[
    List['enums.PSNSyncStatus'],
    _PSNSyncStatusListUpdateSet,
    _PSNSyncStatusListUpdatePush,
]


# ForumPost types

class ForumPostOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ForumPost create method"""
    id: _str
    status: 'enums.ForumPostStatus'
    authorId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    author: 'UserCreateNestedWithoutRelationsInput'
    comments: 'ForumCommentCreateManyNestedWithoutRelationsInput'
    reactions: 'ForumReactionCreateManyNestedWithoutRelationsInput'
    followers: 'ForumFollowerCreateManyNestedWithoutRelationsInput'
    subscribers: 'ForumPostSubscriptionCreateManyNestedWithoutRelationsInput'
    gif: Optional['fields.Json']


class ForumPostCreateInput(ForumPostOptionalCreateInput):
    """Required arguments to the ForumPost create method"""
    title: _str
    content: _str
    leagueId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ForumPostOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ForumPost create method, without relations"""
    id: _str
    status: 'enums.ForumPostStatus'
    authorId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    gif: Optional['fields.Json']


class ForumPostCreateWithoutRelationsInput(ForumPostOptionalCreateWithoutRelationsInput):
    """Required arguments to the ForumPost create method, without relations"""
    title: _str
    content: _str
    leagueId: _str

class ForumPostConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ForumPostCreateWithoutRelationsInput'
    where: 'ForumPostWhereUniqueInput'

class ForumPostCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ForumPostCreateWithoutRelationsInput'
    connect: 'ForumPostWhereUniqueInput'
    connect_or_create: 'ForumPostConnectOrCreateWithoutRelationsInput'


class ForumPostCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ForumPostCreateWithoutRelationsInput', List['ForumPostCreateWithoutRelationsInput']]
    connect: Union['ForumPostWhereUniqueInput', List['ForumPostWhereUniqueInput']]
    connect_or_create: Union['ForumPostConnectOrCreateWithoutRelationsInput', List['ForumPostConnectOrCreateWithoutRelationsInput']]

_ForumPostWhereUnique_id_Input = TypedDict(
    '_ForumPostWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ForumPostWhereUniqueInput = _ForumPostWhereUnique_id_Input


class ForumPostUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    title: _str
    content: _str
    status: 'enums.ForumPostStatus'
    leagueId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    author: 'UserUpdateOneWithoutRelationsInput'
    comments: 'ForumCommentUpdateManyWithoutRelationsInput'
    reactions: 'ForumReactionUpdateManyWithoutRelationsInput'
    followers: 'ForumFollowerUpdateManyWithoutRelationsInput'
    subscribers: 'ForumPostSubscriptionUpdateManyWithoutRelationsInput'
    gif: Optional['fields.Json']


class ForumPostUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    title: _str
    content: _str
    status: 'enums.ForumPostStatus'
    leagueId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    gif: Optional['fields.Json']


class ForumPostUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ForumPostCreateWithoutRelationsInput']
    connect: List['ForumPostWhereUniqueInput']
    connect_or_create: List['ForumPostConnectOrCreateWithoutRelationsInput']
    set: List['ForumPostWhereUniqueInput']
    disconnect: List['ForumPostWhereUniqueInput']
    delete: List['ForumPostWhereUniqueInput']

    # TODO
    # update: List['ForumPostUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ForumPostUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ForumPostScalarWhereInput']
    # upsert: List['ForumPostUpserteWithWhereUniqueWithoutRelationsInput']


class ForumPostUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ForumPostCreateWithoutRelationsInput'
    connect: 'ForumPostWhereUniqueInput'
    connect_or_create: 'ForumPostConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ForumPostUpdateInput'
    # upsert: 'ForumPostUpsertWithoutRelationsInput'


class ForumPostUpsertInput(TypedDict):
    create: 'ForumPostCreateInput'
    update: 'ForumPostUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ForumPost_id_OrderByInput = TypedDict(
    '_ForumPost_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ForumPost_title_OrderByInput = TypedDict(
    '_ForumPost_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_ForumPost_content_OrderByInput = TypedDict(
    '_ForumPost_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_ForumPost_status_OrderByInput = TypedDict(
    '_ForumPost_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_ForumPost_authorId_OrderByInput = TypedDict(
    '_ForumPost_authorId_OrderByInput',
    {
        'authorId': 'SortOrder',
    },
    total=True
)

_ForumPost_leagueId_OrderByInput = TypedDict(
    '_ForumPost_leagueId_OrderByInput',
    {
        'leagueId': 'SortOrder',
    },
    total=True
)

_ForumPost_createdAt_OrderByInput = TypedDict(
    '_ForumPost_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_ForumPost_updatedAt_OrderByInput = TypedDict(
    '_ForumPost_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_ForumPost_gif_OrderByInput = TypedDict(
    '_ForumPost_gif_OrderByInput',
    {
        'gif': 'SortOrder',
    },
    total=True
)

_ForumPost_RelevanceInner = TypedDict(
    '_ForumPost_RelevanceInner',
    {
        'fields': 'List[ForumPostScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ForumPost_RelevanceOrderByInput = TypedDict(
    '_ForumPost_RelevanceOrderByInput',
    {
        '_relevance': '_ForumPost_RelevanceInner',
    },
    total=True
)

ForumPostOrderByInput = Union[
    '_ForumPost_id_OrderByInput',
    '_ForumPost_title_OrderByInput',
    '_ForumPost_content_OrderByInput',
    '_ForumPost_status_OrderByInput',
    '_ForumPost_authorId_OrderByInput',
    '_ForumPost_leagueId_OrderByInput',
    '_ForumPost_createdAt_OrderByInput',
    '_ForumPost_updatedAt_OrderByInput',
    '_ForumPost_gif_OrderByInput',
    '_ForumPost_RelevanceOrderByInput',
]



# recursive ForumPost types
# TODO: cleanup these types



ForumPostRelationFilter = TypedDict(
    'ForumPostRelationFilter',
    {
        'is': 'ForumPostWhereInput',
        'is_not': 'ForumPostWhereInput',
    },
    total=False,
)


class ForumPostListRelationFilter(TypedDict, total=False):
    some: 'ForumPostWhereInput'
    none: 'ForumPostWhereInput'
    every: 'ForumPostWhereInput'


class ForumPostInclude(TypedDict, total=False):
    """ForumPost relational arguments"""
    author: Union[bool, 'UserArgsFromForumPost']
    comments: Union[bool, 'FindManyForumCommentArgsFromForumPost']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumPost']
    followers: Union[bool, 'FindManyForumFollowerArgsFromForumPost']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromForumPost']


class ForumPostIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    author: Union[bool, 'UserArgsFromForumPost']
    comments: Union[bool, 'FindManyForumCommentArgsFromForumPost']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumPost']
    followers: Union[bool, 'FindManyForumFollowerArgsFromForumPost']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromForumPost']


class ForumPostArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']
    post: Union[bool, 'ForumPostArgsFromForumPost']
    comment: Union[bool, 'ForumCommentArgsFromForumPost']


class ForumReactionArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']
    post: Union[bool, 'ForumPostArgsFromForumPost']


class ForumFollowerArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']
    post: Union[bool, 'ForumPostArgsFromForumPost']


class ForumPostSubscriptionArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    author: Union[bool, 'UserArgsFromForumPost']
    post: Union[bool, 'ForumPostArgsFromForumPost']
    quotedComment: Union[bool, 'ForumCommentArgsFromForumPost']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromForumPost']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumPost']


class ForumCommentArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    parentLeague: Union[bool, 'LeagueArgsFromForumPost']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromForumPost']
    conferences: Union[bool, 'FindManyConferenceArgsFromForumPost']
    divisions: Union[bool, 'FindManyDivisionArgsFromForumPost']
    teams: Union[bool, 'FindManyTeamArgsFromForumPost']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromForumPost']


class LeagueArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    league: Union[bool, 'LeagueArgsFromForumPost']
    season: Union[bool, 'SeasonArgsFromForumPost']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromForumPost']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromForumPost']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromForumPost']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromForumPost']


class LeagueSeasonArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    league: Union[bool, 'LeagueArgsFromForumPost']
    divisions: Union[bool, 'FindManyDivisionArgsFromForumPost']


class ConferenceArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    conference: Union[bool, 'ConferenceArgsFromForumPost']
    league: Union[bool, 'LeagueArgsFromForumPost']
    teams: Union[bool, 'FindManyTeamArgsFromForumPost']


class DivisionArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromForumPost']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromForumPost']


class SeasonArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumPost']


class LeagueCommissionerArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumPost']


class LeagueBOGArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumPost']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromForumPost']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromForumPost']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromForumPost']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromForumPost']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromForumPost']


class MatchArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromForumPost']
    match: Union[bool, 'MatchArgsFromForumPost']


class ClubMatchStatsArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    customKit: Union[bool, 'CustomKitArgsFromForumPost']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromForumPost']


class ClubMatchStatsDetailsArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromForumPost']


class CustomKitArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    match: Union[bool, 'MatchArgsFromForumPost']


class ClubAggregateMatchStatsArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    match: Union[bool, 'MatchArgsFromForumPost']


class MatchAnalyticsArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    match: Union[bool, 'MatchArgsFromForumPost']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromForumPost']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumPost']


class PlayerMatchArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']
    season: Union[bool, 'SeasonArgsFromForumPost']
    contract: Union[bool, 'ContractArgsFromForumPost']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumPost']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromForumPost']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromForumPost']
    matches: Union[bool, 'FindManyMatchArgsFromForumPost']


class PlayerSeasonArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumPost']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromForumPost']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromForumPost']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromForumPost']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromForumPost']


class PlayerTeamSeasonArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumPost']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumPost']


class PlayerLeagueHistoryArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromForumPost']
    trophySummary: Union[bool, 'PSNTrophyArgsFromForumPost']
    games: Union[bool, 'FindManyPSNGameArgsFromForumPost']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromForumPost']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromForumPost']


class PSNProfileArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    profile: Union[bool, 'PSNProfileArgsFromForumPost']


class PSNAvatarArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    profile: Union[bool, 'PSNProfileArgsFromForumPost']


class PSNTrophyArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    profile: Union[bool, 'PSNProfileArgsFromForumPost']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromForumPost']


class PSNGameArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    profile: Union[bool, 'PSNProfileArgsFromForumPost']


class PSNSyncLogArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    profile: Union[bool, 'PSNProfileArgsFromForumPost']
    game: Union[bool, 'PSNGameArgsFromForumPost']


class PSNGameTrophiesArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    league: Union[bool, 'LeagueArgsFromForumPost']
    division: Union[bool, 'DivisionArgsFromForumPost']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromForumPost']
    nhlAffiliate: Union[bool, 'TeamArgsFromForumPost']
    ahlAffiliate: Union[bool, 'TeamArgsFromForumPost']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromForumPost']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromForumPost']


class TeamArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    team: Union[bool, 'TeamArgsFromForumPost']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumPost']
    matches: Union[bool, 'FindManyMatchArgsFromForumPost']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumPost']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumPost']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumPost']
    bids: Union[bool, 'FindManyBidArgsFromForumPost']
    managers: Union[bool, 'FindManyTeamManagerArgsFromForumPost']


class TeamSeasonArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumPost']


class TeamManagerArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    contract: Union[bool, 'ContractArgsFromForumPost']
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumPost']


class BidArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumPost']
    bids: Union[bool, 'FindManyBidArgsFromForumPost']


class ContractArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    notifications: Union[bool, 'FindManyNotificationArgsFromForumPost']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromForumPost']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromForumPost']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromForumPost']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromForumPost']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromForumPost']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromForumPost']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromForumPost']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromForumPost']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromForumPost']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromForumPost']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromForumPost']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromForumPost']
    psnProfile: Union[bool, 'PSNProfileArgsFromForumPost']


class UserArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']


class EaIdHistoryArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']


class SystemHistoryArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']


class GamertagHistoryArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromForumPost(TypedDict, total=False):
    """Relational arguments for ForumPost"""
    user: Union[bool, 'UserArgsFromForumPost']


class NotificationArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromForumPost(TypedDict, total=False):
    """Arguments for ForumPost"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyForumPostArgs = FindManyForumPostArgsFromForumPost
FindFirstForumPostArgs = FindManyForumPostArgsFromForumPost


class ForumPostWhereInput(TypedDict, total=False):
    """ForumPost arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    title: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    status: 'enums.ForumPostStatus'
    authorId: Union[_str, 'types.StringFilter']
    leagueId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    author: 'UserRelationFilter'
    comments: 'ForumCommentListRelationFilter'
    reactions: 'ForumReactionListRelationFilter'
    followers: 'ForumFollowerListRelationFilter'
    subscribers: 'ForumPostSubscriptionListRelationFilter'
    gif: Union[None, 'fields.Json', 'types.JsonFilter']

    # should be noted that AND and NOT should be Union['ForumPostWhereInput', List['ForumPostWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ForumPostWhereInput']
    OR: List['ForumPostWhereInput']
    NOT: List['ForumPostWhereInput']



# aggregate ForumPost types


class ForumPostScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ForumPost arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    title: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.ForumPostStatus'
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    leagueId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    gif: Union['fields.Json', 'types.JsonWithAggregatesFilter']

    AND: List['ForumPostScalarWhereWithAggregatesInput']
    OR: List['ForumPostScalarWhereWithAggregatesInput']
    NOT: List['ForumPostScalarWhereWithAggregatesInput']



class ForumPostGroupByOutput(TypedDict, total=False):
    id: _str
    title: _str
    content: _str
    status: 'enums.ForumPostStatus'
    authorId: _str
    leagueId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    gif: 'fields.Json'
    _sum: 'ForumPostSumAggregateOutput'
    _avg: 'ForumPostAvgAggregateOutput'
    _min: 'ForumPostMinAggregateOutput'
    _max: 'ForumPostMaxAggregateOutput'
    _count: 'ForumPostCountAggregateOutput'


class ForumPostAvgAggregateOutput(TypedDict, total=False):
    """ForumPost output for aggregating averages"""


class ForumPostSumAggregateOutput(TypedDict, total=False):
    """ForumPost output for aggregating sums"""


class ForumPostScalarAggregateOutput(TypedDict, total=False):
    """ForumPost output including scalar fields"""
    id: _str
    title: _str
    content: _str
    status: 'enums.ForumPostStatus'
    authorId: _str
    leagueId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    gif: 'fields.Json'


ForumPostMinAggregateOutput = ForumPostScalarAggregateOutput
ForumPostMaxAggregateOutput = ForumPostScalarAggregateOutput


class ForumPostMaxAggregateInput(TypedDict, total=False):
    """ForumPost input for aggregating by max"""
    id: bool
    title: bool
    content: bool
    status: bool
    authorId: bool
    leagueId: bool
    createdAt: bool
    updatedAt: bool
    gif: bool


class ForumPostMinAggregateInput(TypedDict, total=False):
    """ForumPost input for aggregating by min"""
    id: bool
    title: bool
    content: bool
    status: bool
    authorId: bool
    leagueId: bool
    createdAt: bool
    updatedAt: bool
    gif: bool


class ForumPostNumberAggregateInput(TypedDict, total=False):
    """ForumPost input for aggregating numbers"""


ForumPostAvgAggregateInput = ForumPostNumberAggregateInput
ForumPostSumAggregateInput = ForumPostNumberAggregateInput


ForumPostCountAggregateInput = TypedDict(
    'ForumPostCountAggregateInput',
    {
        'id': bool,
        'title': bool,
        'content': bool,
        'status': bool,
        'authorId': bool,
        'leagueId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'gif': bool,
        '_all': bool,
    },
    total=False,
)

ForumPostCountAggregateOutput = TypedDict(
    'ForumPostCountAggregateOutput',
    {
        'id': int,
        'title': int,
        'content': int,
        'status': int,
        'authorId': int,
        'leagueId': int,
        'createdAt': int,
        'updatedAt': int,
        'gif': int,
        '_all': int,
    },
    total=False,
)


ForumPostKeys = Literal[
    'id',
    'title',
    'content',
    'status',
    'authorId',
    'leagueId',
    'createdAt',
    'updatedAt',
    'author',
    'comments',
    'reactions',
    'followers',
    'subscribers',
    'gif',
]
ForumPostScalarFieldKeys = Literal[
    'id',
    'title',
    'content',
    'status',
    'authorId',
    'leagueId',
    'createdAt',
    'updatedAt',
    'gif',
]
ForumPostScalarFieldKeysT = TypeVar('ForumPostScalarFieldKeysT', bound=ForumPostScalarFieldKeys)

ForumPostRelationalFieldKeys = Literal[
        'author',
        'comments',
        'reactions',
        'followers',
        'subscribers',
    ]

# ForumReaction types

class ForumReactionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ForumReaction create method"""
    id: _str
    userId: _str
    postId: Optional[_str]
    commentId: Optional[_str]
    createdAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    post: 'ForumPostCreateNestedWithoutRelationsInput'
    comment: 'ForumCommentCreateNestedWithoutRelationsInput'


class ForumReactionCreateInput(ForumReactionOptionalCreateInput):
    """Required arguments to the ForumReaction create method"""
    type: 'enums.ReactionType'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ForumReactionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ForumReaction create method, without relations"""
    id: _str
    userId: _str
    postId: Optional[_str]
    commentId: Optional[_str]
    createdAt: datetime.datetime


class ForumReactionCreateWithoutRelationsInput(ForumReactionOptionalCreateWithoutRelationsInput):
    """Required arguments to the ForumReaction create method, without relations"""
    type: 'enums.ReactionType'

class ForumReactionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ForumReactionCreateWithoutRelationsInput'
    where: 'ForumReactionWhereUniqueInput'

class ForumReactionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ForumReactionCreateWithoutRelationsInput'
    connect: 'ForumReactionWhereUniqueInput'
    connect_or_create: 'ForumReactionConnectOrCreateWithoutRelationsInput'


class ForumReactionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ForumReactionCreateWithoutRelationsInput', List['ForumReactionCreateWithoutRelationsInput']]
    connect: Union['ForumReactionWhereUniqueInput', List['ForumReactionWhereUniqueInput']]
    connect_or_create: Union['ForumReactionConnectOrCreateWithoutRelationsInput', List['ForumReactionConnectOrCreateWithoutRelationsInput']]

_ForumReactionWhereUnique_id_Input = TypedDict(
    '_ForumReactionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ForumReactionCompounduserId_postId_commentId_typeKeyInner = TypedDict(
    '_ForumReactionCompounduserId_postId_commentId_typeKeyInner',
    {
        'userId': '_str',
        'postId': '_str',
        'commentId': '_str',
        'type': 'enums.ReactionType',
    },
    total=True
)

_ForumReactionCompounduserId_postId_commentId_typeKey = TypedDict(
    '_ForumReactionCompounduserId_postId_commentId_typeKey',
    {
        'userId_postId_commentId_type': '_ForumReactionCompounduserId_postId_commentId_typeKeyInner',
    },
    total=True
)

ForumReactionWhereUniqueInput = Union[
    '_ForumReactionWhereUnique_id_Input',
    '_ForumReactionCompounduserId_postId_commentId_typeKey',
]


class ForumReactionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    type: 'enums.ReactionType'
    createdAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    post: 'ForumPostUpdateOneWithoutRelationsInput'
    comment: 'ForumCommentUpdateOneWithoutRelationsInput'


class ForumReactionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    type: 'enums.ReactionType'
    createdAt: datetime.datetime


class ForumReactionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ForumReactionCreateWithoutRelationsInput']
    connect: List['ForumReactionWhereUniqueInput']
    connect_or_create: List['ForumReactionConnectOrCreateWithoutRelationsInput']
    set: List['ForumReactionWhereUniqueInput']
    disconnect: List['ForumReactionWhereUniqueInput']
    delete: List['ForumReactionWhereUniqueInput']

    # TODO
    # update: List['ForumReactionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ForumReactionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ForumReactionScalarWhereInput']
    # upsert: List['ForumReactionUpserteWithWhereUniqueWithoutRelationsInput']


class ForumReactionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ForumReactionCreateWithoutRelationsInput'
    connect: 'ForumReactionWhereUniqueInput'
    connect_or_create: 'ForumReactionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ForumReactionUpdateInput'
    # upsert: 'ForumReactionUpsertWithoutRelationsInput'


class ForumReactionUpsertInput(TypedDict):
    create: 'ForumReactionCreateInput'
    update: 'ForumReactionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ForumReaction_id_OrderByInput = TypedDict(
    '_ForumReaction_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ForumReaction_type_OrderByInput = TypedDict(
    '_ForumReaction_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_ForumReaction_userId_OrderByInput = TypedDict(
    '_ForumReaction_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_ForumReaction_postId_OrderByInput = TypedDict(
    '_ForumReaction_postId_OrderByInput',
    {
        'postId': 'SortOrder',
    },
    total=True
)

_ForumReaction_commentId_OrderByInput = TypedDict(
    '_ForumReaction_commentId_OrderByInput',
    {
        'commentId': 'SortOrder',
    },
    total=True
)

_ForumReaction_createdAt_OrderByInput = TypedDict(
    '_ForumReaction_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_ForumReaction_RelevanceInner = TypedDict(
    '_ForumReaction_RelevanceInner',
    {
        'fields': 'List[ForumReactionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ForumReaction_RelevanceOrderByInput = TypedDict(
    '_ForumReaction_RelevanceOrderByInput',
    {
        '_relevance': '_ForumReaction_RelevanceInner',
    },
    total=True
)

ForumReactionOrderByInput = Union[
    '_ForumReaction_id_OrderByInput',
    '_ForumReaction_type_OrderByInput',
    '_ForumReaction_userId_OrderByInput',
    '_ForumReaction_postId_OrderByInput',
    '_ForumReaction_commentId_OrderByInput',
    '_ForumReaction_createdAt_OrderByInput',
    '_ForumReaction_RelevanceOrderByInput',
]



# recursive ForumReaction types
# TODO: cleanup these types



ForumReactionRelationFilter = TypedDict(
    'ForumReactionRelationFilter',
    {
        'is': 'ForumReactionWhereInput',
        'is_not': 'ForumReactionWhereInput',
    },
    total=False,
)


class ForumReactionListRelationFilter(TypedDict, total=False):
    some: 'ForumReactionWhereInput'
    none: 'ForumReactionWhereInput'
    every: 'ForumReactionWhereInput'


class ForumReactionInclude(TypedDict, total=False):
    """ForumReaction relational arguments"""
    user: Union[bool, 'UserArgsFromForumReaction']
    post: Union[bool, 'ForumPostArgsFromForumReaction']
    comment: Union[bool, 'ForumCommentArgsFromForumReaction']


class ForumPostIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    author: Union[bool, 'UserArgsFromForumReaction']
    comments: Union[bool, 'FindManyForumCommentArgsFromForumReaction']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumReaction']
    followers: Union[bool, 'FindManyForumFollowerArgsFromForumReaction']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromForumReaction']


class ForumPostArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']
    post: Union[bool, 'ForumPostArgsFromForumReaction']
    comment: Union[bool, 'ForumCommentArgsFromForumReaction']


class ForumReactionArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']
    post: Union[bool, 'ForumPostArgsFromForumReaction']


class ForumFollowerArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']
    post: Union[bool, 'ForumPostArgsFromForumReaction']


class ForumPostSubscriptionArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    author: Union[bool, 'UserArgsFromForumReaction']
    post: Union[bool, 'ForumPostArgsFromForumReaction']
    quotedComment: Union[bool, 'ForumCommentArgsFromForumReaction']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromForumReaction']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumReaction']


class ForumCommentArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    parentLeague: Union[bool, 'LeagueArgsFromForumReaction']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromForumReaction']
    conferences: Union[bool, 'FindManyConferenceArgsFromForumReaction']
    divisions: Union[bool, 'FindManyDivisionArgsFromForumReaction']
    teams: Union[bool, 'FindManyTeamArgsFromForumReaction']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromForumReaction']


class LeagueArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    league: Union[bool, 'LeagueArgsFromForumReaction']
    season: Union[bool, 'SeasonArgsFromForumReaction']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromForumReaction']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromForumReaction']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromForumReaction']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromForumReaction']


class LeagueSeasonArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    league: Union[bool, 'LeagueArgsFromForumReaction']
    divisions: Union[bool, 'FindManyDivisionArgsFromForumReaction']


class ConferenceArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    conference: Union[bool, 'ConferenceArgsFromForumReaction']
    league: Union[bool, 'LeagueArgsFromForumReaction']
    teams: Union[bool, 'FindManyTeamArgsFromForumReaction']


class DivisionArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromForumReaction']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromForumReaction']


class SeasonArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumReaction']


class LeagueCommissionerArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumReaction']


class LeagueBOGArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumReaction']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromForumReaction']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromForumReaction']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromForumReaction']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromForumReaction']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromForumReaction']


class MatchArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromForumReaction']
    match: Union[bool, 'MatchArgsFromForumReaction']


class ClubMatchStatsArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    customKit: Union[bool, 'CustomKitArgsFromForumReaction']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromForumReaction']


class ClubMatchStatsDetailsArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromForumReaction']


class CustomKitArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    match: Union[bool, 'MatchArgsFromForumReaction']


class ClubAggregateMatchStatsArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    match: Union[bool, 'MatchArgsFromForumReaction']


class MatchAnalyticsArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    match: Union[bool, 'MatchArgsFromForumReaction']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromForumReaction']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumReaction']


class PlayerMatchArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']
    season: Union[bool, 'SeasonArgsFromForumReaction']
    contract: Union[bool, 'ContractArgsFromForumReaction']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumReaction']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromForumReaction']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromForumReaction']
    matches: Union[bool, 'FindManyMatchArgsFromForumReaction']


class PlayerSeasonArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumReaction']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromForumReaction']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromForumReaction']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromForumReaction']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromForumReaction']


class PlayerTeamSeasonArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumReaction']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumReaction']


class PlayerLeagueHistoryArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromForumReaction']
    trophySummary: Union[bool, 'PSNTrophyArgsFromForumReaction']
    games: Union[bool, 'FindManyPSNGameArgsFromForumReaction']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromForumReaction']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromForumReaction']


class PSNProfileArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    profile: Union[bool, 'PSNProfileArgsFromForumReaction']


class PSNAvatarArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    profile: Union[bool, 'PSNProfileArgsFromForumReaction']


class PSNTrophyArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    profile: Union[bool, 'PSNProfileArgsFromForumReaction']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromForumReaction']


class PSNGameArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    profile: Union[bool, 'PSNProfileArgsFromForumReaction']


class PSNSyncLogArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    profile: Union[bool, 'PSNProfileArgsFromForumReaction']
    game: Union[bool, 'PSNGameArgsFromForumReaction']


class PSNGameTrophiesArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    league: Union[bool, 'LeagueArgsFromForumReaction']
    division: Union[bool, 'DivisionArgsFromForumReaction']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromForumReaction']
    nhlAffiliate: Union[bool, 'TeamArgsFromForumReaction']
    ahlAffiliate: Union[bool, 'TeamArgsFromForumReaction']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromForumReaction']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromForumReaction']


class TeamArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    team: Union[bool, 'TeamArgsFromForumReaction']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumReaction']
    matches: Union[bool, 'FindManyMatchArgsFromForumReaction']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumReaction']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumReaction']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumReaction']
    bids: Union[bool, 'FindManyBidArgsFromForumReaction']
    managers: Union[bool, 'FindManyTeamManagerArgsFromForumReaction']


class TeamSeasonArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumReaction']


class TeamManagerArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    contract: Union[bool, 'ContractArgsFromForumReaction']
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumReaction']


class BidArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumReaction']
    bids: Union[bool, 'FindManyBidArgsFromForumReaction']


class ContractArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    notifications: Union[bool, 'FindManyNotificationArgsFromForumReaction']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromForumReaction']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromForumReaction']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromForumReaction']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromForumReaction']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromForumReaction']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromForumReaction']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromForumReaction']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromForumReaction']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromForumReaction']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromForumReaction']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromForumReaction']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromForumReaction']
    psnProfile: Union[bool, 'PSNProfileArgsFromForumReaction']


class UserArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']


class EaIdHistoryArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']


class SystemHistoryArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']


class GamertagHistoryArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromForumReaction(TypedDict, total=False):
    """Relational arguments for ForumReaction"""
    user: Union[bool, 'UserArgsFromForumReaction']


class NotificationArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromForumReaction(TypedDict, total=False):
    """Arguments for ForumReaction"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyForumReactionArgs = FindManyForumReactionArgsFromForumReaction
FindFirstForumReactionArgs = FindManyForumReactionArgsFromForumReaction


class ForumReactionWhereInput(TypedDict, total=False):
    """ForumReaction arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    type: 'enums.ReactionType'
    userId: Union[_str, 'types.StringFilter']
    postId: Union[None, _str, 'types.StringFilter']
    commentId: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    post: 'ForumPostRelationFilter'
    comment: 'ForumCommentRelationFilter'

    # should be noted that AND and NOT should be Union['ForumReactionWhereInput', List['ForumReactionWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ForumReactionWhereInput']
    OR: List['ForumReactionWhereInput']
    NOT: List['ForumReactionWhereInput']



# aggregate ForumReaction types


class ForumReactionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ForumReaction arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.ReactionType'
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    commentId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ForumReactionScalarWhereWithAggregatesInput']
    OR: List['ForumReactionScalarWhereWithAggregatesInput']
    NOT: List['ForumReactionScalarWhereWithAggregatesInput']



class ForumReactionGroupByOutput(TypedDict, total=False):
    id: _str
    type: 'enums.ReactionType'
    userId: _str
    postId: _str
    commentId: _str
    createdAt: datetime.datetime
    _sum: 'ForumReactionSumAggregateOutput'
    _avg: 'ForumReactionAvgAggregateOutput'
    _min: 'ForumReactionMinAggregateOutput'
    _max: 'ForumReactionMaxAggregateOutput'
    _count: 'ForumReactionCountAggregateOutput'


class ForumReactionAvgAggregateOutput(TypedDict, total=False):
    """ForumReaction output for aggregating averages"""


class ForumReactionSumAggregateOutput(TypedDict, total=False):
    """ForumReaction output for aggregating sums"""


class ForumReactionScalarAggregateOutput(TypedDict, total=False):
    """ForumReaction output including scalar fields"""
    id: _str
    type: 'enums.ReactionType'
    userId: _str
    postId: _str
    commentId: _str
    createdAt: datetime.datetime


ForumReactionMinAggregateOutput = ForumReactionScalarAggregateOutput
ForumReactionMaxAggregateOutput = ForumReactionScalarAggregateOutput


class ForumReactionMaxAggregateInput(TypedDict, total=False):
    """ForumReaction input for aggregating by max"""
    id: bool
    type: bool
    userId: bool
    postId: bool
    commentId: bool
    createdAt: bool


class ForumReactionMinAggregateInput(TypedDict, total=False):
    """ForumReaction input for aggregating by min"""
    id: bool
    type: bool
    userId: bool
    postId: bool
    commentId: bool
    createdAt: bool


class ForumReactionNumberAggregateInput(TypedDict, total=False):
    """ForumReaction input for aggregating numbers"""


ForumReactionAvgAggregateInput = ForumReactionNumberAggregateInput
ForumReactionSumAggregateInput = ForumReactionNumberAggregateInput


ForumReactionCountAggregateInput = TypedDict(
    'ForumReactionCountAggregateInput',
    {
        'id': bool,
        'type': bool,
        'userId': bool,
        'postId': bool,
        'commentId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

ForumReactionCountAggregateOutput = TypedDict(
    'ForumReactionCountAggregateOutput',
    {
        'id': int,
        'type': int,
        'userId': int,
        'postId': int,
        'commentId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


ForumReactionKeys = Literal[
    'id',
    'type',
    'userId',
    'postId',
    'commentId',
    'createdAt',
    'user',
    'post',
    'comment',
]
ForumReactionScalarFieldKeys = Literal[
    'id',
    'type',
    'userId',
    'postId',
    'commentId',
    'createdAt',
]
ForumReactionScalarFieldKeysT = TypeVar('ForumReactionScalarFieldKeysT', bound=ForumReactionScalarFieldKeys)

ForumReactionRelationalFieldKeys = Literal[
        'user',
        'post',
        'comment',
    ]

# ForumFollower types

class ForumFollowerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ForumFollower create method"""
    id: _str
    userId: _str
    postId: _str
    createdAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    post: 'ForumPostCreateNestedWithoutRelationsInput'


class ForumFollowerCreateInput(ForumFollowerOptionalCreateInput):
    """Required arguments to the ForumFollower create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ForumFollowerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ForumFollower create method, without relations"""
    id: _str
    userId: _str
    postId: _str
    createdAt: datetime.datetime


class ForumFollowerCreateWithoutRelationsInput(ForumFollowerOptionalCreateWithoutRelationsInput):
    """Required arguments to the ForumFollower create method, without relations"""

class ForumFollowerConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ForumFollowerCreateWithoutRelationsInput'
    where: 'ForumFollowerWhereUniqueInput'

class ForumFollowerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ForumFollowerCreateWithoutRelationsInput'
    connect: 'ForumFollowerWhereUniqueInput'
    connect_or_create: 'ForumFollowerConnectOrCreateWithoutRelationsInput'


class ForumFollowerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ForumFollowerCreateWithoutRelationsInput', List['ForumFollowerCreateWithoutRelationsInput']]
    connect: Union['ForumFollowerWhereUniqueInput', List['ForumFollowerWhereUniqueInput']]
    connect_or_create: Union['ForumFollowerConnectOrCreateWithoutRelationsInput', List['ForumFollowerConnectOrCreateWithoutRelationsInput']]

_ForumFollowerWhereUnique_id_Input = TypedDict(
    '_ForumFollowerWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ForumFollowerCompounduserId_postIdKeyInner = TypedDict(
    '_ForumFollowerCompounduserId_postIdKeyInner',
    {
        'userId': '_str',
        'postId': '_str',
    },
    total=True
)

_ForumFollowerCompounduserId_postIdKey = TypedDict(
    '_ForumFollowerCompounduserId_postIdKey',
    {
        'userId_postId': '_ForumFollowerCompounduserId_postIdKeyInner',
    },
    total=True
)

ForumFollowerWhereUniqueInput = Union[
    '_ForumFollowerWhereUnique_id_Input',
    '_ForumFollowerCompounduserId_postIdKey',
]


class ForumFollowerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    createdAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    post: 'ForumPostUpdateOneWithoutRelationsInput'


class ForumFollowerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime


class ForumFollowerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ForumFollowerCreateWithoutRelationsInput']
    connect: List['ForumFollowerWhereUniqueInput']
    connect_or_create: List['ForumFollowerConnectOrCreateWithoutRelationsInput']
    set: List['ForumFollowerWhereUniqueInput']
    disconnect: List['ForumFollowerWhereUniqueInput']
    delete: List['ForumFollowerWhereUniqueInput']

    # TODO
    # update: List['ForumFollowerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ForumFollowerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ForumFollowerScalarWhereInput']
    # upsert: List['ForumFollowerUpserteWithWhereUniqueWithoutRelationsInput']


class ForumFollowerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ForumFollowerCreateWithoutRelationsInput'
    connect: 'ForumFollowerWhereUniqueInput'
    connect_or_create: 'ForumFollowerConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ForumFollowerUpdateInput'
    # upsert: 'ForumFollowerUpsertWithoutRelationsInput'


class ForumFollowerUpsertInput(TypedDict):
    create: 'ForumFollowerCreateInput'
    update: 'ForumFollowerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ForumFollower_id_OrderByInput = TypedDict(
    '_ForumFollower_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ForumFollower_userId_OrderByInput = TypedDict(
    '_ForumFollower_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_ForumFollower_postId_OrderByInput = TypedDict(
    '_ForumFollower_postId_OrderByInput',
    {
        'postId': 'SortOrder',
    },
    total=True
)

_ForumFollower_createdAt_OrderByInput = TypedDict(
    '_ForumFollower_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_ForumFollower_RelevanceInner = TypedDict(
    '_ForumFollower_RelevanceInner',
    {
        'fields': 'List[ForumFollowerScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ForumFollower_RelevanceOrderByInput = TypedDict(
    '_ForumFollower_RelevanceOrderByInput',
    {
        '_relevance': '_ForumFollower_RelevanceInner',
    },
    total=True
)

ForumFollowerOrderByInput = Union[
    '_ForumFollower_id_OrderByInput',
    '_ForumFollower_userId_OrderByInput',
    '_ForumFollower_postId_OrderByInput',
    '_ForumFollower_createdAt_OrderByInput',
    '_ForumFollower_RelevanceOrderByInput',
]



# recursive ForumFollower types
# TODO: cleanup these types



ForumFollowerRelationFilter = TypedDict(
    'ForumFollowerRelationFilter',
    {
        'is': 'ForumFollowerWhereInput',
        'is_not': 'ForumFollowerWhereInput',
    },
    total=False,
)


class ForumFollowerListRelationFilter(TypedDict, total=False):
    some: 'ForumFollowerWhereInput'
    none: 'ForumFollowerWhereInput'
    every: 'ForumFollowerWhereInput'


class ForumFollowerInclude(TypedDict, total=False):
    """ForumFollower relational arguments"""
    user: Union[bool, 'UserArgsFromForumFollower']
    post: Union[bool, 'ForumPostArgsFromForumFollower']


class ForumPostIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    author: Union[bool, 'UserArgsFromForumFollower']
    comments: Union[bool, 'FindManyForumCommentArgsFromForumFollower']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumFollower']
    followers: Union[bool, 'FindManyForumFollowerArgsFromForumFollower']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromForumFollower']


class ForumPostArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']
    post: Union[bool, 'ForumPostArgsFromForumFollower']
    comment: Union[bool, 'ForumCommentArgsFromForumFollower']


class ForumReactionArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']
    post: Union[bool, 'ForumPostArgsFromForumFollower']


class ForumFollowerArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']
    post: Union[bool, 'ForumPostArgsFromForumFollower']


class ForumPostSubscriptionArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    author: Union[bool, 'UserArgsFromForumFollower']
    post: Union[bool, 'ForumPostArgsFromForumFollower']
    quotedComment: Union[bool, 'ForumCommentArgsFromForumFollower']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromForumFollower']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumFollower']


class ForumCommentArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    parentLeague: Union[bool, 'LeagueArgsFromForumFollower']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromForumFollower']
    conferences: Union[bool, 'FindManyConferenceArgsFromForumFollower']
    divisions: Union[bool, 'FindManyDivisionArgsFromForumFollower']
    teams: Union[bool, 'FindManyTeamArgsFromForumFollower']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromForumFollower']


class LeagueArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    league: Union[bool, 'LeagueArgsFromForumFollower']
    season: Union[bool, 'SeasonArgsFromForumFollower']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromForumFollower']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromForumFollower']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromForumFollower']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromForumFollower']


class LeagueSeasonArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    league: Union[bool, 'LeagueArgsFromForumFollower']
    divisions: Union[bool, 'FindManyDivisionArgsFromForumFollower']


class ConferenceArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    conference: Union[bool, 'ConferenceArgsFromForumFollower']
    league: Union[bool, 'LeagueArgsFromForumFollower']
    teams: Union[bool, 'FindManyTeamArgsFromForumFollower']


class DivisionArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromForumFollower']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromForumFollower']


class SeasonArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumFollower']


class LeagueCommissionerArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumFollower']


class LeagueBOGArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumFollower']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromForumFollower']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromForumFollower']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromForumFollower']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromForumFollower']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromForumFollower']


class MatchArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromForumFollower']
    match: Union[bool, 'MatchArgsFromForumFollower']


class ClubMatchStatsArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    customKit: Union[bool, 'CustomKitArgsFromForumFollower']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromForumFollower']


class ClubMatchStatsDetailsArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromForumFollower']


class CustomKitArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    match: Union[bool, 'MatchArgsFromForumFollower']


class ClubAggregateMatchStatsArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    match: Union[bool, 'MatchArgsFromForumFollower']


class MatchAnalyticsArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    match: Union[bool, 'MatchArgsFromForumFollower']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromForumFollower']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumFollower']


class PlayerMatchArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']
    season: Union[bool, 'SeasonArgsFromForumFollower']
    contract: Union[bool, 'ContractArgsFromForumFollower']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumFollower']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromForumFollower']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromForumFollower']
    matches: Union[bool, 'FindManyMatchArgsFromForumFollower']


class PlayerSeasonArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumFollower']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromForumFollower']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromForumFollower']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromForumFollower']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromForumFollower']


class PlayerTeamSeasonArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumFollower']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumFollower']


class PlayerLeagueHistoryArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromForumFollower']
    trophySummary: Union[bool, 'PSNTrophyArgsFromForumFollower']
    games: Union[bool, 'FindManyPSNGameArgsFromForumFollower']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromForumFollower']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromForumFollower']


class PSNProfileArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    profile: Union[bool, 'PSNProfileArgsFromForumFollower']


class PSNAvatarArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    profile: Union[bool, 'PSNProfileArgsFromForumFollower']


class PSNTrophyArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    profile: Union[bool, 'PSNProfileArgsFromForumFollower']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromForumFollower']


class PSNGameArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    profile: Union[bool, 'PSNProfileArgsFromForumFollower']


class PSNSyncLogArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    profile: Union[bool, 'PSNProfileArgsFromForumFollower']
    game: Union[bool, 'PSNGameArgsFromForumFollower']


class PSNGameTrophiesArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    league: Union[bool, 'LeagueArgsFromForumFollower']
    division: Union[bool, 'DivisionArgsFromForumFollower']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromForumFollower']
    nhlAffiliate: Union[bool, 'TeamArgsFromForumFollower']
    ahlAffiliate: Union[bool, 'TeamArgsFromForumFollower']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromForumFollower']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromForumFollower']


class TeamArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    team: Union[bool, 'TeamArgsFromForumFollower']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumFollower']
    matches: Union[bool, 'FindManyMatchArgsFromForumFollower']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumFollower']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumFollower']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumFollower']
    bids: Union[bool, 'FindManyBidArgsFromForumFollower']
    managers: Union[bool, 'FindManyTeamManagerArgsFromForumFollower']


class TeamSeasonArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumFollower']


class TeamManagerArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    contract: Union[bool, 'ContractArgsFromForumFollower']
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumFollower']


class BidArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumFollower']
    bids: Union[bool, 'FindManyBidArgsFromForumFollower']


class ContractArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    notifications: Union[bool, 'FindManyNotificationArgsFromForumFollower']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromForumFollower']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromForumFollower']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromForumFollower']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromForumFollower']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromForumFollower']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromForumFollower']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromForumFollower']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromForumFollower']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromForumFollower']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromForumFollower']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromForumFollower']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromForumFollower']
    psnProfile: Union[bool, 'PSNProfileArgsFromForumFollower']


class UserArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']


class EaIdHistoryArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']


class SystemHistoryArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']


class GamertagHistoryArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromForumFollower(TypedDict, total=False):
    """Relational arguments for ForumFollower"""
    user: Union[bool, 'UserArgsFromForumFollower']


class NotificationArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromForumFollower(TypedDict, total=False):
    """Arguments for ForumFollower"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyForumFollowerArgs = FindManyForumFollowerArgsFromForumFollower
FindFirstForumFollowerArgs = FindManyForumFollowerArgsFromForumFollower


class ForumFollowerWhereInput(TypedDict, total=False):
    """ForumFollower arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    postId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    post: 'ForumPostRelationFilter'

    # should be noted that AND and NOT should be Union['ForumFollowerWhereInput', List['ForumFollowerWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ForumFollowerWhereInput']
    OR: List['ForumFollowerWhereInput']
    NOT: List['ForumFollowerWhereInput']



# aggregate ForumFollower types


class ForumFollowerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ForumFollower arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ForumFollowerScalarWhereWithAggregatesInput']
    OR: List['ForumFollowerScalarWhereWithAggregatesInput']
    NOT: List['ForumFollowerScalarWhereWithAggregatesInput']



class ForumFollowerGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    postId: _str
    createdAt: datetime.datetime
    _sum: 'ForumFollowerSumAggregateOutput'
    _avg: 'ForumFollowerAvgAggregateOutput'
    _min: 'ForumFollowerMinAggregateOutput'
    _max: 'ForumFollowerMaxAggregateOutput'
    _count: 'ForumFollowerCountAggregateOutput'


class ForumFollowerAvgAggregateOutput(TypedDict, total=False):
    """ForumFollower output for aggregating averages"""


class ForumFollowerSumAggregateOutput(TypedDict, total=False):
    """ForumFollower output for aggregating sums"""


class ForumFollowerScalarAggregateOutput(TypedDict, total=False):
    """ForumFollower output including scalar fields"""
    id: _str
    userId: _str
    postId: _str
    createdAt: datetime.datetime


ForumFollowerMinAggregateOutput = ForumFollowerScalarAggregateOutput
ForumFollowerMaxAggregateOutput = ForumFollowerScalarAggregateOutput


class ForumFollowerMaxAggregateInput(TypedDict, total=False):
    """ForumFollower input for aggregating by max"""
    id: bool
    userId: bool
    postId: bool
    createdAt: bool


class ForumFollowerMinAggregateInput(TypedDict, total=False):
    """ForumFollower input for aggregating by min"""
    id: bool
    userId: bool
    postId: bool
    createdAt: bool


class ForumFollowerNumberAggregateInput(TypedDict, total=False):
    """ForumFollower input for aggregating numbers"""


ForumFollowerAvgAggregateInput = ForumFollowerNumberAggregateInput
ForumFollowerSumAggregateInput = ForumFollowerNumberAggregateInput


ForumFollowerCountAggregateInput = TypedDict(
    'ForumFollowerCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'postId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

ForumFollowerCountAggregateOutput = TypedDict(
    'ForumFollowerCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'postId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


ForumFollowerKeys = Literal[
    'id',
    'userId',
    'postId',
    'createdAt',
    'user',
    'post',
]
ForumFollowerScalarFieldKeys = Literal[
    'id',
    'userId',
    'postId',
    'createdAt',
]
ForumFollowerScalarFieldKeysT = TypeVar('ForumFollowerScalarFieldKeysT', bound=ForumFollowerScalarFieldKeys)

ForumFollowerRelationalFieldKeys = Literal[
        'user',
        'post',
    ]

# ForumPostSubscription types

class ForumPostSubscriptionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ForumPostSubscription create method"""
    id: _str
    user: 'UserCreateNestedWithoutRelationsInput'
    userId: _str
    post: 'ForumPostCreateNestedWithoutRelationsInput'
    postId: _str
    createdAt: datetime.datetime


class ForumPostSubscriptionCreateInput(ForumPostSubscriptionOptionalCreateInput):
    """Required arguments to the ForumPostSubscription create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ForumPostSubscriptionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ForumPostSubscription create method, without relations"""
    id: _str
    userId: _str
    postId: _str
    createdAt: datetime.datetime


class ForumPostSubscriptionCreateWithoutRelationsInput(ForumPostSubscriptionOptionalCreateWithoutRelationsInput):
    """Required arguments to the ForumPostSubscription create method, without relations"""

class ForumPostSubscriptionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ForumPostSubscriptionCreateWithoutRelationsInput'
    where: 'ForumPostSubscriptionWhereUniqueInput'

class ForumPostSubscriptionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ForumPostSubscriptionCreateWithoutRelationsInput'
    connect: 'ForumPostSubscriptionWhereUniqueInput'
    connect_or_create: 'ForumPostSubscriptionConnectOrCreateWithoutRelationsInput'


class ForumPostSubscriptionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ForumPostSubscriptionCreateWithoutRelationsInput', List['ForumPostSubscriptionCreateWithoutRelationsInput']]
    connect: Union['ForumPostSubscriptionWhereUniqueInput', List['ForumPostSubscriptionWhereUniqueInput']]
    connect_or_create: Union['ForumPostSubscriptionConnectOrCreateWithoutRelationsInput', List['ForumPostSubscriptionConnectOrCreateWithoutRelationsInput']]

_ForumPostSubscriptionWhereUnique_id_Input = TypedDict(
    '_ForumPostSubscriptionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ForumPostSubscriptionCompounduserId_postIdKeyInner = TypedDict(
    '_ForumPostSubscriptionCompounduserId_postIdKeyInner',
    {
        'userId': '_str',
        'postId': '_str',
    },
    total=True
)

_ForumPostSubscriptionCompounduserId_postIdKey = TypedDict(
    '_ForumPostSubscriptionCompounduserId_postIdKey',
    {
        'userId_postId': '_ForumPostSubscriptionCompounduserId_postIdKeyInner',
    },
    total=True
)

ForumPostSubscriptionWhereUniqueInput = Union[
    '_ForumPostSubscriptionWhereUnique_id_Input',
    '_ForumPostSubscriptionCompounduserId_postIdKey',
]


class ForumPostSubscriptionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    user: 'UserUpdateOneWithoutRelationsInput'
    post: 'ForumPostUpdateOneWithoutRelationsInput'
    createdAt: datetime.datetime


class ForumPostSubscriptionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime


class ForumPostSubscriptionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ForumPostSubscriptionCreateWithoutRelationsInput']
    connect: List['ForumPostSubscriptionWhereUniqueInput']
    connect_or_create: List['ForumPostSubscriptionConnectOrCreateWithoutRelationsInput']
    set: List['ForumPostSubscriptionWhereUniqueInput']
    disconnect: List['ForumPostSubscriptionWhereUniqueInput']
    delete: List['ForumPostSubscriptionWhereUniqueInput']

    # TODO
    # update: List['ForumPostSubscriptionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ForumPostSubscriptionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ForumPostSubscriptionScalarWhereInput']
    # upsert: List['ForumPostSubscriptionUpserteWithWhereUniqueWithoutRelationsInput']


class ForumPostSubscriptionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ForumPostSubscriptionCreateWithoutRelationsInput'
    connect: 'ForumPostSubscriptionWhereUniqueInput'
    connect_or_create: 'ForumPostSubscriptionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ForumPostSubscriptionUpdateInput'
    # upsert: 'ForumPostSubscriptionUpsertWithoutRelationsInput'


class ForumPostSubscriptionUpsertInput(TypedDict):
    create: 'ForumPostSubscriptionCreateInput'
    update: 'ForumPostSubscriptionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ForumPostSubscription_id_OrderByInput = TypedDict(
    '_ForumPostSubscription_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ForumPostSubscription_userId_OrderByInput = TypedDict(
    '_ForumPostSubscription_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_ForumPostSubscription_postId_OrderByInput = TypedDict(
    '_ForumPostSubscription_postId_OrderByInput',
    {
        'postId': 'SortOrder',
    },
    total=True
)

_ForumPostSubscription_createdAt_OrderByInput = TypedDict(
    '_ForumPostSubscription_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_ForumPostSubscription_RelevanceInner = TypedDict(
    '_ForumPostSubscription_RelevanceInner',
    {
        'fields': 'List[ForumPostSubscriptionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ForumPostSubscription_RelevanceOrderByInput = TypedDict(
    '_ForumPostSubscription_RelevanceOrderByInput',
    {
        '_relevance': '_ForumPostSubscription_RelevanceInner',
    },
    total=True
)

ForumPostSubscriptionOrderByInput = Union[
    '_ForumPostSubscription_id_OrderByInput',
    '_ForumPostSubscription_userId_OrderByInput',
    '_ForumPostSubscription_postId_OrderByInput',
    '_ForumPostSubscription_createdAt_OrderByInput',
    '_ForumPostSubscription_RelevanceOrderByInput',
]



# recursive ForumPostSubscription types
# TODO: cleanup these types



ForumPostSubscriptionRelationFilter = TypedDict(
    'ForumPostSubscriptionRelationFilter',
    {
        'is': 'ForumPostSubscriptionWhereInput',
        'is_not': 'ForumPostSubscriptionWhereInput',
    },
    total=False,
)


class ForumPostSubscriptionListRelationFilter(TypedDict, total=False):
    some: 'ForumPostSubscriptionWhereInput'
    none: 'ForumPostSubscriptionWhereInput'
    every: 'ForumPostSubscriptionWhereInput'


class ForumPostSubscriptionInclude(TypedDict, total=False):
    """ForumPostSubscription relational arguments"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']
    post: Union[bool, 'ForumPostArgsFromForumPostSubscription']


class ForumPostIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    author: Union[bool, 'UserArgsFromForumPostSubscription']
    comments: Union[bool, 'FindManyForumCommentArgsFromForumPostSubscription']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumPostSubscription']
    followers: Union[bool, 'FindManyForumFollowerArgsFromForumPostSubscription']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromForumPostSubscription']


class ForumPostArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']
    post: Union[bool, 'ForumPostArgsFromForumPostSubscription']
    comment: Union[bool, 'ForumCommentArgsFromForumPostSubscription']


class ForumReactionArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']
    post: Union[bool, 'ForumPostArgsFromForumPostSubscription']


class ForumFollowerArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']
    post: Union[bool, 'ForumPostArgsFromForumPostSubscription']


class ForumPostSubscriptionArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    author: Union[bool, 'UserArgsFromForumPostSubscription']
    post: Union[bool, 'ForumPostArgsFromForumPostSubscription']
    quotedComment: Union[bool, 'ForumCommentArgsFromForumPostSubscription']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromForumPostSubscription']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumPostSubscription']


class ForumCommentArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    parentLeague: Union[bool, 'LeagueArgsFromForumPostSubscription']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromForumPostSubscription']
    conferences: Union[bool, 'FindManyConferenceArgsFromForumPostSubscription']
    divisions: Union[bool, 'FindManyDivisionArgsFromForumPostSubscription']
    teams: Union[bool, 'FindManyTeamArgsFromForumPostSubscription']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromForumPostSubscription']


class LeagueArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    league: Union[bool, 'LeagueArgsFromForumPostSubscription']
    season: Union[bool, 'SeasonArgsFromForumPostSubscription']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromForumPostSubscription']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromForumPostSubscription']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromForumPostSubscription']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromForumPostSubscription']


class LeagueSeasonArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    league: Union[bool, 'LeagueArgsFromForumPostSubscription']
    divisions: Union[bool, 'FindManyDivisionArgsFromForumPostSubscription']


class ConferenceArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    conference: Union[bool, 'ConferenceArgsFromForumPostSubscription']
    league: Union[bool, 'LeagueArgsFromForumPostSubscription']
    teams: Union[bool, 'FindManyTeamArgsFromForumPostSubscription']


class DivisionArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromForumPostSubscription']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromForumPostSubscription']


class SeasonArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumPostSubscription']


class LeagueCommissionerArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumPostSubscription']


class LeagueBOGArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumPostSubscription']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromForumPostSubscription']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromForumPostSubscription']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromForumPostSubscription']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromForumPostSubscription']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromForumPostSubscription']


class MatchArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromForumPostSubscription']
    match: Union[bool, 'MatchArgsFromForumPostSubscription']


class ClubMatchStatsArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    customKit: Union[bool, 'CustomKitArgsFromForumPostSubscription']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromForumPostSubscription']


class ClubMatchStatsDetailsArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromForumPostSubscription']


class CustomKitArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    match: Union[bool, 'MatchArgsFromForumPostSubscription']


class ClubAggregateMatchStatsArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    match: Union[bool, 'MatchArgsFromForumPostSubscription']


class MatchAnalyticsArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    match: Union[bool, 'MatchArgsFromForumPostSubscription']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromForumPostSubscription']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumPostSubscription']


class PlayerMatchArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']
    season: Union[bool, 'SeasonArgsFromForumPostSubscription']
    contract: Union[bool, 'ContractArgsFromForumPostSubscription']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumPostSubscription']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromForumPostSubscription']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromForumPostSubscription']
    matches: Union[bool, 'FindManyMatchArgsFromForumPostSubscription']


class PlayerSeasonArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumPostSubscription']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromForumPostSubscription']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromForumPostSubscription']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromForumPostSubscription']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromForumPostSubscription']


class PlayerTeamSeasonArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumPostSubscription']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumPostSubscription']


class PlayerLeagueHistoryArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromForumPostSubscription']
    trophySummary: Union[bool, 'PSNTrophyArgsFromForumPostSubscription']
    games: Union[bool, 'FindManyPSNGameArgsFromForumPostSubscription']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromForumPostSubscription']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromForumPostSubscription']


class PSNProfileArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    profile: Union[bool, 'PSNProfileArgsFromForumPostSubscription']


class PSNAvatarArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    profile: Union[bool, 'PSNProfileArgsFromForumPostSubscription']


class PSNTrophyArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    profile: Union[bool, 'PSNProfileArgsFromForumPostSubscription']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromForumPostSubscription']


class PSNGameArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    profile: Union[bool, 'PSNProfileArgsFromForumPostSubscription']


class PSNSyncLogArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    profile: Union[bool, 'PSNProfileArgsFromForumPostSubscription']
    game: Union[bool, 'PSNGameArgsFromForumPostSubscription']


class PSNGameTrophiesArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    league: Union[bool, 'LeagueArgsFromForumPostSubscription']
    division: Union[bool, 'DivisionArgsFromForumPostSubscription']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromForumPostSubscription']
    nhlAffiliate: Union[bool, 'TeamArgsFromForumPostSubscription']
    ahlAffiliate: Union[bool, 'TeamArgsFromForumPostSubscription']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromForumPostSubscription']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromForumPostSubscription']


class TeamArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    team: Union[bool, 'TeamArgsFromForumPostSubscription']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumPostSubscription']
    matches: Union[bool, 'FindManyMatchArgsFromForumPostSubscription']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumPostSubscription']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumPostSubscription']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumPostSubscription']
    bids: Union[bool, 'FindManyBidArgsFromForumPostSubscription']
    managers: Union[bool, 'FindManyTeamManagerArgsFromForumPostSubscription']


class TeamSeasonArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumPostSubscription']


class TeamManagerArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    contract: Union[bool, 'ContractArgsFromForumPostSubscription']
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumPostSubscription']


class BidArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumPostSubscription']
    bids: Union[bool, 'FindManyBidArgsFromForumPostSubscription']


class ContractArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    notifications: Union[bool, 'FindManyNotificationArgsFromForumPostSubscription']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromForumPostSubscription']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromForumPostSubscription']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromForumPostSubscription']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromForumPostSubscription']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromForumPostSubscription']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromForumPostSubscription']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromForumPostSubscription']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromForumPostSubscription']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromForumPostSubscription']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromForumPostSubscription']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromForumPostSubscription']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromForumPostSubscription']
    psnProfile: Union[bool, 'PSNProfileArgsFromForumPostSubscription']


class UserArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']


class EaIdHistoryArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']


class SystemHistoryArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']


class GamertagHistoryArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromForumPostSubscription(TypedDict, total=False):
    """Relational arguments for ForumPostSubscription"""
    user: Union[bool, 'UserArgsFromForumPostSubscription']


class NotificationArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromForumPostSubscription(TypedDict, total=False):
    """Arguments for ForumPostSubscription"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyForumPostSubscriptionArgs = FindManyForumPostSubscriptionArgsFromForumPostSubscription
FindFirstForumPostSubscriptionArgs = FindManyForumPostSubscriptionArgsFromForumPostSubscription


class ForumPostSubscriptionWhereInput(TypedDict, total=False):
    """ForumPostSubscription arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    user: 'UserRelationFilter'
    userId: Union[_str, 'types.StringFilter']
    post: 'ForumPostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['ForumPostSubscriptionWhereInput', List['ForumPostSubscriptionWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ForumPostSubscriptionWhereInput']
    OR: List['ForumPostSubscriptionWhereInput']
    NOT: List['ForumPostSubscriptionWhereInput']



# aggregate ForumPostSubscription types


class ForumPostSubscriptionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ForumPostSubscription arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ForumPostSubscriptionScalarWhereWithAggregatesInput']
    OR: List['ForumPostSubscriptionScalarWhereWithAggregatesInput']
    NOT: List['ForumPostSubscriptionScalarWhereWithAggregatesInput']



class ForumPostSubscriptionGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    postId: _str
    createdAt: datetime.datetime
    _sum: 'ForumPostSubscriptionSumAggregateOutput'
    _avg: 'ForumPostSubscriptionAvgAggregateOutput'
    _min: 'ForumPostSubscriptionMinAggregateOutput'
    _max: 'ForumPostSubscriptionMaxAggregateOutput'
    _count: 'ForumPostSubscriptionCountAggregateOutput'


class ForumPostSubscriptionAvgAggregateOutput(TypedDict, total=False):
    """ForumPostSubscription output for aggregating averages"""


class ForumPostSubscriptionSumAggregateOutput(TypedDict, total=False):
    """ForumPostSubscription output for aggregating sums"""


class ForumPostSubscriptionScalarAggregateOutput(TypedDict, total=False):
    """ForumPostSubscription output including scalar fields"""
    id: _str
    userId: _str
    postId: _str
    createdAt: datetime.datetime


ForumPostSubscriptionMinAggregateOutput = ForumPostSubscriptionScalarAggregateOutput
ForumPostSubscriptionMaxAggregateOutput = ForumPostSubscriptionScalarAggregateOutput


class ForumPostSubscriptionMaxAggregateInput(TypedDict, total=False):
    """ForumPostSubscription input for aggregating by max"""
    id: bool
    userId: bool
    postId: bool
    createdAt: bool


class ForumPostSubscriptionMinAggregateInput(TypedDict, total=False):
    """ForumPostSubscription input for aggregating by min"""
    id: bool
    userId: bool
    postId: bool
    createdAt: bool


class ForumPostSubscriptionNumberAggregateInput(TypedDict, total=False):
    """ForumPostSubscription input for aggregating numbers"""


ForumPostSubscriptionAvgAggregateInput = ForumPostSubscriptionNumberAggregateInput
ForumPostSubscriptionSumAggregateInput = ForumPostSubscriptionNumberAggregateInput


ForumPostSubscriptionCountAggregateInput = TypedDict(
    'ForumPostSubscriptionCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'postId': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

ForumPostSubscriptionCountAggregateOutput = TypedDict(
    'ForumPostSubscriptionCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'postId': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


ForumPostSubscriptionKeys = Literal[
    'id',
    'user',
    'userId',
    'post',
    'postId',
    'createdAt',
]
ForumPostSubscriptionScalarFieldKeys = Literal[
    'id',
    'userId',
    'postId',
    'createdAt',
]
ForumPostSubscriptionScalarFieldKeysT = TypeVar('ForumPostSubscriptionScalarFieldKeysT', bound=ForumPostSubscriptionScalarFieldKeys)

ForumPostSubscriptionRelationalFieldKeys = Literal[
        'user',
        'post',
    ]

# ForumComment types

class ForumCommentOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ForumComment create method"""
    id: _str
    status: 'enums.ForumPostStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    author: 'UserCreateNestedWithoutRelationsInput'
    authorId: _str
    post: 'ForumPostCreateNestedWithoutRelationsInput'
    postId: _str
    quotedComment: 'ForumCommentCreateNestedWithoutRelationsInput'
    quotedCommentId: Optional[_str]
    quotedBy: 'ForumCommentCreateManyNestedWithoutRelationsInput'
    reactions: 'ForumReactionCreateManyNestedWithoutRelationsInput'
    gif: Optional['fields.Json']


class ForumCommentCreateInput(ForumCommentOptionalCreateInput):
    """Required arguments to the ForumComment create method"""
    content: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ForumCommentOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ForumComment create method, without relations"""
    id: _str
    status: 'enums.ForumPostStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    authorId: _str
    postId: _str
    quotedCommentId: Optional[_str]
    gif: Optional['fields.Json']


class ForumCommentCreateWithoutRelationsInput(ForumCommentOptionalCreateWithoutRelationsInput):
    """Required arguments to the ForumComment create method, without relations"""
    content: _str

class ForumCommentConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ForumCommentCreateWithoutRelationsInput'
    where: 'ForumCommentWhereUniqueInput'

class ForumCommentCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ForumCommentCreateWithoutRelationsInput'
    connect: 'ForumCommentWhereUniqueInput'
    connect_or_create: 'ForumCommentConnectOrCreateWithoutRelationsInput'


class ForumCommentCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ForumCommentCreateWithoutRelationsInput', List['ForumCommentCreateWithoutRelationsInput']]
    connect: Union['ForumCommentWhereUniqueInput', List['ForumCommentWhereUniqueInput']]
    connect_or_create: Union['ForumCommentConnectOrCreateWithoutRelationsInput', List['ForumCommentConnectOrCreateWithoutRelationsInput']]

_ForumCommentWhereUnique_id_Input = TypedDict(
    '_ForumCommentWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ForumCommentWhereUniqueInput = _ForumCommentWhereUnique_id_Input


class ForumCommentUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    content: _str
    status: 'enums.ForumPostStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    author: 'UserUpdateOneWithoutRelationsInput'
    post: 'ForumPostUpdateOneWithoutRelationsInput'
    quotedComment: 'ForumCommentUpdateOneWithoutRelationsInput'
    quotedBy: 'ForumCommentUpdateManyWithoutRelationsInput'
    reactions: 'ForumReactionUpdateManyWithoutRelationsInput'
    gif: Optional['fields.Json']


class ForumCommentUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    content: _str
    status: 'enums.ForumPostStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    gif: Optional['fields.Json']


class ForumCommentUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ForumCommentCreateWithoutRelationsInput']
    connect: List['ForumCommentWhereUniqueInput']
    connect_or_create: List['ForumCommentConnectOrCreateWithoutRelationsInput']
    set: List['ForumCommentWhereUniqueInput']
    disconnect: List['ForumCommentWhereUniqueInput']
    delete: List['ForumCommentWhereUniqueInput']

    # TODO
    # update: List['ForumCommentUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ForumCommentUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ForumCommentScalarWhereInput']
    # upsert: List['ForumCommentUpserteWithWhereUniqueWithoutRelationsInput']


class ForumCommentUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ForumCommentCreateWithoutRelationsInput'
    connect: 'ForumCommentWhereUniqueInput'
    connect_or_create: 'ForumCommentConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ForumCommentUpdateInput'
    # upsert: 'ForumCommentUpsertWithoutRelationsInput'


class ForumCommentUpsertInput(TypedDict):
    create: 'ForumCommentCreateInput'
    update: 'ForumCommentUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ForumComment_id_OrderByInput = TypedDict(
    '_ForumComment_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ForumComment_content_OrderByInput = TypedDict(
    '_ForumComment_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_ForumComment_status_OrderByInput = TypedDict(
    '_ForumComment_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_ForumComment_createdAt_OrderByInput = TypedDict(
    '_ForumComment_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_ForumComment_updatedAt_OrderByInput = TypedDict(
    '_ForumComment_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_ForumComment_authorId_OrderByInput = TypedDict(
    '_ForumComment_authorId_OrderByInput',
    {
        'authorId': 'SortOrder',
    },
    total=True
)

_ForumComment_postId_OrderByInput = TypedDict(
    '_ForumComment_postId_OrderByInput',
    {
        'postId': 'SortOrder',
    },
    total=True
)

_ForumComment_quotedCommentId_OrderByInput = TypedDict(
    '_ForumComment_quotedCommentId_OrderByInput',
    {
        'quotedCommentId': 'SortOrder',
    },
    total=True
)

_ForumComment_gif_OrderByInput = TypedDict(
    '_ForumComment_gif_OrderByInput',
    {
        'gif': 'SortOrder',
    },
    total=True
)

_ForumComment_RelevanceInner = TypedDict(
    '_ForumComment_RelevanceInner',
    {
        'fields': 'List[ForumCommentScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ForumComment_RelevanceOrderByInput = TypedDict(
    '_ForumComment_RelevanceOrderByInput',
    {
        '_relevance': '_ForumComment_RelevanceInner',
    },
    total=True
)

ForumCommentOrderByInput = Union[
    '_ForumComment_id_OrderByInput',
    '_ForumComment_content_OrderByInput',
    '_ForumComment_status_OrderByInput',
    '_ForumComment_createdAt_OrderByInput',
    '_ForumComment_updatedAt_OrderByInput',
    '_ForumComment_authorId_OrderByInput',
    '_ForumComment_postId_OrderByInput',
    '_ForumComment_quotedCommentId_OrderByInput',
    '_ForumComment_gif_OrderByInput',
    '_ForumComment_RelevanceOrderByInput',
]



# recursive ForumComment types
# TODO: cleanup these types



ForumCommentRelationFilter = TypedDict(
    'ForumCommentRelationFilter',
    {
        'is': 'ForumCommentWhereInput',
        'is_not': 'ForumCommentWhereInput',
    },
    total=False,
)


class ForumCommentListRelationFilter(TypedDict, total=False):
    some: 'ForumCommentWhereInput'
    none: 'ForumCommentWhereInput'
    every: 'ForumCommentWhereInput'


class ForumCommentInclude(TypedDict, total=False):
    """ForumComment relational arguments"""
    author: Union[bool, 'UserArgsFromForumComment']
    post: Union[bool, 'ForumPostArgsFromForumComment']
    quotedComment: Union[bool, 'ForumCommentArgsFromForumComment']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromForumComment']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumComment']


class ForumPostIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    author: Union[bool, 'UserArgsFromForumComment']
    comments: Union[bool, 'FindManyForumCommentArgsFromForumComment']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumComment']
    followers: Union[bool, 'FindManyForumFollowerArgsFromForumComment']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromForumComment']


class ForumPostArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']
    post: Union[bool, 'ForumPostArgsFromForumComment']
    comment: Union[bool, 'ForumCommentArgsFromForumComment']


class ForumReactionArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']
    post: Union[bool, 'ForumPostArgsFromForumComment']


class ForumFollowerArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']
    post: Union[bool, 'ForumPostArgsFromForumComment']


class ForumPostSubscriptionArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    author: Union[bool, 'UserArgsFromForumComment']
    post: Union[bool, 'ForumPostArgsFromForumComment']
    quotedComment: Union[bool, 'ForumCommentArgsFromForumComment']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromForumComment']
    reactions: Union[bool, 'FindManyForumReactionArgsFromForumComment']


class ForumCommentArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    parentLeague: Union[bool, 'LeagueArgsFromForumComment']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromForumComment']
    conferences: Union[bool, 'FindManyConferenceArgsFromForumComment']
    divisions: Union[bool, 'FindManyDivisionArgsFromForumComment']
    teams: Union[bool, 'FindManyTeamArgsFromForumComment']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromForumComment']


class LeagueArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    league: Union[bool, 'LeagueArgsFromForumComment']
    season: Union[bool, 'SeasonArgsFromForumComment']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromForumComment']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromForumComment']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromForumComment']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromForumComment']


class LeagueSeasonArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    league: Union[bool, 'LeagueArgsFromForumComment']
    divisions: Union[bool, 'FindManyDivisionArgsFromForumComment']


class ConferenceArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    conference: Union[bool, 'ConferenceArgsFromForumComment']
    league: Union[bool, 'LeagueArgsFromForumComment']
    teams: Union[bool, 'FindManyTeamArgsFromForumComment']


class DivisionArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromForumComment']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromForumComment']


class SeasonArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumComment']


class LeagueCommissionerArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumComment']


class LeagueBOGArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumComment']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromForumComment']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromForumComment']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromForumComment']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromForumComment']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromForumComment']


class MatchArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromForumComment']
    match: Union[bool, 'MatchArgsFromForumComment']


class ClubMatchStatsArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    customKit: Union[bool, 'CustomKitArgsFromForumComment']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromForumComment']


class ClubMatchStatsDetailsArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromForumComment']


class CustomKitArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    match: Union[bool, 'MatchArgsFromForumComment']


class ClubAggregateMatchStatsArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    match: Union[bool, 'MatchArgsFromForumComment']


class MatchAnalyticsArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    match: Union[bool, 'MatchArgsFromForumComment']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromForumComment']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumComment']


class PlayerMatchArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']
    season: Union[bool, 'SeasonArgsFromForumComment']
    contract: Union[bool, 'ContractArgsFromForumComment']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumComment']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromForumComment']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromForumComment']
    matches: Union[bool, 'FindManyMatchArgsFromForumComment']


class PlayerSeasonArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumComment']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromForumComment']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromForumComment']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromForumComment']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromForumComment']


class PlayerTeamSeasonArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumComment']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumComment']


class PlayerLeagueHistoryArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromForumComment']
    trophySummary: Union[bool, 'PSNTrophyArgsFromForumComment']
    games: Union[bool, 'FindManyPSNGameArgsFromForumComment']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromForumComment']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromForumComment']


class PSNProfileArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    profile: Union[bool, 'PSNProfileArgsFromForumComment']


class PSNAvatarArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    profile: Union[bool, 'PSNProfileArgsFromForumComment']


class PSNTrophyArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    profile: Union[bool, 'PSNProfileArgsFromForumComment']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromForumComment']


class PSNGameArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    profile: Union[bool, 'PSNProfileArgsFromForumComment']


class PSNSyncLogArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    profile: Union[bool, 'PSNProfileArgsFromForumComment']
    game: Union[bool, 'PSNGameArgsFromForumComment']


class PSNGameTrophiesArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    league: Union[bool, 'LeagueArgsFromForumComment']
    division: Union[bool, 'DivisionArgsFromForumComment']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromForumComment']
    nhlAffiliate: Union[bool, 'TeamArgsFromForumComment']
    ahlAffiliate: Union[bool, 'TeamArgsFromForumComment']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromForumComment']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromForumComment']


class TeamArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    team: Union[bool, 'TeamArgsFromForumComment']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromForumComment']
    matches: Union[bool, 'FindManyMatchArgsFromForumComment']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumComment']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumComment']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromForumComment']
    bids: Union[bool, 'FindManyBidArgsFromForumComment']
    managers: Union[bool, 'FindManyTeamManagerArgsFromForumComment']


class TeamSeasonArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumComment']


class TeamManagerArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    contract: Union[bool, 'ContractArgsFromForumComment']
    teamSeason: Union[bool, 'TeamSeasonArgsFromForumComment']


class BidArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromForumComment']
    bids: Union[bool, 'FindManyBidArgsFromForumComment']


class ContractArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    notifications: Union[bool, 'FindManyNotificationArgsFromForumComment']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromForumComment']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromForumComment']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromForumComment']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromForumComment']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromForumComment']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromForumComment']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromForumComment']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromForumComment']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromForumComment']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromForumComment']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromForumComment']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromForumComment']
    psnProfile: Union[bool, 'PSNProfileArgsFromForumComment']


class UserArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']


class EaIdHistoryArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']


class SystemHistoryArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']


class GamertagHistoryArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromForumComment(TypedDict, total=False):
    """Relational arguments for ForumComment"""
    user: Union[bool, 'UserArgsFromForumComment']


class NotificationArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromForumComment(TypedDict, total=False):
    """Arguments for ForumComment"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyForumCommentArgs = FindManyForumCommentArgsFromForumComment
FindFirstForumCommentArgs = FindManyForumCommentArgsFromForumComment


class ForumCommentWhereInput(TypedDict, total=False):
    """ForumComment arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    status: 'enums.ForumPostStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    author: 'UserRelationFilter'
    authorId: Union[_str, 'types.StringFilter']
    post: 'ForumPostRelationFilter'
    postId: Union[_str, 'types.StringFilter']
    quotedComment: 'ForumCommentRelationFilter'
    quotedCommentId: Union[None, _str, 'types.StringFilter']
    quotedBy: 'ForumCommentListRelationFilter'
    reactions: 'ForumReactionListRelationFilter'
    gif: Union[None, 'fields.Json', 'types.JsonFilter']

    # should be noted that AND and NOT should be Union['ForumCommentWhereInput', List['ForumCommentWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ForumCommentWhereInput']
    OR: List['ForumCommentWhereInput']
    NOT: List['ForumCommentWhereInput']



# aggregate ForumComment types


class ForumCommentScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ForumComment arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.ForumPostStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    authorId: Union[_str, 'types.StringWithAggregatesFilter']
    postId: Union[_str, 'types.StringWithAggregatesFilter']
    quotedCommentId: Union[_str, 'types.StringWithAggregatesFilter']
    gif: Union['fields.Json', 'types.JsonWithAggregatesFilter']

    AND: List['ForumCommentScalarWhereWithAggregatesInput']
    OR: List['ForumCommentScalarWhereWithAggregatesInput']
    NOT: List['ForumCommentScalarWhereWithAggregatesInput']



class ForumCommentGroupByOutput(TypedDict, total=False):
    id: _str
    content: _str
    status: 'enums.ForumPostStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    authorId: _str
    postId: _str
    quotedCommentId: _str
    gif: 'fields.Json'
    _sum: 'ForumCommentSumAggregateOutput'
    _avg: 'ForumCommentAvgAggregateOutput'
    _min: 'ForumCommentMinAggregateOutput'
    _max: 'ForumCommentMaxAggregateOutput'
    _count: 'ForumCommentCountAggregateOutput'


class ForumCommentAvgAggregateOutput(TypedDict, total=False):
    """ForumComment output for aggregating averages"""


class ForumCommentSumAggregateOutput(TypedDict, total=False):
    """ForumComment output for aggregating sums"""


class ForumCommentScalarAggregateOutput(TypedDict, total=False):
    """ForumComment output including scalar fields"""
    id: _str
    content: _str
    status: 'enums.ForumPostStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    authorId: _str
    postId: _str
    quotedCommentId: _str
    gif: 'fields.Json'


ForumCommentMinAggregateOutput = ForumCommentScalarAggregateOutput
ForumCommentMaxAggregateOutput = ForumCommentScalarAggregateOutput


class ForumCommentMaxAggregateInput(TypedDict, total=False):
    """ForumComment input for aggregating by max"""
    id: bool
    content: bool
    status: bool
    createdAt: bool
    updatedAt: bool
    authorId: bool
    postId: bool
    quotedCommentId: bool
    gif: bool


class ForumCommentMinAggregateInput(TypedDict, total=False):
    """ForumComment input for aggregating by min"""
    id: bool
    content: bool
    status: bool
    createdAt: bool
    updatedAt: bool
    authorId: bool
    postId: bool
    quotedCommentId: bool
    gif: bool


class ForumCommentNumberAggregateInput(TypedDict, total=False):
    """ForumComment input for aggregating numbers"""


ForumCommentAvgAggregateInput = ForumCommentNumberAggregateInput
ForumCommentSumAggregateInput = ForumCommentNumberAggregateInput


ForumCommentCountAggregateInput = TypedDict(
    'ForumCommentCountAggregateInput',
    {
        'id': bool,
        'content': bool,
        'status': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'authorId': bool,
        'postId': bool,
        'quotedCommentId': bool,
        'gif': bool,
        '_all': bool,
    },
    total=False,
)

ForumCommentCountAggregateOutput = TypedDict(
    'ForumCommentCountAggregateOutput',
    {
        'id': int,
        'content': int,
        'status': int,
        'createdAt': int,
        'updatedAt': int,
        'authorId': int,
        'postId': int,
        'quotedCommentId': int,
        'gif': int,
        '_all': int,
    },
    total=False,
)


ForumCommentKeys = Literal[
    'id',
    'content',
    'status',
    'createdAt',
    'updatedAt',
    'author',
    'authorId',
    'post',
    'postId',
    'quotedComment',
    'quotedCommentId',
    'quotedBy',
    'reactions',
    'gif',
]
ForumCommentScalarFieldKeys = Literal[
    'id',
    'content',
    'status',
    'createdAt',
    'updatedAt',
    'authorId',
    'postId',
    'quotedCommentId',
    'gif',
]
ForumCommentScalarFieldKeysT = TypeVar('ForumCommentScalarFieldKeysT', bound=ForumCommentScalarFieldKeys)

ForumCommentRelationalFieldKeys = Literal[
        'author',
        'post',
        'quotedComment',
        'quotedBy',
        'reactions',
    ]

# League types

class LeagueOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the League create method"""
    id: _str
    isSubLeague: _bool
    parentLeagueId: Optional[_str]
    parentLeague: 'LeagueCreateNestedWithoutRelationsInput'
    subLeagues: 'LeagueCreateManyNestedWithoutRelationsInput'
    conferences: 'ConferenceCreateManyNestedWithoutRelationsInput'
    divisions: 'DivisionCreateManyNestedWithoutRelationsInput'
    teams: 'TeamCreateManyNestedWithoutRelationsInput'
    seasons: 'LeagueSeasonCreateManyNestedWithoutRelationsInput'


class LeagueCreateInput(LeagueOptionalCreateInput):
    """Required arguments to the League create method"""
    name: _str
    shortName: _str
    leagueType: 'enums.LeagueType'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LeagueOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the League create method, without relations"""
    id: _str
    isSubLeague: _bool
    parentLeagueId: Optional[_str]


class LeagueCreateWithoutRelationsInput(LeagueOptionalCreateWithoutRelationsInput):
    """Required arguments to the League create method, without relations"""
    name: _str
    shortName: _str
    leagueType: 'enums.LeagueType'

class LeagueConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'LeagueCreateWithoutRelationsInput'
    where: 'LeagueWhereUniqueInput'

class LeagueCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LeagueCreateWithoutRelationsInput'
    connect: 'LeagueWhereUniqueInput'
    connect_or_create: 'LeagueConnectOrCreateWithoutRelationsInput'


class LeagueCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LeagueCreateWithoutRelationsInput', List['LeagueCreateWithoutRelationsInput']]
    connect: Union['LeagueWhereUniqueInput', List['LeagueWhereUniqueInput']]
    connect_or_create: Union['LeagueConnectOrCreateWithoutRelationsInput', List['LeagueConnectOrCreateWithoutRelationsInput']]

_LeagueWhereUnique_id_Input = TypedDict(
    '_LeagueWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_LeagueWhereUnique_shortName_Input = TypedDict(
    '_LeagueWhereUnique_shortName_Input',
    {
        'shortName': '_str',
    },
    total=True
)

_LeagueCompoundshortNameKeyInner = TypedDict(
    '_LeagueCompoundshortNameKeyInner',
    {
        'shortName': '_str',
    },
    total=True
)

_LeagueCompoundshortNameKey = TypedDict(
    '_LeagueCompoundshortNameKey',
    {
        'shortName': '_LeagueCompoundshortNameKeyInner',
    },
    total=True
)

LeagueWhereUniqueInput = Union[
    '_LeagueWhereUnique_id_Input',
    '_LeagueWhereUnique_shortName_Input',
    '_LeagueCompoundshortNameKey',
]


class LeagueUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    shortName: _str
    leagueType: 'enums.LeagueType'
    isSubLeague: _bool
    parentLeague: 'LeagueUpdateOneWithoutRelationsInput'
    subLeagues: 'LeagueUpdateManyWithoutRelationsInput'
    conferences: 'ConferenceUpdateManyWithoutRelationsInput'
    divisions: 'DivisionUpdateManyWithoutRelationsInput'
    teams: 'TeamUpdateManyWithoutRelationsInput'
    seasons: 'LeagueSeasonUpdateManyWithoutRelationsInput'


class LeagueUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    shortName: _str
    leagueType: 'enums.LeagueType'
    isSubLeague: _bool


class LeagueUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LeagueCreateWithoutRelationsInput']
    connect: List['LeagueWhereUniqueInput']
    connect_or_create: List['LeagueConnectOrCreateWithoutRelationsInput']
    set: List['LeagueWhereUniqueInput']
    disconnect: List['LeagueWhereUniqueInput']
    delete: List['LeagueWhereUniqueInput']

    # TODO
    # update: List['LeagueUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LeagueUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LeagueScalarWhereInput']
    # upsert: List['LeagueUpserteWithWhereUniqueWithoutRelationsInput']


class LeagueUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LeagueCreateWithoutRelationsInput'
    connect: 'LeagueWhereUniqueInput'
    connect_or_create: 'LeagueConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LeagueUpdateInput'
    # upsert: 'LeagueUpsertWithoutRelationsInput'


class LeagueUpsertInput(TypedDict):
    create: 'LeagueCreateInput'
    update: 'LeagueUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_League_id_OrderByInput = TypedDict(
    '_League_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_League_name_OrderByInput = TypedDict(
    '_League_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_League_shortName_OrderByInput = TypedDict(
    '_League_shortName_OrderByInput',
    {
        'shortName': 'SortOrder',
    },
    total=True
)

_League_leagueType_OrderByInput = TypedDict(
    '_League_leagueType_OrderByInput',
    {
        'leagueType': 'SortOrder',
    },
    total=True
)

_League_isSubLeague_OrderByInput = TypedDict(
    '_League_isSubLeague_OrderByInput',
    {
        'isSubLeague': 'SortOrder',
    },
    total=True
)

_League_parentLeagueId_OrderByInput = TypedDict(
    '_League_parentLeagueId_OrderByInput',
    {
        'parentLeagueId': 'SortOrder',
    },
    total=True
)

_League_RelevanceInner = TypedDict(
    '_League_RelevanceInner',
    {
        'fields': 'List[LeagueScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_League_RelevanceOrderByInput = TypedDict(
    '_League_RelevanceOrderByInput',
    {
        '_relevance': '_League_RelevanceInner',
    },
    total=True
)

LeagueOrderByInput = Union[
    '_League_id_OrderByInput',
    '_League_name_OrderByInput',
    '_League_shortName_OrderByInput',
    '_League_leagueType_OrderByInput',
    '_League_isSubLeague_OrderByInput',
    '_League_parentLeagueId_OrderByInput',
    '_League_RelevanceOrderByInput',
]



# recursive League types
# TODO: cleanup these types



LeagueRelationFilter = TypedDict(
    'LeagueRelationFilter',
    {
        'is': 'LeagueWhereInput',
        'is_not': 'LeagueWhereInput',
    },
    total=False,
)


class LeagueListRelationFilter(TypedDict, total=False):
    some: 'LeagueWhereInput'
    none: 'LeagueWhereInput'
    every: 'LeagueWhereInput'


class LeagueInclude(TypedDict, total=False):
    """League relational arguments"""
    parentLeague: Union[bool, 'LeagueArgsFromLeague']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromLeague']
    conferences: Union[bool, 'FindManyConferenceArgsFromLeague']
    divisions: Union[bool, 'FindManyDivisionArgsFromLeague']
    teams: Union[bool, 'FindManyTeamArgsFromLeague']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromLeague']


class ForumPostIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    author: Union[bool, 'UserArgsFromLeague']
    comments: Union[bool, 'FindManyForumCommentArgsFromLeague']
    reactions: Union[bool, 'FindManyForumReactionArgsFromLeague']
    followers: Union[bool, 'FindManyForumFollowerArgsFromLeague']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromLeague']


class ForumPostArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']
    post: Union[bool, 'ForumPostArgsFromLeague']
    comment: Union[bool, 'ForumCommentArgsFromLeague']


class ForumReactionArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']
    post: Union[bool, 'ForumPostArgsFromLeague']


class ForumFollowerArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']
    post: Union[bool, 'ForumPostArgsFromLeague']


class ForumPostSubscriptionArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    author: Union[bool, 'UserArgsFromLeague']
    post: Union[bool, 'ForumPostArgsFromLeague']
    quotedComment: Union[bool, 'ForumCommentArgsFromLeague']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromLeague']
    reactions: Union[bool, 'FindManyForumReactionArgsFromLeague']


class ForumCommentArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    parentLeague: Union[bool, 'LeagueArgsFromLeague']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromLeague']
    conferences: Union[bool, 'FindManyConferenceArgsFromLeague']
    divisions: Union[bool, 'FindManyDivisionArgsFromLeague']
    teams: Union[bool, 'FindManyTeamArgsFromLeague']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromLeague']


class LeagueArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    league: Union[bool, 'LeagueArgsFromLeague']
    season: Union[bool, 'SeasonArgsFromLeague']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromLeague']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromLeague']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromLeague']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromLeague']


class LeagueSeasonArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    league: Union[bool, 'LeagueArgsFromLeague']
    divisions: Union[bool, 'FindManyDivisionArgsFromLeague']


class ConferenceArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    conference: Union[bool, 'ConferenceArgsFromLeague']
    league: Union[bool, 'LeagueArgsFromLeague']
    teams: Union[bool, 'FindManyTeamArgsFromLeague']


class DivisionArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromLeague']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromLeague']


class SeasonArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeague']


class LeagueCommissionerArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeague']


class LeagueBOGArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeague']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromLeague']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromLeague']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromLeague']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromLeague']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromLeague']


class MatchArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromLeague']
    match: Union[bool, 'MatchArgsFromLeague']


class ClubMatchStatsArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    customKit: Union[bool, 'CustomKitArgsFromLeague']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromLeague']


class ClubMatchStatsDetailsArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromLeague']


class CustomKitArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    match: Union[bool, 'MatchArgsFromLeague']


class ClubAggregateMatchStatsArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    match: Union[bool, 'MatchArgsFromLeague']


class MatchAnalyticsArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    match: Union[bool, 'MatchArgsFromLeague']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromLeague']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeague']


class PlayerMatchArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']
    season: Union[bool, 'SeasonArgsFromLeague']
    contract: Union[bool, 'ContractArgsFromLeague']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeague']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromLeague']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromLeague']
    matches: Union[bool, 'FindManyMatchArgsFromLeague']


class PlayerSeasonArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeague']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromLeague']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromLeague']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromLeague']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromLeague']


class PlayerTeamSeasonArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeague']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeague']


class PlayerLeagueHistoryArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromLeague']
    trophySummary: Union[bool, 'PSNTrophyArgsFromLeague']
    games: Union[bool, 'FindManyPSNGameArgsFromLeague']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromLeague']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromLeague']


class PSNProfileArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    profile: Union[bool, 'PSNProfileArgsFromLeague']


class PSNAvatarArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    profile: Union[bool, 'PSNProfileArgsFromLeague']


class PSNTrophyArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    profile: Union[bool, 'PSNProfileArgsFromLeague']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromLeague']


class PSNGameArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    profile: Union[bool, 'PSNProfileArgsFromLeague']


class PSNSyncLogArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    profile: Union[bool, 'PSNProfileArgsFromLeague']
    game: Union[bool, 'PSNGameArgsFromLeague']


class PSNGameTrophiesArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    league: Union[bool, 'LeagueArgsFromLeague']
    division: Union[bool, 'DivisionArgsFromLeague']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromLeague']
    nhlAffiliate: Union[bool, 'TeamArgsFromLeague']
    ahlAffiliate: Union[bool, 'TeamArgsFromLeague']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromLeague']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromLeague']


class TeamArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    team: Union[bool, 'TeamArgsFromLeague']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeague']
    matches: Union[bool, 'FindManyMatchArgsFromLeague']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeague']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeague']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeague']
    bids: Union[bool, 'FindManyBidArgsFromLeague']
    managers: Union[bool, 'FindManyTeamManagerArgsFromLeague']


class TeamSeasonArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeague']


class TeamManagerArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    contract: Union[bool, 'ContractArgsFromLeague']
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeague']


class BidArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeague']
    bids: Union[bool, 'FindManyBidArgsFromLeague']


class ContractArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    notifications: Union[bool, 'FindManyNotificationArgsFromLeague']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromLeague']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromLeague']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromLeague']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromLeague']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromLeague']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromLeague']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromLeague']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromLeague']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromLeague']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromLeague']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromLeague']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromLeague']
    psnProfile: Union[bool, 'PSNProfileArgsFromLeague']


class UserArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']


class EaIdHistoryArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']


class SystemHistoryArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']


class GamertagHistoryArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromLeague(TypedDict, total=False):
    """Relational arguments for League"""
    user: Union[bool, 'UserArgsFromLeague']


class NotificationArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromLeague(TypedDict, total=False):
    """Arguments for League"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyLeagueArgs = FindManyLeagueArgsFromLeague
FindFirstLeagueArgs = FindManyLeagueArgsFromLeague


class LeagueWhereInput(TypedDict, total=False):
    """League arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    shortName: Union[_str, 'types.StringFilter']
    leagueType: 'enums.LeagueType'
    isSubLeague: Union[_bool, 'types.BooleanFilter']
    parentLeagueId: Union[None, _str, 'types.StringFilter']
    parentLeague: 'LeagueRelationFilter'
    subLeagues: 'LeagueListRelationFilter'
    conferences: 'ConferenceListRelationFilter'
    divisions: 'DivisionListRelationFilter'
    teams: 'TeamListRelationFilter'
    seasons: 'LeagueSeasonListRelationFilter'

    # should be noted that AND and NOT should be Union['LeagueWhereInput', List['LeagueWhereInput']]
    # but this causes mypy to hang :/
    AND: List['LeagueWhereInput']
    OR: List['LeagueWhereInput']
    NOT: List['LeagueWhereInput']



# aggregate League types


class LeagueScalarWhereWithAggregatesInput(TypedDict, total=False):
    """League arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    shortName: Union[_str, 'types.StringWithAggregatesFilter']
    leagueType: 'enums.LeagueType'
    isSubLeague: Union[_bool, 'types.BooleanWithAggregatesFilter']
    parentLeagueId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['LeagueScalarWhereWithAggregatesInput']
    OR: List['LeagueScalarWhereWithAggregatesInput']
    NOT: List['LeagueScalarWhereWithAggregatesInput']



class LeagueGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    shortName: _str
    leagueType: 'enums.LeagueType'
    isSubLeague: _bool
    parentLeagueId: _str
    _sum: 'LeagueSumAggregateOutput'
    _avg: 'LeagueAvgAggregateOutput'
    _min: 'LeagueMinAggregateOutput'
    _max: 'LeagueMaxAggregateOutput'
    _count: 'LeagueCountAggregateOutput'


class LeagueAvgAggregateOutput(TypedDict, total=False):
    """League output for aggregating averages"""


class LeagueSumAggregateOutput(TypedDict, total=False):
    """League output for aggregating sums"""


class LeagueScalarAggregateOutput(TypedDict, total=False):
    """League output including scalar fields"""
    id: _str
    name: _str
    shortName: _str
    leagueType: 'enums.LeagueType'
    isSubLeague: _bool
    parentLeagueId: _str


LeagueMinAggregateOutput = LeagueScalarAggregateOutput
LeagueMaxAggregateOutput = LeagueScalarAggregateOutput


class LeagueMaxAggregateInput(TypedDict, total=False):
    """League input for aggregating by max"""
    id: bool
    name: bool
    shortName: bool
    leagueType: bool
    isSubLeague: bool
    parentLeagueId: bool


class LeagueMinAggregateInput(TypedDict, total=False):
    """League input for aggregating by min"""
    id: bool
    name: bool
    shortName: bool
    leagueType: bool
    isSubLeague: bool
    parentLeagueId: bool


class LeagueNumberAggregateInput(TypedDict, total=False):
    """League input for aggregating numbers"""


LeagueAvgAggregateInput = LeagueNumberAggregateInput
LeagueSumAggregateInput = LeagueNumberAggregateInput


LeagueCountAggregateInput = TypedDict(
    'LeagueCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'shortName': bool,
        'leagueType': bool,
        'isSubLeague': bool,
        'parentLeagueId': bool,
        '_all': bool,
    },
    total=False,
)

LeagueCountAggregateOutput = TypedDict(
    'LeagueCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'shortName': int,
        'leagueType': int,
        'isSubLeague': int,
        'parentLeagueId': int,
        '_all': int,
    },
    total=False,
)


LeagueKeys = Literal[
    'id',
    'name',
    'shortName',
    'leagueType',
    'isSubLeague',
    'parentLeagueId',
    'parentLeague',
    'subLeagues',
    'conferences',
    'divisions',
    'teams',
    'seasons',
]
LeagueScalarFieldKeys = Literal[
    'id',
    'name',
    'shortName',
    'leagueType',
    'isSubLeague',
    'parentLeagueId',
]
LeagueScalarFieldKeysT = TypeVar('LeagueScalarFieldKeysT', bound=LeagueScalarFieldKeys)

LeagueRelationalFieldKeys = Literal[
        'parentLeague',
        'subLeagues',
        'conferences',
        'divisions',
        'teams',
        'seasons',
    ]

# LeagueSeason types

class LeagueSeasonOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the LeagueSeason create method"""
    id: _str
    leagueId: _str
    seasonId: _str
    salaryCap: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    league: 'LeagueCreateNestedWithoutRelationsInput'
    season: 'SeasonCreateNestedWithoutRelationsInput'
    commissioners: 'LeagueCommissionerCreateManyNestedWithoutRelationsInput'
    bogs: 'LeagueBOGCreateManyNestedWithoutRelationsInput'
    teams: 'TeamSeasonCreateManyNestedWithoutRelationsInput'
    playerHistory: 'PlayerLeagueHistoryCreateManyNestedWithoutRelationsInput'


class LeagueSeasonCreateInput(LeagueSeasonOptionalCreateInput):
    """Required arguments to the LeagueSeason create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LeagueSeasonOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the LeagueSeason create method, without relations"""
    id: _str
    leagueId: _str
    seasonId: _str
    salaryCap: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class LeagueSeasonCreateWithoutRelationsInput(LeagueSeasonOptionalCreateWithoutRelationsInput):
    """Required arguments to the LeagueSeason create method, without relations"""

class LeagueSeasonConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'LeagueSeasonCreateWithoutRelationsInput'
    where: 'LeagueSeasonWhereUniqueInput'

class LeagueSeasonCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LeagueSeasonCreateWithoutRelationsInput'
    connect: 'LeagueSeasonWhereUniqueInput'
    connect_or_create: 'LeagueSeasonConnectOrCreateWithoutRelationsInput'


class LeagueSeasonCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LeagueSeasonCreateWithoutRelationsInput', List['LeagueSeasonCreateWithoutRelationsInput']]
    connect: Union['LeagueSeasonWhereUniqueInput', List['LeagueSeasonWhereUniqueInput']]
    connect_or_create: Union['LeagueSeasonConnectOrCreateWithoutRelationsInput', List['LeagueSeasonConnectOrCreateWithoutRelationsInput']]

_LeagueSeasonWhereUnique_id_Input = TypedDict(
    '_LeagueSeasonWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_LeagueSeasonCompoundleagueId_seasonIdKeyInner = TypedDict(
    '_LeagueSeasonCompoundleagueId_seasonIdKeyInner',
    {
        'leagueId': '_str',
        'seasonId': '_str',
    },
    total=True
)

_LeagueSeasonCompoundleagueId_seasonIdKey = TypedDict(
    '_LeagueSeasonCompoundleagueId_seasonIdKey',
    {
        'leagueId_seasonId': '_LeagueSeasonCompoundleagueId_seasonIdKeyInner',
    },
    total=True
)

LeagueSeasonWhereUniqueInput = Union[
    '_LeagueSeasonWhereUnique_id_Input',
    '_LeagueSeasonCompoundleagueId_seasonIdKey',
]


class LeagueSeasonUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    salaryCap: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    league: 'LeagueUpdateOneWithoutRelationsInput'
    season: 'SeasonUpdateOneWithoutRelationsInput'
    commissioners: 'LeagueCommissionerUpdateManyWithoutRelationsInput'
    bogs: 'LeagueBOGUpdateManyWithoutRelationsInput'
    teams: 'TeamSeasonUpdateManyWithoutRelationsInput'
    playerHistory: 'PlayerLeagueHistoryUpdateManyWithoutRelationsInput'


class LeagueSeasonUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    salaryCap: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class LeagueSeasonUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LeagueSeasonCreateWithoutRelationsInput']
    connect: List['LeagueSeasonWhereUniqueInput']
    connect_or_create: List['LeagueSeasonConnectOrCreateWithoutRelationsInput']
    set: List['LeagueSeasonWhereUniqueInput']
    disconnect: List['LeagueSeasonWhereUniqueInput']
    delete: List['LeagueSeasonWhereUniqueInput']

    # TODO
    # update: List['LeagueSeasonUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LeagueSeasonUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LeagueSeasonScalarWhereInput']
    # upsert: List['LeagueSeasonUpserteWithWhereUniqueWithoutRelationsInput']


class LeagueSeasonUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LeagueSeasonCreateWithoutRelationsInput'
    connect: 'LeagueSeasonWhereUniqueInput'
    connect_or_create: 'LeagueSeasonConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LeagueSeasonUpdateInput'
    # upsert: 'LeagueSeasonUpsertWithoutRelationsInput'


class LeagueSeasonUpsertInput(TypedDict):
    create: 'LeagueSeasonCreateInput'
    update: 'LeagueSeasonUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_LeagueSeason_id_OrderByInput = TypedDict(
    '_LeagueSeason_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_LeagueSeason_leagueId_OrderByInput = TypedDict(
    '_LeagueSeason_leagueId_OrderByInput',
    {
        'leagueId': 'SortOrder',
    },
    total=True
)

_LeagueSeason_seasonId_OrderByInput = TypedDict(
    '_LeagueSeason_seasonId_OrderByInput',
    {
        'seasonId': 'SortOrder',
    },
    total=True
)

_LeagueSeason_salaryCap_OrderByInput = TypedDict(
    '_LeagueSeason_salaryCap_OrderByInput',
    {
        'salaryCap': 'SortOrder',
    },
    total=True
)

_LeagueSeason_createdAt_OrderByInput = TypedDict(
    '_LeagueSeason_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_LeagueSeason_updatedAt_OrderByInput = TypedDict(
    '_LeagueSeason_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_LeagueSeason_RelevanceInner = TypedDict(
    '_LeagueSeason_RelevanceInner',
    {
        'fields': 'List[LeagueSeasonScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_LeagueSeason_RelevanceOrderByInput = TypedDict(
    '_LeagueSeason_RelevanceOrderByInput',
    {
        '_relevance': '_LeagueSeason_RelevanceInner',
    },
    total=True
)

LeagueSeasonOrderByInput = Union[
    '_LeagueSeason_id_OrderByInput',
    '_LeagueSeason_leagueId_OrderByInput',
    '_LeagueSeason_seasonId_OrderByInput',
    '_LeagueSeason_salaryCap_OrderByInput',
    '_LeagueSeason_createdAt_OrderByInput',
    '_LeagueSeason_updatedAt_OrderByInput',
    '_LeagueSeason_RelevanceOrderByInput',
]



# recursive LeagueSeason types
# TODO: cleanup these types



LeagueSeasonRelationFilter = TypedDict(
    'LeagueSeasonRelationFilter',
    {
        'is': 'LeagueSeasonWhereInput',
        'is_not': 'LeagueSeasonWhereInput',
    },
    total=False,
)


class LeagueSeasonListRelationFilter(TypedDict, total=False):
    some: 'LeagueSeasonWhereInput'
    none: 'LeagueSeasonWhereInput'
    every: 'LeagueSeasonWhereInput'


class LeagueSeasonInclude(TypedDict, total=False):
    """LeagueSeason relational arguments"""
    league: Union[bool, 'LeagueArgsFromLeagueSeason']
    season: Union[bool, 'SeasonArgsFromLeagueSeason']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromLeagueSeason']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromLeagueSeason']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromLeagueSeason']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromLeagueSeason']


class ForumPostIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    author: Union[bool, 'UserArgsFromLeagueSeason']
    comments: Union[bool, 'FindManyForumCommentArgsFromLeagueSeason']
    reactions: Union[bool, 'FindManyForumReactionArgsFromLeagueSeason']
    followers: Union[bool, 'FindManyForumFollowerArgsFromLeagueSeason']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromLeagueSeason']


class ForumPostArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']
    post: Union[bool, 'ForumPostArgsFromLeagueSeason']
    comment: Union[bool, 'ForumCommentArgsFromLeagueSeason']


class ForumReactionArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']
    post: Union[bool, 'ForumPostArgsFromLeagueSeason']


class ForumFollowerArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']
    post: Union[bool, 'ForumPostArgsFromLeagueSeason']


class ForumPostSubscriptionArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    author: Union[bool, 'UserArgsFromLeagueSeason']
    post: Union[bool, 'ForumPostArgsFromLeagueSeason']
    quotedComment: Union[bool, 'ForumCommentArgsFromLeagueSeason']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromLeagueSeason']
    reactions: Union[bool, 'FindManyForumReactionArgsFromLeagueSeason']


class ForumCommentArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    parentLeague: Union[bool, 'LeagueArgsFromLeagueSeason']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromLeagueSeason']
    conferences: Union[bool, 'FindManyConferenceArgsFromLeagueSeason']
    divisions: Union[bool, 'FindManyDivisionArgsFromLeagueSeason']
    teams: Union[bool, 'FindManyTeamArgsFromLeagueSeason']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromLeagueSeason']


class LeagueArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    league: Union[bool, 'LeagueArgsFromLeagueSeason']
    season: Union[bool, 'SeasonArgsFromLeagueSeason']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromLeagueSeason']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromLeagueSeason']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromLeagueSeason']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromLeagueSeason']


class LeagueSeasonArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    league: Union[bool, 'LeagueArgsFromLeagueSeason']
    divisions: Union[bool, 'FindManyDivisionArgsFromLeagueSeason']


class ConferenceArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    conference: Union[bool, 'ConferenceArgsFromLeagueSeason']
    league: Union[bool, 'LeagueArgsFromLeagueSeason']
    teams: Union[bool, 'FindManyTeamArgsFromLeagueSeason']


class DivisionArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromLeagueSeason']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromLeagueSeason']


class SeasonArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueSeason']


class LeagueCommissionerArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueSeason']


class LeagueBOGArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeagueSeason']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromLeagueSeason']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromLeagueSeason']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromLeagueSeason']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromLeagueSeason']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromLeagueSeason']


class MatchArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromLeagueSeason']
    match: Union[bool, 'MatchArgsFromLeagueSeason']


class ClubMatchStatsArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    customKit: Union[bool, 'CustomKitArgsFromLeagueSeason']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromLeagueSeason']


class ClubMatchStatsDetailsArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromLeagueSeason']


class CustomKitArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    match: Union[bool, 'MatchArgsFromLeagueSeason']


class ClubAggregateMatchStatsArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    match: Union[bool, 'MatchArgsFromLeagueSeason']


class MatchAnalyticsArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    match: Union[bool, 'MatchArgsFromLeagueSeason']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromLeagueSeason']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueSeason']


class PlayerMatchArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']
    season: Union[bool, 'SeasonArgsFromLeagueSeason']
    contract: Union[bool, 'ContractArgsFromLeagueSeason']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueSeason']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromLeagueSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromLeagueSeason']
    matches: Union[bool, 'FindManyMatchArgsFromLeagueSeason']


class PlayerSeasonArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueSeason']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromLeagueSeason']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromLeagueSeason']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromLeagueSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromLeagueSeason']


class PlayerTeamSeasonArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueSeason']


class PlayerLeagueHistoryArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromLeagueSeason']
    trophySummary: Union[bool, 'PSNTrophyArgsFromLeagueSeason']
    games: Union[bool, 'FindManyPSNGameArgsFromLeagueSeason']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromLeagueSeason']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromLeagueSeason']


class PSNProfileArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueSeason']


class PSNAvatarArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueSeason']


class PSNTrophyArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueSeason']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromLeagueSeason']


class PSNGameArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueSeason']


class PSNSyncLogArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueSeason']
    game: Union[bool, 'PSNGameArgsFromLeagueSeason']


class PSNGameTrophiesArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    league: Union[bool, 'LeagueArgsFromLeagueSeason']
    division: Union[bool, 'DivisionArgsFromLeagueSeason']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromLeagueSeason']
    nhlAffiliate: Union[bool, 'TeamArgsFromLeagueSeason']
    ahlAffiliate: Union[bool, 'TeamArgsFromLeagueSeason']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromLeagueSeason']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromLeagueSeason']


class TeamArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    team: Union[bool, 'TeamArgsFromLeagueSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueSeason']
    matches: Union[bool, 'FindManyMatchArgsFromLeagueSeason']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueSeason']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueSeason']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueSeason']
    bids: Union[bool, 'FindManyBidArgsFromLeagueSeason']
    managers: Union[bool, 'FindManyTeamManagerArgsFromLeagueSeason']


class TeamSeasonArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeagueSeason']


class TeamManagerArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    contract: Union[bool, 'ContractArgsFromLeagueSeason']
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeagueSeason']


class BidArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueSeason']
    bids: Union[bool, 'FindManyBidArgsFromLeagueSeason']


class ContractArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    notifications: Union[bool, 'FindManyNotificationArgsFromLeagueSeason']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromLeagueSeason']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromLeagueSeason']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromLeagueSeason']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromLeagueSeason']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromLeagueSeason']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromLeagueSeason']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromLeagueSeason']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromLeagueSeason']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromLeagueSeason']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromLeagueSeason']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromLeagueSeason']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromLeagueSeason']
    psnProfile: Union[bool, 'PSNProfileArgsFromLeagueSeason']


class UserArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']


class EaIdHistoryArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']


class SystemHistoryArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']


class GamertagHistoryArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromLeagueSeason(TypedDict, total=False):
    """Relational arguments for LeagueSeason"""
    user: Union[bool, 'UserArgsFromLeagueSeason']


class NotificationArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromLeagueSeason(TypedDict, total=False):
    """Arguments for LeagueSeason"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyLeagueSeasonArgs = FindManyLeagueSeasonArgsFromLeagueSeason
FindFirstLeagueSeasonArgs = FindManyLeagueSeasonArgsFromLeagueSeason


class LeagueSeasonWhereInput(TypedDict, total=False):
    """LeagueSeason arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    leagueId: Union[_str, 'types.StringFilter']
    seasonId: Union[_str, 'types.StringFilter']
    salaryCap: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    league: 'LeagueRelationFilter'
    season: 'SeasonRelationFilter'
    commissioners: 'LeagueCommissionerListRelationFilter'
    bogs: 'LeagueBOGListRelationFilter'
    teams: 'TeamSeasonListRelationFilter'
    playerHistory: 'PlayerLeagueHistoryListRelationFilter'

    # should be noted that AND and NOT should be Union['LeagueSeasonWhereInput', List['LeagueSeasonWhereInput']]
    # but this causes mypy to hang :/
    AND: List['LeagueSeasonWhereInput']
    OR: List['LeagueSeasonWhereInput']
    NOT: List['LeagueSeasonWhereInput']



# aggregate LeagueSeason types


class LeagueSeasonScalarWhereWithAggregatesInput(TypedDict, total=False):
    """LeagueSeason arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    leagueId: Union[_str, 'types.StringWithAggregatesFilter']
    seasonId: Union[_str, 'types.StringWithAggregatesFilter']
    salaryCap: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LeagueSeasonScalarWhereWithAggregatesInput']
    OR: List['LeagueSeasonScalarWhereWithAggregatesInput']
    NOT: List['LeagueSeasonScalarWhereWithAggregatesInput']



class LeagueSeasonGroupByOutput(TypedDict, total=False):
    id: _str
    leagueId: _str
    seasonId: _str
    salaryCap: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'LeagueSeasonSumAggregateOutput'
    _avg: 'LeagueSeasonAvgAggregateOutput'
    _min: 'LeagueSeasonMinAggregateOutput'
    _max: 'LeagueSeasonMaxAggregateOutput'
    _count: 'LeagueSeasonCountAggregateOutput'


class LeagueSeasonAvgAggregateOutput(TypedDict, total=False):
    """LeagueSeason output for aggregating averages"""
    salaryCap: float


class LeagueSeasonSumAggregateOutput(TypedDict, total=False):
    """LeagueSeason output for aggregating sums"""
    salaryCap: _int


class LeagueSeasonScalarAggregateOutput(TypedDict, total=False):
    """LeagueSeason output including scalar fields"""
    id: _str
    leagueId: _str
    seasonId: _str
    salaryCap: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


LeagueSeasonMinAggregateOutput = LeagueSeasonScalarAggregateOutput
LeagueSeasonMaxAggregateOutput = LeagueSeasonScalarAggregateOutput


class LeagueSeasonMaxAggregateInput(TypedDict, total=False):
    """LeagueSeason input for aggregating by max"""
    id: bool
    leagueId: bool
    seasonId: bool
    salaryCap: bool
    createdAt: bool
    updatedAt: bool


class LeagueSeasonMinAggregateInput(TypedDict, total=False):
    """LeagueSeason input for aggregating by min"""
    id: bool
    leagueId: bool
    seasonId: bool
    salaryCap: bool
    createdAt: bool
    updatedAt: bool


class LeagueSeasonNumberAggregateInput(TypedDict, total=False):
    """LeagueSeason input for aggregating numbers"""
    salaryCap: bool


LeagueSeasonAvgAggregateInput = LeagueSeasonNumberAggregateInput
LeagueSeasonSumAggregateInput = LeagueSeasonNumberAggregateInput


LeagueSeasonCountAggregateInput = TypedDict(
    'LeagueSeasonCountAggregateInput',
    {
        'id': bool,
        'leagueId': bool,
        'seasonId': bool,
        'salaryCap': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

LeagueSeasonCountAggregateOutput = TypedDict(
    'LeagueSeasonCountAggregateOutput',
    {
        'id': int,
        'leagueId': int,
        'seasonId': int,
        'salaryCap': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


LeagueSeasonKeys = Literal[
    'id',
    'leagueId',
    'seasonId',
    'salaryCap',
    'createdAt',
    'updatedAt',
    'league',
    'season',
    'commissioners',
    'bogs',
    'teams',
    'playerHistory',
]
LeagueSeasonScalarFieldKeys = Literal[
    'id',
    'leagueId',
    'seasonId',
    'salaryCap',
    'createdAt',
    'updatedAt',
]
LeagueSeasonScalarFieldKeysT = TypeVar('LeagueSeasonScalarFieldKeysT', bound=LeagueSeasonScalarFieldKeys)

LeagueSeasonRelationalFieldKeys = Literal[
        'league',
        'season',
        'commissioners',
        'bogs',
        'teams',
        'playerHistory',
    ]

# Conference types

class ConferenceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Conference create method"""
    id: _str
    leagueId: _str
    league: 'LeagueCreateNestedWithoutRelationsInput'
    divisions: 'DivisionCreateManyNestedWithoutRelationsInput'


class ConferenceCreateInput(ConferenceOptionalCreateInput):
    """Required arguments to the Conference create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ConferenceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Conference create method, without relations"""
    id: _str
    leagueId: _str


class ConferenceCreateWithoutRelationsInput(ConferenceOptionalCreateWithoutRelationsInput):
    """Required arguments to the Conference create method, without relations"""
    name: _str

class ConferenceConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ConferenceCreateWithoutRelationsInput'
    where: 'ConferenceWhereUniqueInput'

class ConferenceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ConferenceCreateWithoutRelationsInput'
    connect: 'ConferenceWhereUniqueInput'
    connect_or_create: 'ConferenceConnectOrCreateWithoutRelationsInput'


class ConferenceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ConferenceCreateWithoutRelationsInput', List['ConferenceCreateWithoutRelationsInput']]
    connect: Union['ConferenceWhereUniqueInput', List['ConferenceWhereUniqueInput']]
    connect_or_create: Union['ConferenceConnectOrCreateWithoutRelationsInput', List['ConferenceConnectOrCreateWithoutRelationsInput']]

_ConferenceWhereUnique_id_Input = TypedDict(
    '_ConferenceWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ConferenceCompoundname_leagueIdKeyInner = TypedDict(
    '_ConferenceCompoundname_leagueIdKeyInner',
    {
        'name': '_str',
        'leagueId': '_str',
    },
    total=True
)

_ConferenceCompoundname_leagueIdKey = TypedDict(
    '_ConferenceCompoundname_leagueIdKey',
    {
        'name_leagueId': '_ConferenceCompoundname_leagueIdKeyInner',
    },
    total=True
)

ConferenceWhereUniqueInput = Union[
    '_ConferenceWhereUnique_id_Input',
    '_ConferenceCompoundname_leagueIdKey',
]


class ConferenceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    league: 'LeagueUpdateOneWithoutRelationsInput'
    divisions: 'DivisionUpdateManyWithoutRelationsInput'


class ConferenceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str


class ConferenceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ConferenceCreateWithoutRelationsInput']
    connect: List['ConferenceWhereUniqueInput']
    connect_or_create: List['ConferenceConnectOrCreateWithoutRelationsInput']
    set: List['ConferenceWhereUniqueInput']
    disconnect: List['ConferenceWhereUniqueInput']
    delete: List['ConferenceWhereUniqueInput']

    # TODO
    # update: List['ConferenceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ConferenceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ConferenceScalarWhereInput']
    # upsert: List['ConferenceUpserteWithWhereUniqueWithoutRelationsInput']


class ConferenceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ConferenceCreateWithoutRelationsInput'
    connect: 'ConferenceWhereUniqueInput'
    connect_or_create: 'ConferenceConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ConferenceUpdateInput'
    # upsert: 'ConferenceUpsertWithoutRelationsInput'


class ConferenceUpsertInput(TypedDict):
    create: 'ConferenceCreateInput'
    update: 'ConferenceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Conference_id_OrderByInput = TypedDict(
    '_Conference_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Conference_name_OrderByInput = TypedDict(
    '_Conference_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Conference_leagueId_OrderByInput = TypedDict(
    '_Conference_leagueId_OrderByInput',
    {
        'leagueId': 'SortOrder',
    },
    total=True
)

_Conference_RelevanceInner = TypedDict(
    '_Conference_RelevanceInner',
    {
        'fields': 'List[ConferenceScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Conference_RelevanceOrderByInput = TypedDict(
    '_Conference_RelevanceOrderByInput',
    {
        '_relevance': '_Conference_RelevanceInner',
    },
    total=True
)

ConferenceOrderByInput = Union[
    '_Conference_id_OrderByInput',
    '_Conference_name_OrderByInput',
    '_Conference_leagueId_OrderByInput',
    '_Conference_RelevanceOrderByInput',
]



# recursive Conference types
# TODO: cleanup these types



ConferenceRelationFilter = TypedDict(
    'ConferenceRelationFilter',
    {
        'is': 'ConferenceWhereInput',
        'is_not': 'ConferenceWhereInput',
    },
    total=False,
)


class ConferenceListRelationFilter(TypedDict, total=False):
    some: 'ConferenceWhereInput'
    none: 'ConferenceWhereInput'
    every: 'ConferenceWhereInput'


class ConferenceInclude(TypedDict, total=False):
    """Conference relational arguments"""
    league: Union[bool, 'LeagueArgsFromConference']
    divisions: Union[bool, 'FindManyDivisionArgsFromConference']


class ForumPostIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    author: Union[bool, 'UserArgsFromConference']
    comments: Union[bool, 'FindManyForumCommentArgsFromConference']
    reactions: Union[bool, 'FindManyForumReactionArgsFromConference']
    followers: Union[bool, 'FindManyForumFollowerArgsFromConference']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromConference']


class ForumPostArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']
    post: Union[bool, 'ForumPostArgsFromConference']
    comment: Union[bool, 'ForumCommentArgsFromConference']


class ForumReactionArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']
    post: Union[bool, 'ForumPostArgsFromConference']


class ForumFollowerArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']
    post: Union[bool, 'ForumPostArgsFromConference']


class ForumPostSubscriptionArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    author: Union[bool, 'UserArgsFromConference']
    post: Union[bool, 'ForumPostArgsFromConference']
    quotedComment: Union[bool, 'ForumCommentArgsFromConference']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromConference']
    reactions: Union[bool, 'FindManyForumReactionArgsFromConference']


class ForumCommentArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    parentLeague: Union[bool, 'LeagueArgsFromConference']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromConference']
    conferences: Union[bool, 'FindManyConferenceArgsFromConference']
    divisions: Union[bool, 'FindManyDivisionArgsFromConference']
    teams: Union[bool, 'FindManyTeamArgsFromConference']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromConference']


class LeagueArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    league: Union[bool, 'LeagueArgsFromConference']
    season: Union[bool, 'SeasonArgsFromConference']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromConference']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromConference']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromConference']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromConference']


class LeagueSeasonArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    league: Union[bool, 'LeagueArgsFromConference']
    divisions: Union[bool, 'FindManyDivisionArgsFromConference']


class ConferenceArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    conference: Union[bool, 'ConferenceArgsFromConference']
    league: Union[bool, 'LeagueArgsFromConference']
    teams: Union[bool, 'FindManyTeamArgsFromConference']


class DivisionArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromConference']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromConference']


class SeasonArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromConference']


class LeagueCommissionerArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromConference']


class LeagueBOGArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromConference']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromConference']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromConference']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromConference']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromConference']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromConference']


class MatchArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromConference']
    match: Union[bool, 'MatchArgsFromConference']


class ClubMatchStatsArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    customKit: Union[bool, 'CustomKitArgsFromConference']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromConference']


class ClubMatchStatsDetailsArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromConference']


class CustomKitArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    match: Union[bool, 'MatchArgsFromConference']


class ClubAggregateMatchStatsArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    match: Union[bool, 'MatchArgsFromConference']


class MatchAnalyticsArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    match: Union[bool, 'MatchArgsFromConference']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromConference']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromConference']


class PlayerMatchArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']
    season: Union[bool, 'SeasonArgsFromConference']
    contract: Union[bool, 'ContractArgsFromConference']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromConference']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromConference']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromConference']
    matches: Union[bool, 'FindManyMatchArgsFromConference']


class PlayerSeasonArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromConference']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromConference']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromConference']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromConference']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromConference']


class PlayerTeamSeasonArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromConference']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromConference']


class PlayerLeagueHistoryArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromConference']
    trophySummary: Union[bool, 'PSNTrophyArgsFromConference']
    games: Union[bool, 'FindManyPSNGameArgsFromConference']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromConference']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromConference']


class PSNProfileArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    profile: Union[bool, 'PSNProfileArgsFromConference']


class PSNAvatarArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    profile: Union[bool, 'PSNProfileArgsFromConference']


class PSNTrophyArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    profile: Union[bool, 'PSNProfileArgsFromConference']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromConference']


class PSNGameArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    profile: Union[bool, 'PSNProfileArgsFromConference']


class PSNSyncLogArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    profile: Union[bool, 'PSNProfileArgsFromConference']
    game: Union[bool, 'PSNGameArgsFromConference']


class PSNGameTrophiesArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    league: Union[bool, 'LeagueArgsFromConference']
    division: Union[bool, 'DivisionArgsFromConference']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromConference']
    nhlAffiliate: Union[bool, 'TeamArgsFromConference']
    ahlAffiliate: Union[bool, 'TeamArgsFromConference']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromConference']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromConference']


class TeamArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    team: Union[bool, 'TeamArgsFromConference']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromConference']
    matches: Union[bool, 'FindManyMatchArgsFromConference']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromConference']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromConference']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromConference']
    bids: Union[bool, 'FindManyBidArgsFromConference']
    managers: Union[bool, 'FindManyTeamManagerArgsFromConference']


class TeamSeasonArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']
    teamSeason: Union[bool, 'TeamSeasonArgsFromConference']


class TeamManagerArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    contract: Union[bool, 'ContractArgsFromConference']
    teamSeason: Union[bool, 'TeamSeasonArgsFromConference']


class BidArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromConference']
    bids: Union[bool, 'FindManyBidArgsFromConference']


class ContractArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    notifications: Union[bool, 'FindManyNotificationArgsFromConference']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromConference']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromConference']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromConference']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromConference']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromConference']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromConference']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromConference']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromConference']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromConference']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromConference']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromConference']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromConference']
    psnProfile: Union[bool, 'PSNProfileArgsFromConference']


class UserArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']


class EaIdHistoryArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']


class SystemHistoryArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']


class GamertagHistoryArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromConference(TypedDict, total=False):
    """Relational arguments for Conference"""
    user: Union[bool, 'UserArgsFromConference']


class NotificationArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromConference(TypedDict, total=False):
    """Arguments for Conference"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyConferenceArgs = FindManyConferenceArgsFromConference
FindFirstConferenceArgs = FindManyConferenceArgsFromConference


class ConferenceWhereInput(TypedDict, total=False):
    """Conference arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    leagueId: Union[_str, 'types.StringFilter']
    league: 'LeagueRelationFilter'
    divisions: 'DivisionListRelationFilter'

    # should be noted that AND and NOT should be Union['ConferenceWhereInput', List['ConferenceWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ConferenceWhereInput']
    OR: List['ConferenceWhereInput']
    NOT: List['ConferenceWhereInput']



# aggregate Conference types


class ConferenceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Conference arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    leagueId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['ConferenceScalarWhereWithAggregatesInput']
    OR: List['ConferenceScalarWhereWithAggregatesInput']
    NOT: List['ConferenceScalarWhereWithAggregatesInput']



class ConferenceGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    leagueId: _str
    _sum: 'ConferenceSumAggregateOutput'
    _avg: 'ConferenceAvgAggregateOutput'
    _min: 'ConferenceMinAggregateOutput'
    _max: 'ConferenceMaxAggregateOutput'
    _count: 'ConferenceCountAggregateOutput'


class ConferenceAvgAggregateOutput(TypedDict, total=False):
    """Conference output for aggregating averages"""


class ConferenceSumAggregateOutput(TypedDict, total=False):
    """Conference output for aggregating sums"""


class ConferenceScalarAggregateOutput(TypedDict, total=False):
    """Conference output including scalar fields"""
    id: _str
    name: _str
    leagueId: _str


ConferenceMinAggregateOutput = ConferenceScalarAggregateOutput
ConferenceMaxAggregateOutput = ConferenceScalarAggregateOutput


class ConferenceMaxAggregateInput(TypedDict, total=False):
    """Conference input for aggregating by max"""
    id: bool
    name: bool
    leagueId: bool


class ConferenceMinAggregateInput(TypedDict, total=False):
    """Conference input for aggregating by min"""
    id: bool
    name: bool
    leagueId: bool


class ConferenceNumberAggregateInput(TypedDict, total=False):
    """Conference input for aggregating numbers"""


ConferenceAvgAggregateInput = ConferenceNumberAggregateInput
ConferenceSumAggregateInput = ConferenceNumberAggregateInput


ConferenceCountAggregateInput = TypedDict(
    'ConferenceCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'leagueId': bool,
        '_all': bool,
    },
    total=False,
)

ConferenceCountAggregateOutput = TypedDict(
    'ConferenceCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'leagueId': int,
        '_all': int,
    },
    total=False,
)


ConferenceKeys = Literal[
    'id',
    'name',
    'leagueId',
    'league',
    'divisions',
]
ConferenceScalarFieldKeys = Literal[
    'id',
    'name',
    'leagueId',
]
ConferenceScalarFieldKeysT = TypeVar('ConferenceScalarFieldKeysT', bound=ConferenceScalarFieldKeys)

ConferenceRelationalFieldKeys = Literal[
        'league',
        'divisions',
    ]

# Division types

class DivisionOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Division create method"""
    id: _str
    conferenceId: _str
    leagueId: _str
    conference: 'ConferenceCreateNestedWithoutRelationsInput'
    league: 'LeagueCreateNestedWithoutRelationsInput'
    teams: 'TeamCreateManyNestedWithoutRelationsInput'


class DivisionCreateInput(DivisionOptionalCreateInput):
    """Required arguments to the Division create method"""
    name: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class DivisionOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Division create method, without relations"""
    id: _str
    conferenceId: _str
    leagueId: _str


class DivisionCreateWithoutRelationsInput(DivisionOptionalCreateWithoutRelationsInput):
    """Required arguments to the Division create method, without relations"""
    name: _str

class DivisionConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'DivisionCreateWithoutRelationsInput'
    where: 'DivisionWhereUniqueInput'

class DivisionCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'DivisionCreateWithoutRelationsInput'
    connect: 'DivisionWhereUniqueInput'
    connect_or_create: 'DivisionConnectOrCreateWithoutRelationsInput'


class DivisionCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['DivisionCreateWithoutRelationsInput', List['DivisionCreateWithoutRelationsInput']]
    connect: Union['DivisionWhereUniqueInput', List['DivisionWhereUniqueInput']]
    connect_or_create: Union['DivisionConnectOrCreateWithoutRelationsInput', List['DivisionConnectOrCreateWithoutRelationsInput']]

_DivisionWhereUnique_id_Input = TypedDict(
    '_DivisionWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_DivisionCompoundname_leagueIdKeyInner = TypedDict(
    '_DivisionCompoundname_leagueIdKeyInner',
    {
        'name': '_str',
        'leagueId': '_str',
    },
    total=True
)

_DivisionCompoundname_leagueIdKey = TypedDict(
    '_DivisionCompoundname_leagueIdKey',
    {
        'name_leagueId': '_DivisionCompoundname_leagueIdKeyInner',
    },
    total=True
)

DivisionWhereUniqueInput = Union[
    '_DivisionWhereUnique_id_Input',
    '_DivisionCompoundname_leagueIdKey',
]


class DivisionUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    conference: 'ConferenceUpdateOneWithoutRelationsInput'
    league: 'LeagueUpdateOneWithoutRelationsInput'
    teams: 'TeamUpdateManyWithoutRelationsInput'


class DivisionUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str


class DivisionUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['DivisionCreateWithoutRelationsInput']
    connect: List['DivisionWhereUniqueInput']
    connect_or_create: List['DivisionConnectOrCreateWithoutRelationsInput']
    set: List['DivisionWhereUniqueInput']
    disconnect: List['DivisionWhereUniqueInput']
    delete: List['DivisionWhereUniqueInput']

    # TODO
    # update: List['DivisionUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['DivisionUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['DivisionScalarWhereInput']
    # upsert: List['DivisionUpserteWithWhereUniqueWithoutRelationsInput']


class DivisionUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'DivisionCreateWithoutRelationsInput'
    connect: 'DivisionWhereUniqueInput'
    connect_or_create: 'DivisionConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'DivisionUpdateInput'
    # upsert: 'DivisionUpsertWithoutRelationsInput'


class DivisionUpsertInput(TypedDict):
    create: 'DivisionCreateInput'
    update: 'DivisionUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Division_id_OrderByInput = TypedDict(
    '_Division_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Division_name_OrderByInput = TypedDict(
    '_Division_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_Division_conferenceId_OrderByInput = TypedDict(
    '_Division_conferenceId_OrderByInput',
    {
        'conferenceId': 'SortOrder',
    },
    total=True
)

_Division_leagueId_OrderByInput = TypedDict(
    '_Division_leagueId_OrderByInput',
    {
        'leagueId': 'SortOrder',
    },
    total=True
)

_Division_RelevanceInner = TypedDict(
    '_Division_RelevanceInner',
    {
        'fields': 'List[DivisionScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Division_RelevanceOrderByInput = TypedDict(
    '_Division_RelevanceOrderByInput',
    {
        '_relevance': '_Division_RelevanceInner',
    },
    total=True
)

DivisionOrderByInput = Union[
    '_Division_id_OrderByInput',
    '_Division_name_OrderByInput',
    '_Division_conferenceId_OrderByInput',
    '_Division_leagueId_OrderByInput',
    '_Division_RelevanceOrderByInput',
]



# recursive Division types
# TODO: cleanup these types



DivisionRelationFilter = TypedDict(
    'DivisionRelationFilter',
    {
        'is': 'DivisionWhereInput',
        'is_not': 'DivisionWhereInput',
    },
    total=False,
)


class DivisionListRelationFilter(TypedDict, total=False):
    some: 'DivisionWhereInput'
    none: 'DivisionWhereInput'
    every: 'DivisionWhereInput'


class DivisionInclude(TypedDict, total=False):
    """Division relational arguments"""
    conference: Union[bool, 'ConferenceArgsFromDivision']
    league: Union[bool, 'LeagueArgsFromDivision']
    teams: Union[bool, 'FindManyTeamArgsFromDivision']


class ForumPostIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    author: Union[bool, 'UserArgsFromDivision']
    comments: Union[bool, 'FindManyForumCommentArgsFromDivision']
    reactions: Union[bool, 'FindManyForumReactionArgsFromDivision']
    followers: Union[bool, 'FindManyForumFollowerArgsFromDivision']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromDivision']


class ForumPostArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']
    post: Union[bool, 'ForumPostArgsFromDivision']
    comment: Union[bool, 'ForumCommentArgsFromDivision']


class ForumReactionArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']
    post: Union[bool, 'ForumPostArgsFromDivision']


class ForumFollowerArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']
    post: Union[bool, 'ForumPostArgsFromDivision']


class ForumPostSubscriptionArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    author: Union[bool, 'UserArgsFromDivision']
    post: Union[bool, 'ForumPostArgsFromDivision']
    quotedComment: Union[bool, 'ForumCommentArgsFromDivision']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromDivision']
    reactions: Union[bool, 'FindManyForumReactionArgsFromDivision']


class ForumCommentArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    parentLeague: Union[bool, 'LeagueArgsFromDivision']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromDivision']
    conferences: Union[bool, 'FindManyConferenceArgsFromDivision']
    divisions: Union[bool, 'FindManyDivisionArgsFromDivision']
    teams: Union[bool, 'FindManyTeamArgsFromDivision']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromDivision']


class LeagueArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    league: Union[bool, 'LeagueArgsFromDivision']
    season: Union[bool, 'SeasonArgsFromDivision']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromDivision']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromDivision']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromDivision']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromDivision']


class LeagueSeasonArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    league: Union[bool, 'LeagueArgsFromDivision']
    divisions: Union[bool, 'FindManyDivisionArgsFromDivision']


class ConferenceArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    conference: Union[bool, 'ConferenceArgsFromDivision']
    league: Union[bool, 'LeagueArgsFromDivision']
    teams: Union[bool, 'FindManyTeamArgsFromDivision']


class DivisionArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromDivision']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromDivision']


class SeasonArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromDivision']


class LeagueCommissionerArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromDivision']


class LeagueBOGArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromDivision']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromDivision']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromDivision']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromDivision']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromDivision']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromDivision']


class MatchArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromDivision']
    match: Union[bool, 'MatchArgsFromDivision']


class ClubMatchStatsArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    customKit: Union[bool, 'CustomKitArgsFromDivision']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromDivision']


class ClubMatchStatsDetailsArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromDivision']


class CustomKitArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    match: Union[bool, 'MatchArgsFromDivision']


class ClubAggregateMatchStatsArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    match: Union[bool, 'MatchArgsFromDivision']


class MatchAnalyticsArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    match: Union[bool, 'MatchArgsFromDivision']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromDivision']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromDivision']


class PlayerMatchArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']
    season: Union[bool, 'SeasonArgsFromDivision']
    contract: Union[bool, 'ContractArgsFromDivision']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromDivision']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromDivision']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromDivision']
    matches: Union[bool, 'FindManyMatchArgsFromDivision']


class PlayerSeasonArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromDivision']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromDivision']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromDivision']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromDivision']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromDivision']


class PlayerTeamSeasonArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromDivision']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromDivision']


class PlayerLeagueHistoryArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromDivision']
    trophySummary: Union[bool, 'PSNTrophyArgsFromDivision']
    games: Union[bool, 'FindManyPSNGameArgsFromDivision']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromDivision']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromDivision']


class PSNProfileArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    profile: Union[bool, 'PSNProfileArgsFromDivision']


class PSNAvatarArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    profile: Union[bool, 'PSNProfileArgsFromDivision']


class PSNTrophyArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    profile: Union[bool, 'PSNProfileArgsFromDivision']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromDivision']


class PSNGameArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    profile: Union[bool, 'PSNProfileArgsFromDivision']


class PSNSyncLogArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    profile: Union[bool, 'PSNProfileArgsFromDivision']
    game: Union[bool, 'PSNGameArgsFromDivision']


class PSNGameTrophiesArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    league: Union[bool, 'LeagueArgsFromDivision']
    division: Union[bool, 'DivisionArgsFromDivision']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromDivision']
    nhlAffiliate: Union[bool, 'TeamArgsFromDivision']
    ahlAffiliate: Union[bool, 'TeamArgsFromDivision']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromDivision']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromDivision']


class TeamArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    team: Union[bool, 'TeamArgsFromDivision']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromDivision']
    matches: Union[bool, 'FindManyMatchArgsFromDivision']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromDivision']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromDivision']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromDivision']
    bids: Union[bool, 'FindManyBidArgsFromDivision']
    managers: Union[bool, 'FindManyTeamManagerArgsFromDivision']


class TeamSeasonArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']
    teamSeason: Union[bool, 'TeamSeasonArgsFromDivision']


class TeamManagerArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    contract: Union[bool, 'ContractArgsFromDivision']
    teamSeason: Union[bool, 'TeamSeasonArgsFromDivision']


class BidArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromDivision']
    bids: Union[bool, 'FindManyBidArgsFromDivision']


class ContractArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    notifications: Union[bool, 'FindManyNotificationArgsFromDivision']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromDivision']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromDivision']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromDivision']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromDivision']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromDivision']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromDivision']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromDivision']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromDivision']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromDivision']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromDivision']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromDivision']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromDivision']
    psnProfile: Union[bool, 'PSNProfileArgsFromDivision']


class UserArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']


class EaIdHistoryArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']


class SystemHistoryArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']


class GamertagHistoryArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromDivision(TypedDict, total=False):
    """Relational arguments for Division"""
    user: Union[bool, 'UserArgsFromDivision']


class NotificationArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromDivision(TypedDict, total=False):
    """Arguments for Division"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyDivisionArgs = FindManyDivisionArgsFromDivision
FindFirstDivisionArgs = FindManyDivisionArgsFromDivision


class DivisionWhereInput(TypedDict, total=False):
    """Division arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    conferenceId: Union[_str, 'types.StringFilter']
    leagueId: Union[_str, 'types.StringFilter']
    conference: 'ConferenceRelationFilter'
    league: 'LeagueRelationFilter'
    teams: 'TeamListRelationFilter'

    # should be noted that AND and NOT should be Union['DivisionWhereInput', List['DivisionWhereInput']]
    # but this causes mypy to hang :/
    AND: List['DivisionWhereInput']
    OR: List['DivisionWhereInput']
    NOT: List['DivisionWhereInput']



# aggregate Division types


class DivisionScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Division arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    conferenceId: Union[_str, 'types.StringWithAggregatesFilter']
    leagueId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['DivisionScalarWhereWithAggregatesInput']
    OR: List['DivisionScalarWhereWithAggregatesInput']
    NOT: List['DivisionScalarWhereWithAggregatesInput']



class DivisionGroupByOutput(TypedDict, total=False):
    id: _str
    name: _str
    conferenceId: _str
    leagueId: _str
    _sum: 'DivisionSumAggregateOutput'
    _avg: 'DivisionAvgAggregateOutput'
    _min: 'DivisionMinAggregateOutput'
    _max: 'DivisionMaxAggregateOutput'
    _count: 'DivisionCountAggregateOutput'


class DivisionAvgAggregateOutput(TypedDict, total=False):
    """Division output for aggregating averages"""


class DivisionSumAggregateOutput(TypedDict, total=False):
    """Division output for aggregating sums"""


class DivisionScalarAggregateOutput(TypedDict, total=False):
    """Division output including scalar fields"""
    id: _str
    name: _str
    conferenceId: _str
    leagueId: _str


DivisionMinAggregateOutput = DivisionScalarAggregateOutput
DivisionMaxAggregateOutput = DivisionScalarAggregateOutput


class DivisionMaxAggregateInput(TypedDict, total=False):
    """Division input for aggregating by max"""
    id: bool
    name: bool
    conferenceId: bool
    leagueId: bool


class DivisionMinAggregateInput(TypedDict, total=False):
    """Division input for aggregating by min"""
    id: bool
    name: bool
    conferenceId: bool
    leagueId: bool


class DivisionNumberAggregateInput(TypedDict, total=False):
    """Division input for aggregating numbers"""


DivisionAvgAggregateInput = DivisionNumberAggregateInput
DivisionSumAggregateInput = DivisionNumberAggregateInput


DivisionCountAggregateInput = TypedDict(
    'DivisionCountAggregateInput',
    {
        'id': bool,
        'name': bool,
        'conferenceId': bool,
        'leagueId': bool,
        '_all': bool,
    },
    total=False,
)

DivisionCountAggregateOutput = TypedDict(
    'DivisionCountAggregateOutput',
    {
        'id': int,
        'name': int,
        'conferenceId': int,
        'leagueId': int,
        '_all': int,
    },
    total=False,
)


DivisionKeys = Literal[
    'id',
    'name',
    'conferenceId',
    'leagueId',
    'conference',
    'league',
    'teams',
]
DivisionScalarFieldKeys = Literal[
    'id',
    'name',
    'conferenceId',
    'leagueId',
]
DivisionScalarFieldKeysT = TypeVar('DivisionScalarFieldKeysT', bound=DivisionScalarFieldKeys)

DivisionRelationalFieldKeys = Literal[
        'conference',
        'league',
        'teams',
    ]

# Season types

class SeasonOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Season create method"""
    id: _str
    isLatest: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    leagueSeasons: 'LeagueSeasonCreateManyNestedWithoutRelationsInput'
    players: 'PlayerSeasonCreateManyNestedWithoutRelationsInput'


class SeasonCreateInput(SeasonOptionalCreateInput):
    """Required arguments to the Season create method"""
    seasonNumber: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SeasonOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Season create method, without relations"""
    id: _str
    isLatest: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class SeasonCreateWithoutRelationsInput(SeasonOptionalCreateWithoutRelationsInput):
    """Required arguments to the Season create method, without relations"""
    seasonNumber: _int

class SeasonConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SeasonCreateWithoutRelationsInput'
    where: 'SeasonWhereUniqueInput'

class SeasonCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SeasonCreateWithoutRelationsInput'
    connect: 'SeasonWhereUniqueInput'
    connect_or_create: 'SeasonConnectOrCreateWithoutRelationsInput'


class SeasonCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SeasonCreateWithoutRelationsInput', List['SeasonCreateWithoutRelationsInput']]
    connect: Union['SeasonWhereUniqueInput', List['SeasonWhereUniqueInput']]
    connect_or_create: Union['SeasonConnectOrCreateWithoutRelationsInput', List['SeasonConnectOrCreateWithoutRelationsInput']]

_SeasonWhereUnique_id_Input = TypedDict(
    '_SeasonWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

SeasonWhereUniqueInput = _SeasonWhereUnique_id_Input


class SeasonUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    seasonNumber: Union[AtomicIntInput, _int]
    isLatest: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    leagueSeasons: 'LeagueSeasonUpdateManyWithoutRelationsInput'
    players: 'PlayerSeasonUpdateManyWithoutRelationsInput'


class SeasonUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    seasonNumber: Union[AtomicIntInput, _int]
    isLatest: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class SeasonUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SeasonCreateWithoutRelationsInput']
    connect: List['SeasonWhereUniqueInput']
    connect_or_create: List['SeasonConnectOrCreateWithoutRelationsInput']
    set: List['SeasonWhereUniqueInput']
    disconnect: List['SeasonWhereUniqueInput']
    delete: List['SeasonWhereUniqueInput']

    # TODO
    # update: List['SeasonUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SeasonUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SeasonScalarWhereInput']
    # upsert: List['SeasonUpserteWithWhereUniqueWithoutRelationsInput']


class SeasonUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SeasonCreateWithoutRelationsInput'
    connect: 'SeasonWhereUniqueInput'
    connect_or_create: 'SeasonConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SeasonUpdateInput'
    # upsert: 'SeasonUpsertWithoutRelationsInput'


class SeasonUpsertInput(TypedDict):
    create: 'SeasonCreateInput'
    update: 'SeasonUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Season_id_OrderByInput = TypedDict(
    '_Season_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Season_seasonNumber_OrderByInput = TypedDict(
    '_Season_seasonNumber_OrderByInput',
    {
        'seasonNumber': 'SortOrder',
    },
    total=True
)

_Season_isLatest_OrderByInput = TypedDict(
    '_Season_isLatest_OrderByInput',
    {
        'isLatest': 'SortOrder',
    },
    total=True
)

_Season_createdAt_OrderByInput = TypedDict(
    '_Season_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Season_updatedAt_OrderByInput = TypedDict(
    '_Season_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Season_RelevanceInner = TypedDict(
    '_Season_RelevanceInner',
    {
        'fields': 'List[SeasonScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Season_RelevanceOrderByInput = TypedDict(
    '_Season_RelevanceOrderByInput',
    {
        '_relevance': '_Season_RelevanceInner',
    },
    total=True
)

SeasonOrderByInput = Union[
    '_Season_id_OrderByInput',
    '_Season_seasonNumber_OrderByInput',
    '_Season_isLatest_OrderByInput',
    '_Season_createdAt_OrderByInput',
    '_Season_updatedAt_OrderByInput',
    '_Season_RelevanceOrderByInput',
]



# recursive Season types
# TODO: cleanup these types



SeasonRelationFilter = TypedDict(
    'SeasonRelationFilter',
    {
        'is': 'SeasonWhereInput',
        'is_not': 'SeasonWhereInput',
    },
    total=False,
)


class SeasonListRelationFilter(TypedDict, total=False):
    some: 'SeasonWhereInput'
    none: 'SeasonWhereInput'
    every: 'SeasonWhereInput'


class SeasonInclude(TypedDict, total=False):
    """Season relational arguments"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromSeason']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromSeason']


class ForumPostIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    author: Union[bool, 'UserArgsFromSeason']
    comments: Union[bool, 'FindManyForumCommentArgsFromSeason']
    reactions: Union[bool, 'FindManyForumReactionArgsFromSeason']
    followers: Union[bool, 'FindManyForumFollowerArgsFromSeason']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromSeason']


class ForumPostArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']
    post: Union[bool, 'ForumPostArgsFromSeason']
    comment: Union[bool, 'ForumCommentArgsFromSeason']


class ForumReactionArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']
    post: Union[bool, 'ForumPostArgsFromSeason']


class ForumFollowerArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']
    post: Union[bool, 'ForumPostArgsFromSeason']


class ForumPostSubscriptionArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    author: Union[bool, 'UserArgsFromSeason']
    post: Union[bool, 'ForumPostArgsFromSeason']
    quotedComment: Union[bool, 'ForumCommentArgsFromSeason']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromSeason']
    reactions: Union[bool, 'FindManyForumReactionArgsFromSeason']


class ForumCommentArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    parentLeague: Union[bool, 'LeagueArgsFromSeason']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromSeason']
    conferences: Union[bool, 'FindManyConferenceArgsFromSeason']
    divisions: Union[bool, 'FindManyDivisionArgsFromSeason']
    teams: Union[bool, 'FindManyTeamArgsFromSeason']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromSeason']


class LeagueArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    league: Union[bool, 'LeagueArgsFromSeason']
    season: Union[bool, 'SeasonArgsFromSeason']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromSeason']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromSeason']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromSeason']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromSeason']


class LeagueSeasonArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    league: Union[bool, 'LeagueArgsFromSeason']
    divisions: Union[bool, 'FindManyDivisionArgsFromSeason']


class ConferenceArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    conference: Union[bool, 'ConferenceArgsFromSeason']
    league: Union[bool, 'LeagueArgsFromSeason']
    teams: Union[bool, 'FindManyTeamArgsFromSeason']


class DivisionArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromSeason']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromSeason']


class SeasonArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromSeason']


class LeagueCommissionerArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromSeason']


class LeagueBOGArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromSeason']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromSeason']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromSeason']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromSeason']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromSeason']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromSeason']


class MatchArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromSeason']
    match: Union[bool, 'MatchArgsFromSeason']


class ClubMatchStatsArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    customKit: Union[bool, 'CustomKitArgsFromSeason']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromSeason']


class ClubMatchStatsDetailsArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromSeason']


class CustomKitArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    match: Union[bool, 'MatchArgsFromSeason']


class ClubAggregateMatchStatsArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    match: Union[bool, 'MatchArgsFromSeason']


class MatchAnalyticsArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    match: Union[bool, 'MatchArgsFromSeason']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromSeason']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromSeason']


class PlayerMatchArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']
    season: Union[bool, 'SeasonArgsFromSeason']
    contract: Union[bool, 'ContractArgsFromSeason']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromSeason']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromSeason']
    matches: Union[bool, 'FindManyMatchArgsFromSeason']


class PlayerSeasonArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromSeason']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromSeason']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromSeason']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromSeason']


class PlayerTeamSeasonArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromSeason']


class PlayerLeagueHistoryArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromSeason']
    trophySummary: Union[bool, 'PSNTrophyArgsFromSeason']
    games: Union[bool, 'FindManyPSNGameArgsFromSeason']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromSeason']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromSeason']


class PSNProfileArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    profile: Union[bool, 'PSNProfileArgsFromSeason']


class PSNAvatarArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    profile: Union[bool, 'PSNProfileArgsFromSeason']


class PSNTrophyArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    profile: Union[bool, 'PSNProfileArgsFromSeason']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromSeason']


class PSNGameArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    profile: Union[bool, 'PSNProfileArgsFromSeason']


class PSNSyncLogArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    profile: Union[bool, 'PSNProfileArgsFromSeason']
    game: Union[bool, 'PSNGameArgsFromSeason']


class PSNGameTrophiesArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    league: Union[bool, 'LeagueArgsFromSeason']
    division: Union[bool, 'DivisionArgsFromSeason']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromSeason']
    nhlAffiliate: Union[bool, 'TeamArgsFromSeason']
    ahlAffiliate: Union[bool, 'TeamArgsFromSeason']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromSeason']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromSeason']


class TeamArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    team: Union[bool, 'TeamArgsFromSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromSeason']
    matches: Union[bool, 'FindManyMatchArgsFromSeason']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromSeason']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromSeason']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromSeason']
    bids: Union[bool, 'FindManyBidArgsFromSeason']
    managers: Union[bool, 'FindManyTeamManagerArgsFromSeason']


class TeamSeasonArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']
    teamSeason: Union[bool, 'TeamSeasonArgsFromSeason']


class TeamManagerArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    contract: Union[bool, 'ContractArgsFromSeason']
    teamSeason: Union[bool, 'TeamSeasonArgsFromSeason']


class BidArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromSeason']
    bids: Union[bool, 'FindManyBidArgsFromSeason']


class ContractArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    notifications: Union[bool, 'FindManyNotificationArgsFromSeason']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromSeason']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromSeason']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromSeason']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromSeason']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromSeason']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromSeason']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromSeason']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromSeason']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromSeason']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromSeason']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromSeason']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromSeason']
    psnProfile: Union[bool, 'PSNProfileArgsFromSeason']


class UserArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']


class EaIdHistoryArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']


class SystemHistoryArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']


class GamertagHistoryArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromSeason(TypedDict, total=False):
    """Relational arguments for Season"""
    user: Union[bool, 'UserArgsFromSeason']


class NotificationArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromSeason(TypedDict, total=False):
    """Arguments for Season"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManySeasonArgs = FindManySeasonArgsFromSeason
FindFirstSeasonArgs = FindManySeasonArgsFromSeason


class SeasonWhereInput(TypedDict, total=False):
    """Season arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    seasonNumber: Union[_int, 'types.IntFilter']
    isLatest: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    leagueSeasons: 'LeagueSeasonListRelationFilter'
    players: 'PlayerSeasonListRelationFilter'

    # should be noted that AND and NOT should be Union['SeasonWhereInput', List['SeasonWhereInput']]
    # but this causes mypy to hang :/
    AND: List['SeasonWhereInput']
    OR: List['SeasonWhereInput']
    NOT: List['SeasonWhereInput']



# aggregate Season types


class SeasonScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Season arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    seasonNumber: Union[_int, 'types.IntWithAggregatesFilter']
    isLatest: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SeasonScalarWhereWithAggregatesInput']
    OR: List['SeasonScalarWhereWithAggregatesInput']
    NOT: List['SeasonScalarWhereWithAggregatesInput']



class SeasonGroupByOutput(TypedDict, total=False):
    id: _str
    seasonNumber: _int
    isLatest: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'SeasonSumAggregateOutput'
    _avg: 'SeasonAvgAggregateOutput'
    _min: 'SeasonMinAggregateOutput'
    _max: 'SeasonMaxAggregateOutput'
    _count: 'SeasonCountAggregateOutput'


class SeasonAvgAggregateOutput(TypedDict, total=False):
    """Season output for aggregating averages"""
    seasonNumber: float


class SeasonSumAggregateOutput(TypedDict, total=False):
    """Season output for aggregating sums"""
    seasonNumber: _int


class SeasonScalarAggregateOutput(TypedDict, total=False):
    """Season output including scalar fields"""
    id: _str
    seasonNumber: _int
    isLatest: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


SeasonMinAggregateOutput = SeasonScalarAggregateOutput
SeasonMaxAggregateOutput = SeasonScalarAggregateOutput


class SeasonMaxAggregateInput(TypedDict, total=False):
    """Season input for aggregating by max"""
    id: bool
    seasonNumber: bool
    isLatest: bool
    createdAt: bool
    updatedAt: bool


class SeasonMinAggregateInput(TypedDict, total=False):
    """Season input for aggregating by min"""
    id: bool
    seasonNumber: bool
    isLatest: bool
    createdAt: bool
    updatedAt: bool


class SeasonNumberAggregateInput(TypedDict, total=False):
    """Season input for aggregating numbers"""
    seasonNumber: bool


SeasonAvgAggregateInput = SeasonNumberAggregateInput
SeasonSumAggregateInput = SeasonNumberAggregateInput


SeasonCountAggregateInput = TypedDict(
    'SeasonCountAggregateInput',
    {
        'id': bool,
        'seasonNumber': bool,
        'isLatest': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

SeasonCountAggregateOutput = TypedDict(
    'SeasonCountAggregateOutput',
    {
        'id': int,
        'seasonNumber': int,
        'isLatest': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


SeasonKeys = Literal[
    'id',
    'seasonNumber',
    'isLatest',
    'createdAt',
    'updatedAt',
    'leagueSeasons',
    'players',
]
SeasonScalarFieldKeys = Literal[
    'id',
    'seasonNumber',
    'isLatest',
    'createdAt',
    'updatedAt',
]
SeasonScalarFieldKeysT = TypeVar('SeasonScalarFieldKeysT', bound=SeasonScalarFieldKeys)

SeasonRelationalFieldKeys = Literal[
        'leagueSeasons',
        'players',
    ]

# LeagueCommissioner types

class LeagueCommissionerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the LeagueCommissioner create method"""
    id: _str
    userId: _str
    leagueSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    leagueSeason: 'LeagueSeasonCreateNestedWithoutRelationsInput'


class LeagueCommissionerCreateInput(LeagueCommissionerOptionalCreateInput):
    """Required arguments to the LeagueCommissioner create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LeagueCommissionerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the LeagueCommissioner create method, without relations"""
    id: _str
    userId: _str
    leagueSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class LeagueCommissionerCreateWithoutRelationsInput(LeagueCommissionerOptionalCreateWithoutRelationsInput):
    """Required arguments to the LeagueCommissioner create method, without relations"""

class LeagueCommissionerConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'LeagueCommissionerCreateWithoutRelationsInput'
    where: 'LeagueCommissionerWhereUniqueInput'

class LeagueCommissionerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LeagueCommissionerCreateWithoutRelationsInput'
    connect: 'LeagueCommissionerWhereUniqueInput'
    connect_or_create: 'LeagueCommissionerConnectOrCreateWithoutRelationsInput'


class LeagueCommissionerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LeagueCommissionerCreateWithoutRelationsInput', List['LeagueCommissionerCreateWithoutRelationsInput']]
    connect: Union['LeagueCommissionerWhereUniqueInput', List['LeagueCommissionerWhereUniqueInput']]
    connect_or_create: Union['LeagueCommissionerConnectOrCreateWithoutRelationsInput', List['LeagueCommissionerConnectOrCreateWithoutRelationsInput']]

_LeagueCommissionerWhereUnique_id_Input = TypedDict(
    '_LeagueCommissionerWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_LeagueCommissionerCompounduserId_leagueSeasonIdKeyInner = TypedDict(
    '_LeagueCommissionerCompounduserId_leagueSeasonIdKeyInner',
    {
        'userId': '_str',
        'leagueSeasonId': '_str',
    },
    total=True
)

_LeagueCommissionerCompounduserId_leagueSeasonIdKey = TypedDict(
    '_LeagueCommissionerCompounduserId_leagueSeasonIdKey',
    {
        'userId_leagueSeasonId': '_LeagueCommissionerCompounduserId_leagueSeasonIdKeyInner',
    },
    total=True
)

LeagueCommissionerWhereUniqueInput = Union[
    '_LeagueCommissionerWhereUnique_id_Input',
    '_LeagueCommissionerCompounduserId_leagueSeasonIdKey',
]


class LeagueCommissionerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    leagueSeason: 'LeagueSeasonUpdateOneWithoutRelationsInput'


class LeagueCommissionerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class LeagueCommissionerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LeagueCommissionerCreateWithoutRelationsInput']
    connect: List['LeagueCommissionerWhereUniqueInput']
    connect_or_create: List['LeagueCommissionerConnectOrCreateWithoutRelationsInput']
    set: List['LeagueCommissionerWhereUniqueInput']
    disconnect: List['LeagueCommissionerWhereUniqueInput']
    delete: List['LeagueCommissionerWhereUniqueInput']

    # TODO
    # update: List['LeagueCommissionerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LeagueCommissionerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LeagueCommissionerScalarWhereInput']
    # upsert: List['LeagueCommissionerUpserteWithWhereUniqueWithoutRelationsInput']


class LeagueCommissionerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LeagueCommissionerCreateWithoutRelationsInput'
    connect: 'LeagueCommissionerWhereUniqueInput'
    connect_or_create: 'LeagueCommissionerConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LeagueCommissionerUpdateInput'
    # upsert: 'LeagueCommissionerUpsertWithoutRelationsInput'


class LeagueCommissionerUpsertInput(TypedDict):
    create: 'LeagueCommissionerCreateInput'
    update: 'LeagueCommissionerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_LeagueCommissioner_id_OrderByInput = TypedDict(
    '_LeagueCommissioner_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_LeagueCommissioner_userId_OrderByInput = TypedDict(
    '_LeagueCommissioner_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_LeagueCommissioner_leagueSeasonId_OrderByInput = TypedDict(
    '_LeagueCommissioner_leagueSeasonId_OrderByInput',
    {
        'leagueSeasonId': 'SortOrder',
    },
    total=True
)

_LeagueCommissioner_createdAt_OrderByInput = TypedDict(
    '_LeagueCommissioner_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_LeagueCommissioner_updatedAt_OrderByInput = TypedDict(
    '_LeagueCommissioner_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_LeagueCommissioner_RelevanceInner = TypedDict(
    '_LeagueCommissioner_RelevanceInner',
    {
        'fields': 'List[LeagueCommissionerScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_LeagueCommissioner_RelevanceOrderByInput = TypedDict(
    '_LeagueCommissioner_RelevanceOrderByInput',
    {
        '_relevance': '_LeagueCommissioner_RelevanceInner',
    },
    total=True
)

LeagueCommissionerOrderByInput = Union[
    '_LeagueCommissioner_id_OrderByInput',
    '_LeagueCommissioner_userId_OrderByInput',
    '_LeagueCommissioner_leagueSeasonId_OrderByInput',
    '_LeagueCommissioner_createdAt_OrderByInput',
    '_LeagueCommissioner_updatedAt_OrderByInput',
    '_LeagueCommissioner_RelevanceOrderByInput',
]



# recursive LeagueCommissioner types
# TODO: cleanup these types



LeagueCommissionerRelationFilter = TypedDict(
    'LeagueCommissionerRelationFilter',
    {
        'is': 'LeagueCommissionerWhereInput',
        'is_not': 'LeagueCommissionerWhereInput',
    },
    total=False,
)


class LeagueCommissionerListRelationFilter(TypedDict, total=False):
    some: 'LeagueCommissionerWhereInput'
    none: 'LeagueCommissionerWhereInput'
    every: 'LeagueCommissionerWhereInput'


class LeagueCommissionerInclude(TypedDict, total=False):
    """LeagueCommissioner relational arguments"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueCommissioner']


class ForumPostIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    author: Union[bool, 'UserArgsFromLeagueCommissioner']
    comments: Union[bool, 'FindManyForumCommentArgsFromLeagueCommissioner']
    reactions: Union[bool, 'FindManyForumReactionArgsFromLeagueCommissioner']
    followers: Union[bool, 'FindManyForumFollowerArgsFromLeagueCommissioner']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromLeagueCommissioner']


class ForumPostArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']
    post: Union[bool, 'ForumPostArgsFromLeagueCommissioner']
    comment: Union[bool, 'ForumCommentArgsFromLeagueCommissioner']


class ForumReactionArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']
    post: Union[bool, 'ForumPostArgsFromLeagueCommissioner']


class ForumFollowerArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']
    post: Union[bool, 'ForumPostArgsFromLeagueCommissioner']


class ForumPostSubscriptionArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    author: Union[bool, 'UserArgsFromLeagueCommissioner']
    post: Union[bool, 'ForumPostArgsFromLeagueCommissioner']
    quotedComment: Union[bool, 'ForumCommentArgsFromLeagueCommissioner']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromLeagueCommissioner']
    reactions: Union[bool, 'FindManyForumReactionArgsFromLeagueCommissioner']


class ForumCommentArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    parentLeague: Union[bool, 'LeagueArgsFromLeagueCommissioner']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromLeagueCommissioner']
    conferences: Union[bool, 'FindManyConferenceArgsFromLeagueCommissioner']
    divisions: Union[bool, 'FindManyDivisionArgsFromLeagueCommissioner']
    teams: Union[bool, 'FindManyTeamArgsFromLeagueCommissioner']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromLeagueCommissioner']


class LeagueArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    league: Union[bool, 'LeagueArgsFromLeagueCommissioner']
    season: Union[bool, 'SeasonArgsFromLeagueCommissioner']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromLeagueCommissioner']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromLeagueCommissioner']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromLeagueCommissioner']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromLeagueCommissioner']


class LeagueSeasonArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    league: Union[bool, 'LeagueArgsFromLeagueCommissioner']
    divisions: Union[bool, 'FindManyDivisionArgsFromLeagueCommissioner']


class ConferenceArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    conference: Union[bool, 'ConferenceArgsFromLeagueCommissioner']
    league: Union[bool, 'LeagueArgsFromLeagueCommissioner']
    teams: Union[bool, 'FindManyTeamArgsFromLeagueCommissioner']


class DivisionArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromLeagueCommissioner']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromLeagueCommissioner']


class SeasonArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueCommissioner']


class LeagueCommissionerArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueCommissioner']


class LeagueBOGArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeagueCommissioner']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromLeagueCommissioner']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromLeagueCommissioner']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromLeagueCommissioner']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromLeagueCommissioner']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromLeagueCommissioner']


class MatchArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromLeagueCommissioner']
    match: Union[bool, 'MatchArgsFromLeagueCommissioner']


class ClubMatchStatsArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    customKit: Union[bool, 'CustomKitArgsFromLeagueCommissioner']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromLeagueCommissioner']


class ClubMatchStatsDetailsArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromLeagueCommissioner']


class CustomKitArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    match: Union[bool, 'MatchArgsFromLeagueCommissioner']


class ClubAggregateMatchStatsArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    match: Union[bool, 'MatchArgsFromLeagueCommissioner']


class MatchAnalyticsArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    match: Union[bool, 'MatchArgsFromLeagueCommissioner']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromLeagueCommissioner']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueCommissioner']


class PlayerMatchArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']
    season: Union[bool, 'SeasonArgsFromLeagueCommissioner']
    contract: Union[bool, 'ContractArgsFromLeagueCommissioner']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueCommissioner']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromLeagueCommissioner']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromLeagueCommissioner']
    matches: Union[bool, 'FindManyMatchArgsFromLeagueCommissioner']


class PlayerSeasonArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueCommissioner']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromLeagueCommissioner']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromLeagueCommissioner']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromLeagueCommissioner']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromLeagueCommissioner']


class PlayerTeamSeasonArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueCommissioner']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueCommissioner']


class PlayerLeagueHistoryArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromLeagueCommissioner']
    trophySummary: Union[bool, 'PSNTrophyArgsFromLeagueCommissioner']
    games: Union[bool, 'FindManyPSNGameArgsFromLeagueCommissioner']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromLeagueCommissioner']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromLeagueCommissioner']


class PSNProfileArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueCommissioner']


class PSNAvatarArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueCommissioner']


class PSNTrophyArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueCommissioner']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromLeagueCommissioner']


class PSNGameArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueCommissioner']


class PSNSyncLogArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueCommissioner']
    game: Union[bool, 'PSNGameArgsFromLeagueCommissioner']


class PSNGameTrophiesArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    league: Union[bool, 'LeagueArgsFromLeagueCommissioner']
    division: Union[bool, 'DivisionArgsFromLeagueCommissioner']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromLeagueCommissioner']
    nhlAffiliate: Union[bool, 'TeamArgsFromLeagueCommissioner']
    ahlAffiliate: Union[bool, 'TeamArgsFromLeagueCommissioner']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromLeagueCommissioner']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromLeagueCommissioner']


class TeamArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    team: Union[bool, 'TeamArgsFromLeagueCommissioner']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueCommissioner']
    matches: Union[bool, 'FindManyMatchArgsFromLeagueCommissioner']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueCommissioner']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueCommissioner']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueCommissioner']
    bids: Union[bool, 'FindManyBidArgsFromLeagueCommissioner']
    managers: Union[bool, 'FindManyTeamManagerArgsFromLeagueCommissioner']


class TeamSeasonArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeagueCommissioner']


class TeamManagerArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    contract: Union[bool, 'ContractArgsFromLeagueCommissioner']
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeagueCommissioner']


class BidArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueCommissioner']
    bids: Union[bool, 'FindManyBidArgsFromLeagueCommissioner']


class ContractArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    notifications: Union[bool, 'FindManyNotificationArgsFromLeagueCommissioner']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromLeagueCommissioner']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromLeagueCommissioner']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromLeagueCommissioner']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromLeagueCommissioner']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromLeagueCommissioner']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromLeagueCommissioner']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromLeagueCommissioner']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromLeagueCommissioner']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromLeagueCommissioner']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromLeagueCommissioner']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromLeagueCommissioner']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromLeagueCommissioner']
    psnProfile: Union[bool, 'PSNProfileArgsFromLeagueCommissioner']


class UserArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']


class EaIdHistoryArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']


class SystemHistoryArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']


class GamertagHistoryArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromLeagueCommissioner(TypedDict, total=False):
    """Relational arguments for LeagueCommissioner"""
    user: Union[bool, 'UserArgsFromLeagueCommissioner']


class NotificationArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromLeagueCommissioner(TypedDict, total=False):
    """Arguments for LeagueCommissioner"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyLeagueCommissionerArgs = FindManyLeagueCommissionerArgsFromLeagueCommissioner
FindFirstLeagueCommissionerArgs = FindManyLeagueCommissionerArgsFromLeagueCommissioner


class LeagueCommissionerWhereInput(TypedDict, total=False):
    """LeagueCommissioner arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    leagueSeasonId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    leagueSeason: 'LeagueSeasonRelationFilter'

    # should be noted that AND and NOT should be Union['LeagueCommissionerWhereInput', List['LeagueCommissionerWhereInput']]
    # but this causes mypy to hang :/
    AND: List['LeagueCommissionerWhereInput']
    OR: List['LeagueCommissionerWhereInput']
    NOT: List['LeagueCommissionerWhereInput']



# aggregate LeagueCommissioner types


class LeagueCommissionerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """LeagueCommissioner arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    leagueSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LeagueCommissionerScalarWhereWithAggregatesInput']
    OR: List['LeagueCommissionerScalarWhereWithAggregatesInput']
    NOT: List['LeagueCommissionerScalarWhereWithAggregatesInput']



class LeagueCommissionerGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    leagueSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'LeagueCommissionerSumAggregateOutput'
    _avg: 'LeagueCommissionerAvgAggregateOutput'
    _min: 'LeagueCommissionerMinAggregateOutput'
    _max: 'LeagueCommissionerMaxAggregateOutput'
    _count: 'LeagueCommissionerCountAggregateOutput'


class LeagueCommissionerAvgAggregateOutput(TypedDict, total=False):
    """LeagueCommissioner output for aggregating averages"""


class LeagueCommissionerSumAggregateOutput(TypedDict, total=False):
    """LeagueCommissioner output for aggregating sums"""


class LeagueCommissionerScalarAggregateOutput(TypedDict, total=False):
    """LeagueCommissioner output including scalar fields"""
    id: _str
    userId: _str
    leagueSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


LeagueCommissionerMinAggregateOutput = LeagueCommissionerScalarAggregateOutput
LeagueCommissionerMaxAggregateOutput = LeagueCommissionerScalarAggregateOutput


class LeagueCommissionerMaxAggregateInput(TypedDict, total=False):
    """LeagueCommissioner input for aggregating by max"""
    id: bool
    userId: bool
    leagueSeasonId: bool
    createdAt: bool
    updatedAt: bool


class LeagueCommissionerMinAggregateInput(TypedDict, total=False):
    """LeagueCommissioner input for aggregating by min"""
    id: bool
    userId: bool
    leagueSeasonId: bool
    createdAt: bool
    updatedAt: bool


class LeagueCommissionerNumberAggregateInput(TypedDict, total=False):
    """LeagueCommissioner input for aggregating numbers"""


LeagueCommissionerAvgAggregateInput = LeagueCommissionerNumberAggregateInput
LeagueCommissionerSumAggregateInput = LeagueCommissionerNumberAggregateInput


LeagueCommissionerCountAggregateInput = TypedDict(
    'LeagueCommissionerCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'leagueSeasonId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

LeagueCommissionerCountAggregateOutput = TypedDict(
    'LeagueCommissionerCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'leagueSeasonId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


LeagueCommissionerKeys = Literal[
    'id',
    'userId',
    'leagueSeasonId',
    'createdAt',
    'updatedAt',
    'user',
    'leagueSeason',
]
LeagueCommissionerScalarFieldKeys = Literal[
    'id',
    'userId',
    'leagueSeasonId',
    'createdAt',
    'updatedAt',
]
LeagueCommissionerScalarFieldKeysT = TypeVar('LeagueCommissionerScalarFieldKeysT', bound=LeagueCommissionerScalarFieldKeys)

LeagueCommissionerRelationalFieldKeys = Literal[
        'user',
        'leagueSeason',
    ]

# LeagueBOG types

class LeagueBOGOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the LeagueBOG create method"""
    id: _str
    userId: _str
    leagueSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    leagueSeason: 'LeagueSeasonCreateNestedWithoutRelationsInput'


class LeagueBOGCreateInput(LeagueBOGOptionalCreateInput):
    """Required arguments to the LeagueBOG create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class LeagueBOGOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the LeagueBOG create method, without relations"""
    id: _str
    userId: _str
    leagueSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class LeagueBOGCreateWithoutRelationsInput(LeagueBOGOptionalCreateWithoutRelationsInput):
    """Required arguments to the LeagueBOG create method, without relations"""

class LeagueBOGConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'LeagueBOGCreateWithoutRelationsInput'
    where: 'LeagueBOGWhereUniqueInput'

class LeagueBOGCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'LeagueBOGCreateWithoutRelationsInput'
    connect: 'LeagueBOGWhereUniqueInput'
    connect_or_create: 'LeagueBOGConnectOrCreateWithoutRelationsInput'


class LeagueBOGCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['LeagueBOGCreateWithoutRelationsInput', List['LeagueBOGCreateWithoutRelationsInput']]
    connect: Union['LeagueBOGWhereUniqueInput', List['LeagueBOGWhereUniqueInput']]
    connect_or_create: Union['LeagueBOGConnectOrCreateWithoutRelationsInput', List['LeagueBOGConnectOrCreateWithoutRelationsInput']]

_LeagueBOGWhereUnique_id_Input = TypedDict(
    '_LeagueBOGWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_LeagueBOGCompounduserId_leagueSeasonIdKeyInner = TypedDict(
    '_LeagueBOGCompounduserId_leagueSeasonIdKeyInner',
    {
        'userId': '_str',
        'leagueSeasonId': '_str',
    },
    total=True
)

_LeagueBOGCompounduserId_leagueSeasonIdKey = TypedDict(
    '_LeagueBOGCompounduserId_leagueSeasonIdKey',
    {
        'userId_leagueSeasonId': '_LeagueBOGCompounduserId_leagueSeasonIdKeyInner',
    },
    total=True
)

LeagueBOGWhereUniqueInput = Union[
    '_LeagueBOGWhereUnique_id_Input',
    '_LeagueBOGCompounduserId_leagueSeasonIdKey',
]


class LeagueBOGUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    leagueSeason: 'LeagueSeasonUpdateOneWithoutRelationsInput'


class LeagueBOGUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class LeagueBOGUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['LeagueBOGCreateWithoutRelationsInput']
    connect: List['LeagueBOGWhereUniqueInput']
    connect_or_create: List['LeagueBOGConnectOrCreateWithoutRelationsInput']
    set: List['LeagueBOGWhereUniqueInput']
    disconnect: List['LeagueBOGWhereUniqueInput']
    delete: List['LeagueBOGWhereUniqueInput']

    # TODO
    # update: List['LeagueBOGUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['LeagueBOGUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['LeagueBOGScalarWhereInput']
    # upsert: List['LeagueBOGUpserteWithWhereUniqueWithoutRelationsInput']


class LeagueBOGUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'LeagueBOGCreateWithoutRelationsInput'
    connect: 'LeagueBOGWhereUniqueInput'
    connect_or_create: 'LeagueBOGConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'LeagueBOGUpdateInput'
    # upsert: 'LeagueBOGUpsertWithoutRelationsInput'


class LeagueBOGUpsertInput(TypedDict):
    create: 'LeagueBOGCreateInput'
    update: 'LeagueBOGUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_LeagueBOG_id_OrderByInput = TypedDict(
    '_LeagueBOG_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_LeagueBOG_userId_OrderByInput = TypedDict(
    '_LeagueBOG_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_LeagueBOG_leagueSeasonId_OrderByInput = TypedDict(
    '_LeagueBOG_leagueSeasonId_OrderByInput',
    {
        'leagueSeasonId': 'SortOrder',
    },
    total=True
)

_LeagueBOG_createdAt_OrderByInput = TypedDict(
    '_LeagueBOG_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_LeagueBOG_updatedAt_OrderByInput = TypedDict(
    '_LeagueBOG_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_LeagueBOG_RelevanceInner = TypedDict(
    '_LeagueBOG_RelevanceInner',
    {
        'fields': 'List[LeagueBOGScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_LeagueBOG_RelevanceOrderByInput = TypedDict(
    '_LeagueBOG_RelevanceOrderByInput',
    {
        '_relevance': '_LeagueBOG_RelevanceInner',
    },
    total=True
)

LeagueBOGOrderByInput = Union[
    '_LeagueBOG_id_OrderByInput',
    '_LeagueBOG_userId_OrderByInput',
    '_LeagueBOG_leagueSeasonId_OrderByInput',
    '_LeagueBOG_createdAt_OrderByInput',
    '_LeagueBOG_updatedAt_OrderByInput',
    '_LeagueBOG_RelevanceOrderByInput',
]



# recursive LeagueBOG types
# TODO: cleanup these types



LeagueBOGRelationFilter = TypedDict(
    'LeagueBOGRelationFilter',
    {
        'is': 'LeagueBOGWhereInput',
        'is_not': 'LeagueBOGWhereInput',
    },
    total=False,
)


class LeagueBOGListRelationFilter(TypedDict, total=False):
    some: 'LeagueBOGWhereInput'
    none: 'LeagueBOGWhereInput'
    every: 'LeagueBOGWhereInput'


class LeagueBOGInclude(TypedDict, total=False):
    """LeagueBOG relational arguments"""
    user: Union[bool, 'UserArgsFromLeagueBOG']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueBOG']


class ForumPostIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    author: Union[bool, 'UserArgsFromLeagueBOG']
    comments: Union[bool, 'FindManyForumCommentArgsFromLeagueBOG']
    reactions: Union[bool, 'FindManyForumReactionArgsFromLeagueBOG']
    followers: Union[bool, 'FindManyForumFollowerArgsFromLeagueBOG']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromLeagueBOG']


class ForumPostArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']
    post: Union[bool, 'ForumPostArgsFromLeagueBOG']
    comment: Union[bool, 'ForumCommentArgsFromLeagueBOG']


class ForumReactionArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']
    post: Union[bool, 'ForumPostArgsFromLeagueBOG']


class ForumFollowerArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']
    post: Union[bool, 'ForumPostArgsFromLeagueBOG']


class ForumPostSubscriptionArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    author: Union[bool, 'UserArgsFromLeagueBOG']
    post: Union[bool, 'ForumPostArgsFromLeagueBOG']
    quotedComment: Union[bool, 'ForumCommentArgsFromLeagueBOG']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromLeagueBOG']
    reactions: Union[bool, 'FindManyForumReactionArgsFromLeagueBOG']


class ForumCommentArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    parentLeague: Union[bool, 'LeagueArgsFromLeagueBOG']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromLeagueBOG']
    conferences: Union[bool, 'FindManyConferenceArgsFromLeagueBOG']
    divisions: Union[bool, 'FindManyDivisionArgsFromLeagueBOG']
    teams: Union[bool, 'FindManyTeamArgsFromLeagueBOG']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromLeagueBOG']


class LeagueArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    league: Union[bool, 'LeagueArgsFromLeagueBOG']
    season: Union[bool, 'SeasonArgsFromLeagueBOG']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromLeagueBOG']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromLeagueBOG']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromLeagueBOG']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromLeagueBOG']


class LeagueSeasonArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    league: Union[bool, 'LeagueArgsFromLeagueBOG']
    divisions: Union[bool, 'FindManyDivisionArgsFromLeagueBOG']


class ConferenceArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    conference: Union[bool, 'ConferenceArgsFromLeagueBOG']
    league: Union[bool, 'LeagueArgsFromLeagueBOG']
    teams: Union[bool, 'FindManyTeamArgsFromLeagueBOG']


class DivisionArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromLeagueBOG']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromLeagueBOG']


class SeasonArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueBOG']


class LeagueCommissionerArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueBOG']


class LeagueBOGArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeagueBOG']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromLeagueBOG']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromLeagueBOG']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromLeagueBOG']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromLeagueBOG']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromLeagueBOG']


class MatchArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromLeagueBOG']
    match: Union[bool, 'MatchArgsFromLeagueBOG']


class ClubMatchStatsArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    customKit: Union[bool, 'CustomKitArgsFromLeagueBOG']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromLeagueBOG']


class ClubMatchStatsDetailsArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromLeagueBOG']


class CustomKitArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    match: Union[bool, 'MatchArgsFromLeagueBOG']


class ClubAggregateMatchStatsArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    match: Union[bool, 'MatchArgsFromLeagueBOG']


class MatchAnalyticsArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    match: Union[bool, 'MatchArgsFromLeagueBOG']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromLeagueBOG']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueBOG']


class PlayerMatchArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']
    season: Union[bool, 'SeasonArgsFromLeagueBOG']
    contract: Union[bool, 'ContractArgsFromLeagueBOG']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueBOG']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromLeagueBOG']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromLeagueBOG']
    matches: Union[bool, 'FindManyMatchArgsFromLeagueBOG']


class PlayerSeasonArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueBOG']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromLeagueBOG']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromLeagueBOG']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromLeagueBOG']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromLeagueBOG']


class PlayerTeamSeasonArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueBOG']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueBOG']


class PlayerLeagueHistoryArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromLeagueBOG']
    trophySummary: Union[bool, 'PSNTrophyArgsFromLeagueBOG']
    games: Union[bool, 'FindManyPSNGameArgsFromLeagueBOG']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromLeagueBOG']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromLeagueBOG']


class PSNProfileArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueBOG']


class PSNAvatarArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueBOG']


class PSNTrophyArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueBOG']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromLeagueBOG']


class PSNGameArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueBOG']


class PSNSyncLogArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    profile: Union[bool, 'PSNProfileArgsFromLeagueBOG']
    game: Union[bool, 'PSNGameArgsFromLeagueBOG']


class PSNGameTrophiesArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    league: Union[bool, 'LeagueArgsFromLeagueBOG']
    division: Union[bool, 'DivisionArgsFromLeagueBOG']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromLeagueBOG']
    nhlAffiliate: Union[bool, 'TeamArgsFromLeagueBOG']
    ahlAffiliate: Union[bool, 'TeamArgsFromLeagueBOG']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromLeagueBOG']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromLeagueBOG']


class TeamArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    team: Union[bool, 'TeamArgsFromLeagueBOG']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromLeagueBOG']
    matches: Union[bool, 'FindManyMatchArgsFromLeagueBOG']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueBOG']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueBOG']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromLeagueBOG']
    bids: Union[bool, 'FindManyBidArgsFromLeagueBOG']
    managers: Union[bool, 'FindManyTeamManagerArgsFromLeagueBOG']


class TeamSeasonArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeagueBOG']


class TeamManagerArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    contract: Union[bool, 'ContractArgsFromLeagueBOG']
    teamSeason: Union[bool, 'TeamSeasonArgsFromLeagueBOG']


class BidArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromLeagueBOG']
    bids: Union[bool, 'FindManyBidArgsFromLeagueBOG']


class ContractArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    notifications: Union[bool, 'FindManyNotificationArgsFromLeagueBOG']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromLeagueBOG']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromLeagueBOG']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromLeagueBOG']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromLeagueBOG']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromLeagueBOG']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromLeagueBOG']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromLeagueBOG']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromLeagueBOG']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromLeagueBOG']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromLeagueBOG']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromLeagueBOG']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromLeagueBOG']
    psnProfile: Union[bool, 'PSNProfileArgsFromLeagueBOG']


class UserArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']


class EaIdHistoryArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']


class SystemHistoryArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']


class GamertagHistoryArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromLeagueBOG(TypedDict, total=False):
    """Relational arguments for LeagueBOG"""
    user: Union[bool, 'UserArgsFromLeagueBOG']


class NotificationArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromLeagueBOG(TypedDict, total=False):
    """Arguments for LeagueBOG"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyLeagueBOGArgs = FindManyLeagueBOGArgsFromLeagueBOG
FindFirstLeagueBOGArgs = FindManyLeagueBOGArgsFromLeagueBOG


class LeagueBOGWhereInput(TypedDict, total=False):
    """LeagueBOG arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    leagueSeasonId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    leagueSeason: 'LeagueSeasonRelationFilter'

    # should be noted that AND and NOT should be Union['LeagueBOGWhereInput', List['LeagueBOGWhereInput']]
    # but this causes mypy to hang :/
    AND: List['LeagueBOGWhereInput']
    OR: List['LeagueBOGWhereInput']
    NOT: List['LeagueBOGWhereInput']



# aggregate LeagueBOG types


class LeagueBOGScalarWhereWithAggregatesInput(TypedDict, total=False):
    """LeagueBOG arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    leagueSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['LeagueBOGScalarWhereWithAggregatesInput']
    OR: List['LeagueBOGScalarWhereWithAggregatesInput']
    NOT: List['LeagueBOGScalarWhereWithAggregatesInput']



class LeagueBOGGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    leagueSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'LeagueBOGSumAggregateOutput'
    _avg: 'LeagueBOGAvgAggregateOutput'
    _min: 'LeagueBOGMinAggregateOutput'
    _max: 'LeagueBOGMaxAggregateOutput'
    _count: 'LeagueBOGCountAggregateOutput'


class LeagueBOGAvgAggregateOutput(TypedDict, total=False):
    """LeagueBOG output for aggregating averages"""


class LeagueBOGSumAggregateOutput(TypedDict, total=False):
    """LeagueBOG output for aggregating sums"""


class LeagueBOGScalarAggregateOutput(TypedDict, total=False):
    """LeagueBOG output including scalar fields"""
    id: _str
    userId: _str
    leagueSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


LeagueBOGMinAggregateOutput = LeagueBOGScalarAggregateOutput
LeagueBOGMaxAggregateOutput = LeagueBOGScalarAggregateOutput


class LeagueBOGMaxAggregateInput(TypedDict, total=False):
    """LeagueBOG input for aggregating by max"""
    id: bool
    userId: bool
    leagueSeasonId: bool
    createdAt: bool
    updatedAt: bool


class LeagueBOGMinAggregateInput(TypedDict, total=False):
    """LeagueBOG input for aggregating by min"""
    id: bool
    userId: bool
    leagueSeasonId: bool
    createdAt: bool
    updatedAt: bool


class LeagueBOGNumberAggregateInput(TypedDict, total=False):
    """LeagueBOG input for aggregating numbers"""


LeagueBOGAvgAggregateInput = LeagueBOGNumberAggregateInput
LeagueBOGSumAggregateInput = LeagueBOGNumberAggregateInput


LeagueBOGCountAggregateInput = TypedDict(
    'LeagueBOGCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'leagueSeasonId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

LeagueBOGCountAggregateOutput = TypedDict(
    'LeagueBOGCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'leagueSeasonId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


LeagueBOGKeys = Literal[
    'id',
    'userId',
    'leagueSeasonId',
    'createdAt',
    'updatedAt',
    'user',
    'leagueSeason',
]
LeagueBOGScalarFieldKeys = Literal[
    'id',
    'userId',
    'leagueSeasonId',
    'createdAt',
    'updatedAt',
]
LeagueBOGScalarFieldKeysT = TypeVar('LeagueBOGScalarFieldKeysT', bound=LeagueBOGScalarFieldKeys)

LeagueBOGRelationalFieldKeys = Literal[
        'user',
        'leagueSeason',
    ]

# Match types

class MatchOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Match create method"""
    id: _str
    teamSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    teamSeason: 'TeamSeasonCreateNestedWithoutRelationsInput'
    clubMatchStats: 'ClubMatchStatsCreateManyNestedWithoutRelationsInput'
    playerStats: 'PlayerMatchCreateManyNestedWithoutRelationsInput'
    clubAggregateMatchStats: 'ClubAggregateMatchStatsCreateManyNestedWithoutRelationsInput'
    matchAnalytics: 'MatchAnalyticsCreateManyNestedWithoutRelationsInput'
    playerSeasons: 'PlayerSeasonCreateManyNestedWithoutRelationsInput'


class MatchCreateInput(MatchOptionalCreateInput):
    """Required arguments to the Match create method"""
    eaMatchId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MatchOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Match create method, without relations"""
    id: _str
    teamSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MatchCreateWithoutRelationsInput(MatchOptionalCreateWithoutRelationsInput):
    """Required arguments to the Match create method, without relations"""
    eaMatchId: _str

class MatchConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MatchCreateWithoutRelationsInput'
    where: 'MatchWhereUniqueInput'

class MatchCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MatchCreateWithoutRelationsInput'
    connect: 'MatchWhereUniqueInput'
    connect_or_create: 'MatchConnectOrCreateWithoutRelationsInput'


class MatchCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MatchCreateWithoutRelationsInput', List['MatchCreateWithoutRelationsInput']]
    connect: Union['MatchWhereUniqueInput', List['MatchWhereUniqueInput']]
    connect_or_create: Union['MatchConnectOrCreateWithoutRelationsInput', List['MatchConnectOrCreateWithoutRelationsInput']]

_MatchWhereUnique_id_Input = TypedDict(
    '_MatchWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MatchWhereUniqueInput = _MatchWhereUnique_id_Input


class MatchUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    eaMatchId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    teamSeason: 'TeamSeasonUpdateOneWithoutRelationsInput'
    clubMatchStats: 'ClubMatchStatsUpdateManyWithoutRelationsInput'
    playerStats: 'PlayerMatchUpdateManyWithoutRelationsInput'
    clubAggregateMatchStats: 'ClubAggregateMatchStatsUpdateManyWithoutRelationsInput'
    matchAnalytics: 'MatchAnalyticsUpdateManyWithoutRelationsInput'
    playerSeasons: 'PlayerSeasonUpdateManyWithoutRelationsInput'


class MatchUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    eaMatchId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class MatchUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MatchCreateWithoutRelationsInput']
    connect: List['MatchWhereUniqueInput']
    connect_or_create: List['MatchConnectOrCreateWithoutRelationsInput']
    set: List['MatchWhereUniqueInput']
    disconnect: List['MatchWhereUniqueInput']
    delete: List['MatchWhereUniqueInput']

    # TODO
    # update: List['MatchUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MatchUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MatchScalarWhereInput']
    # upsert: List['MatchUpserteWithWhereUniqueWithoutRelationsInput']


class MatchUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MatchCreateWithoutRelationsInput'
    connect: 'MatchWhereUniqueInput'
    connect_or_create: 'MatchConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MatchUpdateInput'
    # upsert: 'MatchUpsertWithoutRelationsInput'


class MatchUpsertInput(TypedDict):
    create: 'MatchCreateInput'
    update: 'MatchUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Match_id_OrderByInput = TypedDict(
    '_Match_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Match_teamSeasonId_OrderByInput = TypedDict(
    '_Match_teamSeasonId_OrderByInput',
    {
        'teamSeasonId': 'SortOrder',
    },
    total=True
)

_Match_eaMatchId_OrderByInput = TypedDict(
    '_Match_eaMatchId_OrderByInput',
    {
        'eaMatchId': 'SortOrder',
    },
    total=True
)

_Match_createdAt_OrderByInput = TypedDict(
    '_Match_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Match_updatedAt_OrderByInput = TypedDict(
    '_Match_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Match_RelevanceInner = TypedDict(
    '_Match_RelevanceInner',
    {
        'fields': 'List[MatchScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Match_RelevanceOrderByInput = TypedDict(
    '_Match_RelevanceOrderByInput',
    {
        '_relevance': '_Match_RelevanceInner',
    },
    total=True
)

MatchOrderByInput = Union[
    '_Match_id_OrderByInput',
    '_Match_teamSeasonId_OrderByInput',
    '_Match_eaMatchId_OrderByInput',
    '_Match_createdAt_OrderByInput',
    '_Match_updatedAt_OrderByInput',
    '_Match_RelevanceOrderByInput',
]



# recursive Match types
# TODO: cleanup these types



MatchRelationFilter = TypedDict(
    'MatchRelationFilter',
    {
        'is': 'MatchWhereInput',
        'is_not': 'MatchWhereInput',
    },
    total=False,
)


class MatchListRelationFilter(TypedDict, total=False):
    some: 'MatchWhereInput'
    none: 'MatchWhereInput'
    every: 'MatchWhereInput'


class MatchInclude(TypedDict, total=False):
    """Match relational arguments"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromMatch']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromMatch']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromMatch']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromMatch']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromMatch']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromMatch']


class ForumPostIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    author: Union[bool, 'UserArgsFromMatch']
    comments: Union[bool, 'FindManyForumCommentArgsFromMatch']
    reactions: Union[bool, 'FindManyForumReactionArgsFromMatch']
    followers: Union[bool, 'FindManyForumFollowerArgsFromMatch']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromMatch']


class ForumPostArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']
    post: Union[bool, 'ForumPostArgsFromMatch']
    comment: Union[bool, 'ForumCommentArgsFromMatch']


class ForumReactionArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']
    post: Union[bool, 'ForumPostArgsFromMatch']


class ForumFollowerArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']
    post: Union[bool, 'ForumPostArgsFromMatch']


class ForumPostSubscriptionArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    author: Union[bool, 'UserArgsFromMatch']
    post: Union[bool, 'ForumPostArgsFromMatch']
    quotedComment: Union[bool, 'ForumCommentArgsFromMatch']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromMatch']
    reactions: Union[bool, 'FindManyForumReactionArgsFromMatch']


class ForumCommentArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    parentLeague: Union[bool, 'LeagueArgsFromMatch']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromMatch']
    conferences: Union[bool, 'FindManyConferenceArgsFromMatch']
    divisions: Union[bool, 'FindManyDivisionArgsFromMatch']
    teams: Union[bool, 'FindManyTeamArgsFromMatch']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromMatch']


class LeagueArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    league: Union[bool, 'LeagueArgsFromMatch']
    season: Union[bool, 'SeasonArgsFromMatch']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromMatch']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromMatch']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromMatch']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromMatch']


class LeagueSeasonArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    league: Union[bool, 'LeagueArgsFromMatch']
    divisions: Union[bool, 'FindManyDivisionArgsFromMatch']


class ConferenceArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    conference: Union[bool, 'ConferenceArgsFromMatch']
    league: Union[bool, 'LeagueArgsFromMatch']
    teams: Union[bool, 'FindManyTeamArgsFromMatch']


class DivisionArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromMatch']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromMatch']


class SeasonArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromMatch']


class LeagueCommissionerArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromMatch']


class LeagueBOGArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromMatch']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromMatch']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromMatch']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromMatch']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromMatch']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromMatch']


class MatchArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromMatch']
    match: Union[bool, 'MatchArgsFromMatch']


class ClubMatchStatsArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    customKit: Union[bool, 'CustomKitArgsFromMatch']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromMatch']


class ClubMatchStatsDetailsArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromMatch']


class CustomKitArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    match: Union[bool, 'MatchArgsFromMatch']


class ClubAggregateMatchStatsArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    match: Union[bool, 'MatchArgsFromMatch']


class MatchAnalyticsArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    match: Union[bool, 'MatchArgsFromMatch']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromMatch']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromMatch']


class PlayerMatchArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']
    season: Union[bool, 'SeasonArgsFromMatch']
    contract: Union[bool, 'ContractArgsFromMatch']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromMatch']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromMatch']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromMatch']
    matches: Union[bool, 'FindManyMatchArgsFromMatch']


class PlayerSeasonArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromMatch']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromMatch']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromMatch']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromMatch']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromMatch']


class PlayerTeamSeasonArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromMatch']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromMatch']


class PlayerLeagueHistoryArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromMatch']
    trophySummary: Union[bool, 'PSNTrophyArgsFromMatch']
    games: Union[bool, 'FindManyPSNGameArgsFromMatch']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromMatch']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromMatch']


class PSNProfileArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    profile: Union[bool, 'PSNProfileArgsFromMatch']


class PSNAvatarArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    profile: Union[bool, 'PSNProfileArgsFromMatch']


class PSNTrophyArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    profile: Union[bool, 'PSNProfileArgsFromMatch']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromMatch']


class PSNGameArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    profile: Union[bool, 'PSNProfileArgsFromMatch']


class PSNSyncLogArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    profile: Union[bool, 'PSNProfileArgsFromMatch']
    game: Union[bool, 'PSNGameArgsFromMatch']


class PSNGameTrophiesArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    league: Union[bool, 'LeagueArgsFromMatch']
    division: Union[bool, 'DivisionArgsFromMatch']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromMatch']
    nhlAffiliate: Union[bool, 'TeamArgsFromMatch']
    ahlAffiliate: Union[bool, 'TeamArgsFromMatch']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromMatch']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromMatch']


class TeamArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    team: Union[bool, 'TeamArgsFromMatch']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromMatch']
    matches: Union[bool, 'FindManyMatchArgsFromMatch']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromMatch']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromMatch']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromMatch']
    bids: Union[bool, 'FindManyBidArgsFromMatch']
    managers: Union[bool, 'FindManyTeamManagerArgsFromMatch']


class TeamSeasonArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']
    teamSeason: Union[bool, 'TeamSeasonArgsFromMatch']


class TeamManagerArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    contract: Union[bool, 'ContractArgsFromMatch']
    teamSeason: Union[bool, 'TeamSeasonArgsFromMatch']


class BidArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromMatch']
    bids: Union[bool, 'FindManyBidArgsFromMatch']


class ContractArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    notifications: Union[bool, 'FindManyNotificationArgsFromMatch']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromMatch']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromMatch']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromMatch']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromMatch']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromMatch']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromMatch']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromMatch']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromMatch']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromMatch']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromMatch']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromMatch']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromMatch']
    psnProfile: Union[bool, 'PSNProfileArgsFromMatch']


class UserArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']


class EaIdHistoryArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']


class SystemHistoryArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']


class GamertagHistoryArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromMatch(TypedDict, total=False):
    """Relational arguments for Match"""
    user: Union[bool, 'UserArgsFromMatch']


class NotificationArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromMatch(TypedDict, total=False):
    """Arguments for Match"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyMatchArgs = FindManyMatchArgsFromMatch
FindFirstMatchArgs = FindManyMatchArgsFromMatch


class MatchWhereInput(TypedDict, total=False):
    """Match arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    teamSeasonId: Union[_str, 'types.StringFilter']
    eaMatchId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    teamSeason: 'TeamSeasonRelationFilter'
    clubMatchStats: 'ClubMatchStatsListRelationFilter'
    playerStats: 'PlayerMatchListRelationFilter'
    clubAggregateMatchStats: 'ClubAggregateMatchStatsListRelationFilter'
    matchAnalytics: 'MatchAnalyticsListRelationFilter'
    playerSeasons: 'PlayerSeasonListRelationFilter'

    # should be noted that AND and NOT should be Union['MatchWhereInput', List['MatchWhereInput']]
    # but this causes mypy to hang :/
    AND: List['MatchWhereInput']
    OR: List['MatchWhereInput']
    NOT: List['MatchWhereInput']



# aggregate Match types


class MatchScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Match arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    teamSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    eaMatchId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MatchScalarWhereWithAggregatesInput']
    OR: List['MatchScalarWhereWithAggregatesInput']
    NOT: List['MatchScalarWhereWithAggregatesInput']



class MatchGroupByOutput(TypedDict, total=False):
    id: _str
    teamSeasonId: _str
    eaMatchId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'MatchSumAggregateOutput'
    _avg: 'MatchAvgAggregateOutput'
    _min: 'MatchMinAggregateOutput'
    _max: 'MatchMaxAggregateOutput'
    _count: 'MatchCountAggregateOutput'


class MatchAvgAggregateOutput(TypedDict, total=False):
    """Match output for aggregating averages"""


class MatchSumAggregateOutput(TypedDict, total=False):
    """Match output for aggregating sums"""


class MatchScalarAggregateOutput(TypedDict, total=False):
    """Match output including scalar fields"""
    id: _str
    teamSeasonId: _str
    eaMatchId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


MatchMinAggregateOutput = MatchScalarAggregateOutput
MatchMaxAggregateOutput = MatchScalarAggregateOutput


class MatchMaxAggregateInput(TypedDict, total=False):
    """Match input for aggregating by max"""
    id: bool
    teamSeasonId: bool
    eaMatchId: bool
    createdAt: bool
    updatedAt: bool


class MatchMinAggregateInput(TypedDict, total=False):
    """Match input for aggregating by min"""
    id: bool
    teamSeasonId: bool
    eaMatchId: bool
    createdAt: bool
    updatedAt: bool


class MatchNumberAggregateInput(TypedDict, total=False):
    """Match input for aggregating numbers"""


MatchAvgAggregateInput = MatchNumberAggregateInput
MatchSumAggregateInput = MatchNumberAggregateInput


MatchCountAggregateInput = TypedDict(
    'MatchCountAggregateInput',
    {
        'id': bool,
        'teamSeasonId': bool,
        'eaMatchId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

MatchCountAggregateOutput = TypedDict(
    'MatchCountAggregateOutput',
    {
        'id': int,
        'teamSeasonId': int,
        'eaMatchId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


MatchKeys = Literal[
    'id',
    'teamSeasonId',
    'eaMatchId',
    'createdAt',
    'updatedAt',
    'teamSeason',
    'clubMatchStats',
    'playerStats',
    'clubAggregateMatchStats',
    'matchAnalytics',
    'playerSeasons',
]
MatchScalarFieldKeys = Literal[
    'id',
    'teamSeasonId',
    'eaMatchId',
    'createdAt',
    'updatedAt',
]
MatchScalarFieldKeysT = TypeVar('MatchScalarFieldKeysT', bound=MatchScalarFieldKeys)

MatchRelationalFieldKeys = Literal[
        'teamSeason',
        'clubMatchStats',
        'playerStats',
        'clubAggregateMatchStats',
        'matchAnalytics',
        'playerSeasons',
    ]

# ClubMatchStats types

class ClubMatchStatsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ClubMatchStats create method"""
    id: _str
    matchId: _str
    details: 'ClubMatchStatsDetailsCreateNestedWithoutRelationsInput'
    match: 'MatchCreateNestedWithoutRelationsInput'


class ClubMatchStatsCreateInput(ClubMatchStatsOptionalCreateInput):
    """Required arguments to the ClubMatchStats create method"""
    clubDivision: _int
    cNhlOnlineGameType: _str
    goalsAgainstRaw: _int
    goalsForRaw: _int
    losses: _int
    result: _int
    score: _int
    scoreString: _str
    winnerByDnf: _int
    winnerByGoalieDnf: _int
    memberString: _str
    passesAttempted: _int
    passesCompleted: _int
    powerplayGoals: _int
    powerplayOpportunities: _int
    shots: _int
    teamArtAbbr: _str
    teamSide: _int
    timeOnAttack: _int
    opponentClubId: _str
    opponentScore: _int
    opponentTeamArtAbbr: _str
    goals: _int
    goalsAgainst: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ClubMatchStatsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ClubMatchStats create method, without relations"""
    id: _str
    matchId: _str


class ClubMatchStatsCreateWithoutRelationsInput(ClubMatchStatsOptionalCreateWithoutRelationsInput):
    """Required arguments to the ClubMatchStats create method, without relations"""
    clubDivision: _int
    cNhlOnlineGameType: _str
    goalsAgainstRaw: _int
    goalsForRaw: _int
    losses: _int
    result: _int
    score: _int
    scoreString: _str
    winnerByDnf: _int
    winnerByGoalieDnf: _int
    memberString: _str
    passesAttempted: _int
    passesCompleted: _int
    powerplayGoals: _int
    powerplayOpportunities: _int
    shots: _int
    teamArtAbbr: _str
    teamSide: _int
    timeOnAttack: _int
    opponentClubId: _str
    opponentScore: _int
    opponentTeamArtAbbr: _str
    goals: _int
    goalsAgainst: _int

class ClubMatchStatsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ClubMatchStatsCreateWithoutRelationsInput'
    where: 'ClubMatchStatsWhereUniqueInput'

class ClubMatchStatsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ClubMatchStatsCreateWithoutRelationsInput'
    connect: 'ClubMatchStatsWhereUniqueInput'
    connect_or_create: 'ClubMatchStatsConnectOrCreateWithoutRelationsInput'


class ClubMatchStatsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ClubMatchStatsCreateWithoutRelationsInput', List['ClubMatchStatsCreateWithoutRelationsInput']]
    connect: Union['ClubMatchStatsWhereUniqueInput', List['ClubMatchStatsWhereUniqueInput']]
    connect_or_create: Union['ClubMatchStatsConnectOrCreateWithoutRelationsInput', List['ClubMatchStatsConnectOrCreateWithoutRelationsInput']]

_ClubMatchStatsWhereUnique_id_Input = TypedDict(
    '_ClubMatchStatsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ClubMatchStatsWhereUniqueInput = _ClubMatchStatsWhereUnique_id_Input


class ClubMatchStatsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    clubDivision: Union[AtomicIntInput, _int]
    cNhlOnlineGameType: _str
    goalsAgainstRaw: Union[AtomicIntInput, _int]
    goalsForRaw: Union[AtomicIntInput, _int]
    losses: Union[AtomicIntInput, _int]
    result: Union[AtomicIntInput, _int]
    score: Union[AtomicIntInput, _int]
    scoreString: _str
    winnerByDnf: Union[AtomicIntInput, _int]
    winnerByGoalieDnf: Union[AtomicIntInput, _int]
    memberString: _str
    passesAttempted: Union[AtomicIntInput, _int]
    passesCompleted: Union[AtomicIntInput, _int]
    powerplayGoals: Union[AtomicIntInput, _int]
    powerplayOpportunities: Union[AtomicIntInput, _int]
    shots: Union[AtomicIntInput, _int]
    teamArtAbbr: _str
    teamSide: Union[AtomicIntInput, _int]
    timeOnAttack: Union[AtomicIntInput, _int]
    opponentClubId: _str
    opponentScore: Union[AtomicIntInput, _int]
    opponentTeamArtAbbr: _str
    goals: Union[AtomicIntInput, _int]
    goalsAgainst: Union[AtomicIntInput, _int]
    details: 'ClubMatchStatsDetailsUpdateOneWithoutRelationsInput'
    match: 'MatchUpdateOneWithoutRelationsInput'


class ClubMatchStatsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    clubDivision: Union[AtomicIntInput, _int]
    cNhlOnlineGameType: _str
    goalsAgainstRaw: Union[AtomicIntInput, _int]
    goalsForRaw: Union[AtomicIntInput, _int]
    losses: Union[AtomicIntInput, _int]
    result: Union[AtomicIntInput, _int]
    score: Union[AtomicIntInput, _int]
    scoreString: _str
    winnerByDnf: Union[AtomicIntInput, _int]
    winnerByGoalieDnf: Union[AtomicIntInput, _int]
    memberString: _str
    passesAttempted: Union[AtomicIntInput, _int]
    passesCompleted: Union[AtomicIntInput, _int]
    powerplayGoals: Union[AtomicIntInput, _int]
    powerplayOpportunities: Union[AtomicIntInput, _int]
    shots: Union[AtomicIntInput, _int]
    teamArtAbbr: _str
    teamSide: Union[AtomicIntInput, _int]
    timeOnAttack: Union[AtomicIntInput, _int]
    opponentClubId: _str
    opponentScore: Union[AtomicIntInput, _int]
    opponentTeamArtAbbr: _str
    goals: Union[AtomicIntInput, _int]
    goalsAgainst: Union[AtomicIntInput, _int]


class ClubMatchStatsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ClubMatchStatsCreateWithoutRelationsInput']
    connect: List['ClubMatchStatsWhereUniqueInput']
    connect_or_create: List['ClubMatchStatsConnectOrCreateWithoutRelationsInput']
    set: List['ClubMatchStatsWhereUniqueInput']
    disconnect: List['ClubMatchStatsWhereUniqueInput']
    delete: List['ClubMatchStatsWhereUniqueInput']

    # TODO
    # update: List['ClubMatchStatsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ClubMatchStatsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ClubMatchStatsScalarWhereInput']
    # upsert: List['ClubMatchStatsUpserteWithWhereUniqueWithoutRelationsInput']


class ClubMatchStatsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ClubMatchStatsCreateWithoutRelationsInput'
    connect: 'ClubMatchStatsWhereUniqueInput'
    connect_or_create: 'ClubMatchStatsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ClubMatchStatsUpdateInput'
    # upsert: 'ClubMatchStatsUpsertWithoutRelationsInput'


class ClubMatchStatsUpsertInput(TypedDict):
    create: 'ClubMatchStatsCreateInput'
    update: 'ClubMatchStatsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ClubMatchStats_id_OrderByInput = TypedDict(
    '_ClubMatchStats_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_matchId_OrderByInput = TypedDict(
    '_ClubMatchStats_matchId_OrderByInput',
    {
        'matchId': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_clubDivision_OrderByInput = TypedDict(
    '_ClubMatchStats_clubDivision_OrderByInput',
    {
        'clubDivision': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_cNhlOnlineGameType_OrderByInput = TypedDict(
    '_ClubMatchStats_cNhlOnlineGameType_OrderByInput',
    {
        'cNhlOnlineGameType': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_goalsAgainstRaw_OrderByInput = TypedDict(
    '_ClubMatchStats_goalsAgainstRaw_OrderByInput',
    {
        'goalsAgainstRaw': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_goalsForRaw_OrderByInput = TypedDict(
    '_ClubMatchStats_goalsForRaw_OrderByInput',
    {
        'goalsForRaw': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_losses_OrderByInput = TypedDict(
    '_ClubMatchStats_losses_OrderByInput',
    {
        'losses': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_result_OrderByInput = TypedDict(
    '_ClubMatchStats_result_OrderByInput',
    {
        'result': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_score_OrderByInput = TypedDict(
    '_ClubMatchStats_score_OrderByInput',
    {
        'score': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_scoreString_OrderByInput = TypedDict(
    '_ClubMatchStats_scoreString_OrderByInput',
    {
        'scoreString': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_winnerByDnf_OrderByInput = TypedDict(
    '_ClubMatchStats_winnerByDnf_OrderByInput',
    {
        'winnerByDnf': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_winnerByGoalieDnf_OrderByInput = TypedDict(
    '_ClubMatchStats_winnerByGoalieDnf_OrderByInput',
    {
        'winnerByGoalieDnf': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_memberString_OrderByInput = TypedDict(
    '_ClubMatchStats_memberString_OrderByInput',
    {
        'memberString': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_passesAttempted_OrderByInput = TypedDict(
    '_ClubMatchStats_passesAttempted_OrderByInput',
    {
        'passesAttempted': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_passesCompleted_OrderByInput = TypedDict(
    '_ClubMatchStats_passesCompleted_OrderByInput',
    {
        'passesCompleted': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_powerplayGoals_OrderByInput = TypedDict(
    '_ClubMatchStats_powerplayGoals_OrderByInput',
    {
        'powerplayGoals': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_powerplayOpportunities_OrderByInput = TypedDict(
    '_ClubMatchStats_powerplayOpportunities_OrderByInput',
    {
        'powerplayOpportunities': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_shots_OrderByInput = TypedDict(
    '_ClubMatchStats_shots_OrderByInput',
    {
        'shots': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_teamArtAbbr_OrderByInput = TypedDict(
    '_ClubMatchStats_teamArtAbbr_OrderByInput',
    {
        'teamArtAbbr': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_teamSide_OrderByInput = TypedDict(
    '_ClubMatchStats_teamSide_OrderByInput',
    {
        'teamSide': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_timeOnAttack_OrderByInput = TypedDict(
    '_ClubMatchStats_timeOnAttack_OrderByInput',
    {
        'timeOnAttack': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_opponentClubId_OrderByInput = TypedDict(
    '_ClubMatchStats_opponentClubId_OrderByInput',
    {
        'opponentClubId': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_opponentScore_OrderByInput = TypedDict(
    '_ClubMatchStats_opponentScore_OrderByInput',
    {
        'opponentScore': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_opponentTeamArtAbbr_OrderByInput = TypedDict(
    '_ClubMatchStats_opponentTeamArtAbbr_OrderByInput',
    {
        'opponentTeamArtAbbr': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_goals_OrderByInput = TypedDict(
    '_ClubMatchStats_goals_OrderByInput',
    {
        'goals': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_goalsAgainst_OrderByInput = TypedDict(
    '_ClubMatchStats_goalsAgainst_OrderByInput',
    {
        'goalsAgainst': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_RelevanceInner = TypedDict(
    '_ClubMatchStats_RelevanceInner',
    {
        'fields': 'List[ClubMatchStatsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ClubMatchStats_RelevanceOrderByInput = TypedDict(
    '_ClubMatchStats_RelevanceOrderByInput',
    {
        '_relevance': '_ClubMatchStats_RelevanceInner',
    },
    total=True
)

ClubMatchStatsOrderByInput = Union[
    '_ClubMatchStats_id_OrderByInput',
    '_ClubMatchStats_matchId_OrderByInput',
    '_ClubMatchStats_clubDivision_OrderByInput',
    '_ClubMatchStats_cNhlOnlineGameType_OrderByInput',
    '_ClubMatchStats_goalsAgainstRaw_OrderByInput',
    '_ClubMatchStats_goalsForRaw_OrderByInput',
    '_ClubMatchStats_losses_OrderByInput',
    '_ClubMatchStats_result_OrderByInput',
    '_ClubMatchStats_score_OrderByInput',
    '_ClubMatchStats_scoreString_OrderByInput',
    '_ClubMatchStats_winnerByDnf_OrderByInput',
    '_ClubMatchStats_winnerByGoalieDnf_OrderByInput',
    '_ClubMatchStats_memberString_OrderByInput',
    '_ClubMatchStats_passesAttempted_OrderByInput',
    '_ClubMatchStats_passesCompleted_OrderByInput',
    '_ClubMatchStats_powerplayGoals_OrderByInput',
    '_ClubMatchStats_powerplayOpportunities_OrderByInput',
    '_ClubMatchStats_shots_OrderByInput',
    '_ClubMatchStats_teamArtAbbr_OrderByInput',
    '_ClubMatchStats_teamSide_OrderByInput',
    '_ClubMatchStats_timeOnAttack_OrderByInput',
    '_ClubMatchStats_opponentClubId_OrderByInput',
    '_ClubMatchStats_opponentScore_OrderByInput',
    '_ClubMatchStats_opponentTeamArtAbbr_OrderByInput',
    '_ClubMatchStats_goals_OrderByInput',
    '_ClubMatchStats_goalsAgainst_OrderByInput',
    '_ClubMatchStats_RelevanceOrderByInput',
]



# recursive ClubMatchStats types
# TODO: cleanup these types



ClubMatchStatsRelationFilter = TypedDict(
    'ClubMatchStatsRelationFilter',
    {
        'is': 'ClubMatchStatsWhereInput',
        'is_not': 'ClubMatchStatsWhereInput',
    },
    total=False,
)


class ClubMatchStatsListRelationFilter(TypedDict, total=False):
    some: 'ClubMatchStatsWhereInput'
    none: 'ClubMatchStatsWhereInput'
    every: 'ClubMatchStatsWhereInput'


class ClubMatchStatsInclude(TypedDict, total=False):
    """ClubMatchStats relational arguments"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromClubMatchStats']
    match: Union[bool, 'MatchArgsFromClubMatchStats']


class ForumPostIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    author: Union[bool, 'UserArgsFromClubMatchStats']
    comments: Union[bool, 'FindManyForumCommentArgsFromClubMatchStats']
    reactions: Union[bool, 'FindManyForumReactionArgsFromClubMatchStats']
    followers: Union[bool, 'FindManyForumFollowerArgsFromClubMatchStats']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromClubMatchStats']


class ForumPostArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']
    post: Union[bool, 'ForumPostArgsFromClubMatchStats']
    comment: Union[bool, 'ForumCommentArgsFromClubMatchStats']


class ForumReactionArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']
    post: Union[bool, 'ForumPostArgsFromClubMatchStats']


class ForumFollowerArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']
    post: Union[bool, 'ForumPostArgsFromClubMatchStats']


class ForumPostSubscriptionArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    author: Union[bool, 'UserArgsFromClubMatchStats']
    post: Union[bool, 'ForumPostArgsFromClubMatchStats']
    quotedComment: Union[bool, 'ForumCommentArgsFromClubMatchStats']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromClubMatchStats']
    reactions: Union[bool, 'FindManyForumReactionArgsFromClubMatchStats']


class ForumCommentArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    parentLeague: Union[bool, 'LeagueArgsFromClubMatchStats']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromClubMatchStats']
    conferences: Union[bool, 'FindManyConferenceArgsFromClubMatchStats']
    divisions: Union[bool, 'FindManyDivisionArgsFromClubMatchStats']
    teams: Union[bool, 'FindManyTeamArgsFromClubMatchStats']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromClubMatchStats']


class LeagueArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    league: Union[bool, 'LeagueArgsFromClubMatchStats']
    season: Union[bool, 'SeasonArgsFromClubMatchStats']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromClubMatchStats']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromClubMatchStats']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromClubMatchStats']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromClubMatchStats']


class LeagueSeasonArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    league: Union[bool, 'LeagueArgsFromClubMatchStats']
    divisions: Union[bool, 'FindManyDivisionArgsFromClubMatchStats']


class ConferenceArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    conference: Union[bool, 'ConferenceArgsFromClubMatchStats']
    league: Union[bool, 'LeagueArgsFromClubMatchStats']
    teams: Union[bool, 'FindManyTeamArgsFromClubMatchStats']


class DivisionArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromClubMatchStats']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromClubMatchStats']


class SeasonArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubMatchStats']


class LeagueCommissionerArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubMatchStats']


class LeagueBOGArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromClubMatchStats']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromClubMatchStats']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromClubMatchStats']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromClubMatchStats']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromClubMatchStats']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromClubMatchStats']


class MatchArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromClubMatchStats']
    match: Union[bool, 'MatchArgsFromClubMatchStats']


class ClubMatchStatsArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    customKit: Union[bool, 'CustomKitArgsFromClubMatchStats']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromClubMatchStats']


class ClubMatchStatsDetailsArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromClubMatchStats']


class CustomKitArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    match: Union[bool, 'MatchArgsFromClubMatchStats']


class ClubAggregateMatchStatsArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    match: Union[bool, 'MatchArgsFromClubMatchStats']


class MatchAnalyticsArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    match: Union[bool, 'MatchArgsFromClubMatchStats']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromClubMatchStats']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubMatchStats']


class PlayerMatchArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']
    season: Union[bool, 'SeasonArgsFromClubMatchStats']
    contract: Union[bool, 'ContractArgsFromClubMatchStats']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubMatchStats']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromClubMatchStats']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromClubMatchStats']
    matches: Union[bool, 'FindManyMatchArgsFromClubMatchStats']


class PlayerSeasonArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubMatchStats']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromClubMatchStats']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromClubMatchStats']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromClubMatchStats']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromClubMatchStats']


class PlayerTeamSeasonArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubMatchStats']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubMatchStats']


class PlayerLeagueHistoryArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromClubMatchStats']
    trophySummary: Union[bool, 'PSNTrophyArgsFromClubMatchStats']
    games: Union[bool, 'FindManyPSNGameArgsFromClubMatchStats']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromClubMatchStats']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromClubMatchStats']


class PSNProfileArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    profile: Union[bool, 'PSNProfileArgsFromClubMatchStats']


class PSNAvatarArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    profile: Union[bool, 'PSNProfileArgsFromClubMatchStats']


class PSNTrophyArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    profile: Union[bool, 'PSNProfileArgsFromClubMatchStats']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromClubMatchStats']


class PSNGameArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    profile: Union[bool, 'PSNProfileArgsFromClubMatchStats']


class PSNSyncLogArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    profile: Union[bool, 'PSNProfileArgsFromClubMatchStats']
    game: Union[bool, 'PSNGameArgsFromClubMatchStats']


class PSNGameTrophiesArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    league: Union[bool, 'LeagueArgsFromClubMatchStats']
    division: Union[bool, 'DivisionArgsFromClubMatchStats']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromClubMatchStats']
    nhlAffiliate: Union[bool, 'TeamArgsFromClubMatchStats']
    ahlAffiliate: Union[bool, 'TeamArgsFromClubMatchStats']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromClubMatchStats']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromClubMatchStats']


class TeamArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    team: Union[bool, 'TeamArgsFromClubMatchStats']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubMatchStats']
    matches: Union[bool, 'FindManyMatchArgsFromClubMatchStats']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubMatchStats']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubMatchStats']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubMatchStats']
    bids: Union[bool, 'FindManyBidArgsFromClubMatchStats']
    managers: Union[bool, 'FindManyTeamManagerArgsFromClubMatchStats']


class TeamSeasonArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']
    teamSeason: Union[bool, 'TeamSeasonArgsFromClubMatchStats']


class TeamManagerArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    contract: Union[bool, 'ContractArgsFromClubMatchStats']
    teamSeason: Union[bool, 'TeamSeasonArgsFromClubMatchStats']


class BidArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubMatchStats']
    bids: Union[bool, 'FindManyBidArgsFromClubMatchStats']


class ContractArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    notifications: Union[bool, 'FindManyNotificationArgsFromClubMatchStats']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromClubMatchStats']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromClubMatchStats']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromClubMatchStats']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromClubMatchStats']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromClubMatchStats']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromClubMatchStats']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromClubMatchStats']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromClubMatchStats']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromClubMatchStats']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromClubMatchStats']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromClubMatchStats']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromClubMatchStats']
    psnProfile: Union[bool, 'PSNProfileArgsFromClubMatchStats']


class UserArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']


class EaIdHistoryArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']


class SystemHistoryArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']


class GamertagHistoryArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromClubMatchStats(TypedDict, total=False):
    """Relational arguments for ClubMatchStats"""
    user: Union[bool, 'UserArgsFromClubMatchStats']


class NotificationArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromClubMatchStats(TypedDict, total=False):
    """Arguments for ClubMatchStats"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyClubMatchStatsArgs = FindManyClubMatchStatsArgsFromClubMatchStats
FindFirstClubMatchStatsArgs = FindManyClubMatchStatsArgsFromClubMatchStats


class ClubMatchStatsWhereInput(TypedDict, total=False):
    """ClubMatchStats arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    matchId: Union[_str, 'types.StringFilter']
    clubDivision: Union[_int, 'types.IntFilter']
    cNhlOnlineGameType: Union[_str, 'types.StringFilter']
    goalsAgainstRaw: Union[_int, 'types.IntFilter']
    goalsForRaw: Union[_int, 'types.IntFilter']
    losses: Union[_int, 'types.IntFilter']
    result: Union[_int, 'types.IntFilter']
    score: Union[_int, 'types.IntFilter']
    scoreString: Union[_str, 'types.StringFilter']
    winnerByDnf: Union[_int, 'types.IntFilter']
    winnerByGoalieDnf: Union[_int, 'types.IntFilter']
    memberString: Union[_str, 'types.StringFilter']
    passesAttempted: Union[_int, 'types.IntFilter']
    passesCompleted: Union[_int, 'types.IntFilter']
    powerplayGoals: Union[_int, 'types.IntFilter']
    powerplayOpportunities: Union[_int, 'types.IntFilter']
    shots: Union[_int, 'types.IntFilter']
    teamArtAbbr: Union[_str, 'types.StringFilter']
    teamSide: Union[_int, 'types.IntFilter']
    timeOnAttack: Union[_int, 'types.IntFilter']
    opponentClubId: Union[_str, 'types.StringFilter']
    opponentScore: Union[_int, 'types.IntFilter']
    opponentTeamArtAbbr: Union[_str, 'types.StringFilter']
    goals: Union[_int, 'types.IntFilter']
    goalsAgainst: Union[_int, 'types.IntFilter']
    details: 'ClubMatchStatsDetailsRelationFilter'
    match: 'MatchRelationFilter'

    # should be noted that AND and NOT should be Union['ClubMatchStatsWhereInput', List['ClubMatchStatsWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ClubMatchStatsWhereInput']
    OR: List['ClubMatchStatsWhereInput']
    NOT: List['ClubMatchStatsWhereInput']



# aggregate ClubMatchStats types


class ClubMatchStatsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ClubMatchStats arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    matchId: Union[_str, 'types.StringWithAggregatesFilter']
    clubDivision: Union[_int, 'types.IntWithAggregatesFilter']
    cNhlOnlineGameType: Union[_str, 'types.StringWithAggregatesFilter']
    goalsAgainstRaw: Union[_int, 'types.IntWithAggregatesFilter']
    goalsForRaw: Union[_int, 'types.IntWithAggregatesFilter']
    losses: Union[_int, 'types.IntWithAggregatesFilter']
    result: Union[_int, 'types.IntWithAggregatesFilter']
    score: Union[_int, 'types.IntWithAggregatesFilter']
    scoreString: Union[_str, 'types.StringWithAggregatesFilter']
    winnerByDnf: Union[_int, 'types.IntWithAggregatesFilter']
    winnerByGoalieDnf: Union[_int, 'types.IntWithAggregatesFilter']
    memberString: Union[_str, 'types.StringWithAggregatesFilter']
    passesAttempted: Union[_int, 'types.IntWithAggregatesFilter']
    passesCompleted: Union[_int, 'types.IntWithAggregatesFilter']
    powerplayGoals: Union[_int, 'types.IntWithAggregatesFilter']
    powerplayOpportunities: Union[_int, 'types.IntWithAggregatesFilter']
    shots: Union[_int, 'types.IntWithAggregatesFilter']
    teamArtAbbr: Union[_str, 'types.StringWithAggregatesFilter']
    teamSide: Union[_int, 'types.IntWithAggregatesFilter']
    timeOnAttack: Union[_int, 'types.IntWithAggregatesFilter']
    opponentClubId: Union[_str, 'types.StringWithAggregatesFilter']
    opponentScore: Union[_int, 'types.IntWithAggregatesFilter']
    opponentTeamArtAbbr: Union[_str, 'types.StringWithAggregatesFilter']
    goals: Union[_int, 'types.IntWithAggregatesFilter']
    goalsAgainst: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ClubMatchStatsScalarWhereWithAggregatesInput']
    OR: List['ClubMatchStatsScalarWhereWithAggregatesInput']
    NOT: List['ClubMatchStatsScalarWhereWithAggregatesInput']



class ClubMatchStatsGroupByOutput(TypedDict, total=False):
    id: _str
    matchId: _str
    clubDivision: _int
    cNhlOnlineGameType: _str
    goalsAgainstRaw: _int
    goalsForRaw: _int
    losses: _int
    result: _int
    score: _int
    scoreString: _str
    winnerByDnf: _int
    winnerByGoalieDnf: _int
    memberString: _str
    passesAttempted: _int
    passesCompleted: _int
    powerplayGoals: _int
    powerplayOpportunities: _int
    shots: _int
    teamArtAbbr: _str
    teamSide: _int
    timeOnAttack: _int
    opponentClubId: _str
    opponentScore: _int
    opponentTeamArtAbbr: _str
    goals: _int
    goalsAgainst: _int
    _sum: 'ClubMatchStatsSumAggregateOutput'
    _avg: 'ClubMatchStatsAvgAggregateOutput'
    _min: 'ClubMatchStatsMinAggregateOutput'
    _max: 'ClubMatchStatsMaxAggregateOutput'
    _count: 'ClubMatchStatsCountAggregateOutput'


class ClubMatchStatsAvgAggregateOutput(TypedDict, total=False):
    """ClubMatchStats output for aggregating averages"""
    clubDivision: float
    goalsAgainstRaw: float
    goalsForRaw: float
    losses: float
    result: float
    score: float
    winnerByDnf: float
    winnerByGoalieDnf: float
    passesAttempted: float
    passesCompleted: float
    powerplayGoals: float
    powerplayOpportunities: float
    shots: float
    teamSide: float
    timeOnAttack: float
    opponentScore: float
    goals: float
    goalsAgainst: float


class ClubMatchStatsSumAggregateOutput(TypedDict, total=False):
    """ClubMatchStats output for aggregating sums"""
    clubDivision: _int
    goalsAgainstRaw: _int
    goalsForRaw: _int
    losses: _int
    result: _int
    score: _int
    winnerByDnf: _int
    winnerByGoalieDnf: _int
    passesAttempted: _int
    passesCompleted: _int
    powerplayGoals: _int
    powerplayOpportunities: _int
    shots: _int
    teamSide: _int
    timeOnAttack: _int
    opponentScore: _int
    goals: _int
    goalsAgainst: _int


class ClubMatchStatsScalarAggregateOutput(TypedDict, total=False):
    """ClubMatchStats output including scalar fields"""
    id: _str
    matchId: _str
    clubDivision: _int
    cNhlOnlineGameType: _str
    goalsAgainstRaw: _int
    goalsForRaw: _int
    losses: _int
    result: _int
    score: _int
    scoreString: _str
    winnerByDnf: _int
    winnerByGoalieDnf: _int
    memberString: _str
    passesAttempted: _int
    passesCompleted: _int
    powerplayGoals: _int
    powerplayOpportunities: _int
    shots: _int
    teamArtAbbr: _str
    teamSide: _int
    timeOnAttack: _int
    opponentClubId: _str
    opponentScore: _int
    opponentTeamArtAbbr: _str
    goals: _int
    goalsAgainst: _int


ClubMatchStatsMinAggregateOutput = ClubMatchStatsScalarAggregateOutput
ClubMatchStatsMaxAggregateOutput = ClubMatchStatsScalarAggregateOutput


class ClubMatchStatsMaxAggregateInput(TypedDict, total=False):
    """ClubMatchStats input for aggregating by max"""
    id: bool
    matchId: bool
    clubDivision: bool
    cNhlOnlineGameType: bool
    goalsAgainstRaw: bool
    goalsForRaw: bool
    losses: bool
    result: bool
    score: bool
    scoreString: bool
    winnerByDnf: bool
    winnerByGoalieDnf: bool
    memberString: bool
    passesAttempted: bool
    passesCompleted: bool
    powerplayGoals: bool
    powerplayOpportunities: bool
    shots: bool
    teamArtAbbr: bool
    teamSide: bool
    timeOnAttack: bool
    opponentClubId: bool
    opponentScore: bool
    opponentTeamArtAbbr: bool
    goals: bool
    goalsAgainst: bool


class ClubMatchStatsMinAggregateInput(TypedDict, total=False):
    """ClubMatchStats input for aggregating by min"""
    id: bool
    matchId: bool
    clubDivision: bool
    cNhlOnlineGameType: bool
    goalsAgainstRaw: bool
    goalsForRaw: bool
    losses: bool
    result: bool
    score: bool
    scoreString: bool
    winnerByDnf: bool
    winnerByGoalieDnf: bool
    memberString: bool
    passesAttempted: bool
    passesCompleted: bool
    powerplayGoals: bool
    powerplayOpportunities: bool
    shots: bool
    teamArtAbbr: bool
    teamSide: bool
    timeOnAttack: bool
    opponentClubId: bool
    opponentScore: bool
    opponentTeamArtAbbr: bool
    goals: bool
    goalsAgainst: bool


class ClubMatchStatsNumberAggregateInput(TypedDict, total=False):
    """ClubMatchStats input for aggregating numbers"""
    clubDivision: bool
    goalsAgainstRaw: bool
    goalsForRaw: bool
    losses: bool
    result: bool
    score: bool
    winnerByDnf: bool
    winnerByGoalieDnf: bool
    passesAttempted: bool
    passesCompleted: bool
    powerplayGoals: bool
    powerplayOpportunities: bool
    shots: bool
    teamSide: bool
    timeOnAttack: bool
    opponentScore: bool
    goals: bool
    goalsAgainst: bool


ClubMatchStatsAvgAggregateInput = ClubMatchStatsNumberAggregateInput
ClubMatchStatsSumAggregateInput = ClubMatchStatsNumberAggregateInput


ClubMatchStatsCountAggregateInput = TypedDict(
    'ClubMatchStatsCountAggregateInput',
    {
        'id': bool,
        'matchId': bool,
        'clubDivision': bool,
        'cNhlOnlineGameType': bool,
        'goalsAgainstRaw': bool,
        'goalsForRaw': bool,
        'losses': bool,
        'result': bool,
        'score': bool,
        'scoreString': bool,
        'winnerByDnf': bool,
        'winnerByGoalieDnf': bool,
        'memberString': bool,
        'passesAttempted': bool,
        'passesCompleted': bool,
        'powerplayGoals': bool,
        'powerplayOpportunities': bool,
        'shots': bool,
        'teamArtAbbr': bool,
        'teamSide': bool,
        'timeOnAttack': bool,
        'opponentClubId': bool,
        'opponentScore': bool,
        'opponentTeamArtAbbr': bool,
        'goals': bool,
        'goalsAgainst': bool,
        '_all': bool,
    },
    total=False,
)

ClubMatchStatsCountAggregateOutput = TypedDict(
    'ClubMatchStatsCountAggregateOutput',
    {
        'id': int,
        'matchId': int,
        'clubDivision': int,
        'cNhlOnlineGameType': int,
        'goalsAgainstRaw': int,
        'goalsForRaw': int,
        'losses': int,
        'result': int,
        'score': int,
        'scoreString': int,
        'winnerByDnf': int,
        'winnerByGoalieDnf': int,
        'memberString': int,
        'passesAttempted': int,
        'passesCompleted': int,
        'powerplayGoals': int,
        'powerplayOpportunities': int,
        'shots': int,
        'teamArtAbbr': int,
        'teamSide': int,
        'timeOnAttack': int,
        'opponentClubId': int,
        'opponentScore': int,
        'opponentTeamArtAbbr': int,
        'goals': int,
        'goalsAgainst': int,
        '_all': int,
    },
    total=False,
)


ClubMatchStatsKeys = Literal[
    'id',
    'matchId',
    'clubDivision',
    'cNhlOnlineGameType',
    'goalsAgainstRaw',
    'goalsForRaw',
    'losses',
    'result',
    'score',
    'scoreString',
    'winnerByDnf',
    'winnerByGoalieDnf',
    'memberString',
    'passesAttempted',
    'passesCompleted',
    'powerplayGoals',
    'powerplayOpportunities',
    'shots',
    'teamArtAbbr',
    'teamSide',
    'timeOnAttack',
    'opponentClubId',
    'opponentScore',
    'opponentTeamArtAbbr',
    'goals',
    'goalsAgainst',
    'details',
    'match',
]
ClubMatchStatsScalarFieldKeys = Literal[
    'id',
    'matchId',
    'clubDivision',
    'cNhlOnlineGameType',
    'goalsAgainstRaw',
    'goalsForRaw',
    'losses',
    'result',
    'score',
    'scoreString',
    'winnerByDnf',
    'winnerByGoalieDnf',
    'memberString',
    'passesAttempted',
    'passesCompleted',
    'powerplayGoals',
    'powerplayOpportunities',
    'shots',
    'teamArtAbbr',
    'teamSide',
    'timeOnAttack',
    'opponentClubId',
    'opponentScore',
    'opponentTeamArtAbbr',
    'goals',
    'goalsAgainst',
]
ClubMatchStatsScalarFieldKeysT = TypeVar('ClubMatchStatsScalarFieldKeysT', bound=ClubMatchStatsScalarFieldKeys)

ClubMatchStatsRelationalFieldKeys = Literal[
        'details',
        'match',
    ]

# ClubMatchStatsDetails types

class ClubMatchStatsDetailsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ClubMatchStatsDetails create method"""
    id: _str
    clubMatchStatsId: _str
    customKit: 'CustomKitCreateNestedWithoutRelationsInput'
    clubMatchStats: 'ClubMatchStatsCreateNestedWithoutRelationsInput'


class ClubMatchStatsDetailsCreateInput(ClubMatchStatsDetailsOptionalCreateInput):
    """Required arguments to the ClubMatchStatsDetails create method"""
    name: _str
    eaClubId: _int
    regionId: _int
    teamId: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ClubMatchStatsDetailsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ClubMatchStatsDetails create method, without relations"""
    id: _str
    clubMatchStatsId: _str


class ClubMatchStatsDetailsCreateWithoutRelationsInput(ClubMatchStatsDetailsOptionalCreateWithoutRelationsInput):
    """Required arguments to the ClubMatchStatsDetails create method, without relations"""
    name: _str
    eaClubId: _int
    regionId: _int
    teamId: _int

class ClubMatchStatsDetailsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ClubMatchStatsDetailsCreateWithoutRelationsInput'
    where: 'ClubMatchStatsDetailsWhereUniqueInput'

class ClubMatchStatsDetailsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ClubMatchStatsDetailsCreateWithoutRelationsInput'
    connect: 'ClubMatchStatsDetailsWhereUniqueInput'
    connect_or_create: 'ClubMatchStatsDetailsConnectOrCreateWithoutRelationsInput'


class ClubMatchStatsDetailsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ClubMatchStatsDetailsCreateWithoutRelationsInput', List['ClubMatchStatsDetailsCreateWithoutRelationsInput']]
    connect: Union['ClubMatchStatsDetailsWhereUniqueInput', List['ClubMatchStatsDetailsWhereUniqueInput']]
    connect_or_create: Union['ClubMatchStatsDetailsConnectOrCreateWithoutRelationsInput', List['ClubMatchStatsDetailsConnectOrCreateWithoutRelationsInput']]

_ClubMatchStatsDetailsWhereUnique_id_Input = TypedDict(
    '_ClubMatchStatsDetailsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_ClubMatchStatsDetailsWhereUnique_clubMatchStatsId_Input = TypedDict(
    '_ClubMatchStatsDetailsWhereUnique_clubMatchStatsId_Input',
    {
        'clubMatchStatsId': '_str',
    },
    total=True
)

ClubMatchStatsDetailsWhereUniqueInput = Union[
    '_ClubMatchStatsDetailsWhereUnique_id_Input',
    '_ClubMatchStatsDetailsWhereUnique_clubMatchStatsId_Input',
]


class ClubMatchStatsDetailsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    eaClubId: Union[AtomicIntInput, _int]
    regionId: Union[AtomicIntInput, _int]
    teamId: Union[AtomicIntInput, _int]
    customKit: 'CustomKitUpdateOneWithoutRelationsInput'
    clubMatchStats: 'ClubMatchStatsUpdateOneWithoutRelationsInput'


class ClubMatchStatsDetailsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    eaClubId: Union[AtomicIntInput, _int]
    regionId: Union[AtomicIntInput, _int]
    teamId: Union[AtomicIntInput, _int]


class ClubMatchStatsDetailsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ClubMatchStatsDetailsCreateWithoutRelationsInput']
    connect: List['ClubMatchStatsDetailsWhereUniqueInput']
    connect_or_create: List['ClubMatchStatsDetailsConnectOrCreateWithoutRelationsInput']
    set: List['ClubMatchStatsDetailsWhereUniqueInput']
    disconnect: List['ClubMatchStatsDetailsWhereUniqueInput']
    delete: List['ClubMatchStatsDetailsWhereUniqueInput']

    # TODO
    # update: List['ClubMatchStatsDetailsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ClubMatchStatsDetailsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ClubMatchStatsDetailsScalarWhereInput']
    # upsert: List['ClubMatchStatsDetailsUpserteWithWhereUniqueWithoutRelationsInput']


class ClubMatchStatsDetailsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ClubMatchStatsDetailsCreateWithoutRelationsInput'
    connect: 'ClubMatchStatsDetailsWhereUniqueInput'
    connect_or_create: 'ClubMatchStatsDetailsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ClubMatchStatsDetailsUpdateInput'
    # upsert: 'ClubMatchStatsDetailsUpsertWithoutRelationsInput'


class ClubMatchStatsDetailsUpsertInput(TypedDict):
    create: 'ClubMatchStatsDetailsCreateInput'
    update: 'ClubMatchStatsDetailsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ClubMatchStatsDetails_id_OrderByInput = TypedDict(
    '_ClubMatchStatsDetails_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ClubMatchStatsDetails_clubMatchStatsId_OrderByInput = TypedDict(
    '_ClubMatchStatsDetails_clubMatchStatsId_OrderByInput',
    {
        'clubMatchStatsId': 'SortOrder',
    },
    total=True
)

_ClubMatchStatsDetails_name_OrderByInput = TypedDict(
    '_ClubMatchStatsDetails_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_ClubMatchStatsDetails_eaClubId_OrderByInput = TypedDict(
    '_ClubMatchStatsDetails_eaClubId_OrderByInput',
    {
        'eaClubId': 'SortOrder',
    },
    total=True
)

_ClubMatchStatsDetails_regionId_OrderByInput = TypedDict(
    '_ClubMatchStatsDetails_regionId_OrderByInput',
    {
        'regionId': 'SortOrder',
    },
    total=True
)

_ClubMatchStatsDetails_teamId_OrderByInput = TypedDict(
    '_ClubMatchStatsDetails_teamId_OrderByInput',
    {
        'teamId': 'SortOrder',
    },
    total=True
)

_ClubMatchStatsDetails_RelevanceInner = TypedDict(
    '_ClubMatchStatsDetails_RelevanceInner',
    {
        'fields': 'List[ClubMatchStatsDetailsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ClubMatchStatsDetails_RelevanceOrderByInput = TypedDict(
    '_ClubMatchStatsDetails_RelevanceOrderByInput',
    {
        '_relevance': '_ClubMatchStatsDetails_RelevanceInner',
    },
    total=True
)

ClubMatchStatsDetailsOrderByInput = Union[
    '_ClubMatchStatsDetails_id_OrderByInput',
    '_ClubMatchStatsDetails_clubMatchStatsId_OrderByInput',
    '_ClubMatchStatsDetails_name_OrderByInput',
    '_ClubMatchStatsDetails_eaClubId_OrderByInput',
    '_ClubMatchStatsDetails_regionId_OrderByInput',
    '_ClubMatchStatsDetails_teamId_OrderByInput',
    '_ClubMatchStatsDetails_RelevanceOrderByInput',
]



# recursive ClubMatchStatsDetails types
# TODO: cleanup these types



ClubMatchStatsDetailsRelationFilter = TypedDict(
    'ClubMatchStatsDetailsRelationFilter',
    {
        'is': 'ClubMatchStatsDetailsWhereInput',
        'is_not': 'ClubMatchStatsDetailsWhereInput',
    },
    total=False,
)


class ClubMatchStatsDetailsListRelationFilter(TypedDict, total=False):
    some: 'ClubMatchStatsDetailsWhereInput'
    none: 'ClubMatchStatsDetailsWhereInput'
    every: 'ClubMatchStatsDetailsWhereInput'


class ClubMatchStatsDetailsInclude(TypedDict, total=False):
    """ClubMatchStatsDetails relational arguments"""
    customKit: Union[bool, 'CustomKitArgsFromClubMatchStatsDetails']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromClubMatchStatsDetails']


class ForumPostIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    author: Union[bool, 'UserArgsFromClubMatchStatsDetails']
    comments: Union[bool, 'FindManyForumCommentArgsFromClubMatchStatsDetails']
    reactions: Union[bool, 'FindManyForumReactionArgsFromClubMatchStatsDetails']
    followers: Union[bool, 'FindManyForumFollowerArgsFromClubMatchStatsDetails']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromClubMatchStatsDetails']


class ForumPostArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']
    post: Union[bool, 'ForumPostArgsFromClubMatchStatsDetails']
    comment: Union[bool, 'ForumCommentArgsFromClubMatchStatsDetails']


class ForumReactionArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']
    post: Union[bool, 'ForumPostArgsFromClubMatchStatsDetails']


class ForumFollowerArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']
    post: Union[bool, 'ForumPostArgsFromClubMatchStatsDetails']


class ForumPostSubscriptionArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    author: Union[bool, 'UserArgsFromClubMatchStatsDetails']
    post: Union[bool, 'ForumPostArgsFromClubMatchStatsDetails']
    quotedComment: Union[bool, 'ForumCommentArgsFromClubMatchStatsDetails']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromClubMatchStatsDetails']
    reactions: Union[bool, 'FindManyForumReactionArgsFromClubMatchStatsDetails']


class ForumCommentArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    parentLeague: Union[bool, 'LeagueArgsFromClubMatchStatsDetails']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromClubMatchStatsDetails']
    conferences: Union[bool, 'FindManyConferenceArgsFromClubMatchStatsDetails']
    divisions: Union[bool, 'FindManyDivisionArgsFromClubMatchStatsDetails']
    teams: Union[bool, 'FindManyTeamArgsFromClubMatchStatsDetails']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromClubMatchStatsDetails']


class LeagueArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    league: Union[bool, 'LeagueArgsFromClubMatchStatsDetails']
    season: Union[bool, 'SeasonArgsFromClubMatchStatsDetails']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromClubMatchStatsDetails']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromClubMatchStatsDetails']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromClubMatchStatsDetails']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromClubMatchStatsDetails']


class LeagueSeasonArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    league: Union[bool, 'LeagueArgsFromClubMatchStatsDetails']
    divisions: Union[bool, 'FindManyDivisionArgsFromClubMatchStatsDetails']


class ConferenceArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    conference: Union[bool, 'ConferenceArgsFromClubMatchStatsDetails']
    league: Union[bool, 'LeagueArgsFromClubMatchStatsDetails']
    teams: Union[bool, 'FindManyTeamArgsFromClubMatchStatsDetails']


class DivisionArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromClubMatchStatsDetails']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromClubMatchStatsDetails']


class SeasonArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubMatchStatsDetails']


class LeagueCommissionerArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubMatchStatsDetails']


class LeagueBOGArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromClubMatchStatsDetails']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromClubMatchStatsDetails']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromClubMatchStatsDetails']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromClubMatchStatsDetails']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromClubMatchStatsDetails']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromClubMatchStatsDetails']


class MatchArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromClubMatchStatsDetails']
    match: Union[bool, 'MatchArgsFromClubMatchStatsDetails']


class ClubMatchStatsArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    customKit: Union[bool, 'CustomKitArgsFromClubMatchStatsDetails']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromClubMatchStatsDetails']


class ClubMatchStatsDetailsArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromClubMatchStatsDetails']


class CustomKitArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    match: Union[bool, 'MatchArgsFromClubMatchStatsDetails']


class ClubAggregateMatchStatsArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    match: Union[bool, 'MatchArgsFromClubMatchStatsDetails']


class MatchAnalyticsArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    match: Union[bool, 'MatchArgsFromClubMatchStatsDetails']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromClubMatchStatsDetails']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubMatchStatsDetails']


class PlayerMatchArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']
    season: Union[bool, 'SeasonArgsFromClubMatchStatsDetails']
    contract: Union[bool, 'ContractArgsFromClubMatchStatsDetails']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubMatchStatsDetails']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromClubMatchStatsDetails']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromClubMatchStatsDetails']
    matches: Union[bool, 'FindManyMatchArgsFromClubMatchStatsDetails']


class PlayerSeasonArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubMatchStatsDetails']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromClubMatchStatsDetails']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromClubMatchStatsDetails']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromClubMatchStatsDetails']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromClubMatchStatsDetails']


class PlayerTeamSeasonArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubMatchStatsDetails']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubMatchStatsDetails']


class PlayerLeagueHistoryArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromClubMatchStatsDetails']
    trophySummary: Union[bool, 'PSNTrophyArgsFromClubMatchStatsDetails']
    games: Union[bool, 'FindManyPSNGameArgsFromClubMatchStatsDetails']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromClubMatchStatsDetails']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromClubMatchStatsDetails']


class PSNProfileArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    profile: Union[bool, 'PSNProfileArgsFromClubMatchStatsDetails']


class PSNAvatarArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    profile: Union[bool, 'PSNProfileArgsFromClubMatchStatsDetails']


class PSNTrophyArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    profile: Union[bool, 'PSNProfileArgsFromClubMatchStatsDetails']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromClubMatchStatsDetails']


class PSNGameArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    profile: Union[bool, 'PSNProfileArgsFromClubMatchStatsDetails']


class PSNSyncLogArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    profile: Union[bool, 'PSNProfileArgsFromClubMatchStatsDetails']
    game: Union[bool, 'PSNGameArgsFromClubMatchStatsDetails']


class PSNGameTrophiesArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    league: Union[bool, 'LeagueArgsFromClubMatchStatsDetails']
    division: Union[bool, 'DivisionArgsFromClubMatchStatsDetails']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromClubMatchStatsDetails']
    nhlAffiliate: Union[bool, 'TeamArgsFromClubMatchStatsDetails']
    ahlAffiliate: Union[bool, 'TeamArgsFromClubMatchStatsDetails']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromClubMatchStatsDetails']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromClubMatchStatsDetails']


class TeamArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    team: Union[bool, 'TeamArgsFromClubMatchStatsDetails']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubMatchStatsDetails']
    matches: Union[bool, 'FindManyMatchArgsFromClubMatchStatsDetails']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubMatchStatsDetails']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubMatchStatsDetails']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubMatchStatsDetails']
    bids: Union[bool, 'FindManyBidArgsFromClubMatchStatsDetails']
    managers: Union[bool, 'FindManyTeamManagerArgsFromClubMatchStatsDetails']


class TeamSeasonArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']
    teamSeason: Union[bool, 'TeamSeasonArgsFromClubMatchStatsDetails']


class TeamManagerArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    contract: Union[bool, 'ContractArgsFromClubMatchStatsDetails']
    teamSeason: Union[bool, 'TeamSeasonArgsFromClubMatchStatsDetails']


class BidArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubMatchStatsDetails']
    bids: Union[bool, 'FindManyBidArgsFromClubMatchStatsDetails']


class ContractArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    notifications: Union[bool, 'FindManyNotificationArgsFromClubMatchStatsDetails']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromClubMatchStatsDetails']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromClubMatchStatsDetails']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromClubMatchStatsDetails']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromClubMatchStatsDetails']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromClubMatchStatsDetails']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromClubMatchStatsDetails']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromClubMatchStatsDetails']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromClubMatchStatsDetails']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromClubMatchStatsDetails']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromClubMatchStatsDetails']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromClubMatchStatsDetails']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromClubMatchStatsDetails']
    psnProfile: Union[bool, 'PSNProfileArgsFromClubMatchStatsDetails']


class UserArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']


class EaIdHistoryArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']


class SystemHistoryArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']


class GamertagHistoryArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromClubMatchStatsDetails(TypedDict, total=False):
    """Relational arguments for ClubMatchStatsDetails"""
    user: Union[bool, 'UserArgsFromClubMatchStatsDetails']


class NotificationArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromClubMatchStatsDetails(TypedDict, total=False):
    """Arguments for ClubMatchStatsDetails"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyClubMatchStatsDetailsArgs = FindManyClubMatchStatsDetailsArgsFromClubMatchStatsDetails
FindFirstClubMatchStatsDetailsArgs = FindManyClubMatchStatsDetailsArgsFromClubMatchStatsDetails


class ClubMatchStatsDetailsWhereInput(TypedDict, total=False):
    """ClubMatchStatsDetails arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clubMatchStatsId: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    eaClubId: Union[_int, 'types.IntFilter']
    regionId: Union[_int, 'types.IntFilter']
    teamId: Union[_int, 'types.IntFilter']
    customKit: 'CustomKitRelationFilter'
    clubMatchStats: 'ClubMatchStatsRelationFilter'

    # should be noted that AND and NOT should be Union['ClubMatchStatsDetailsWhereInput', List['ClubMatchStatsDetailsWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ClubMatchStatsDetailsWhereInput']
    OR: List['ClubMatchStatsDetailsWhereInput']
    NOT: List['ClubMatchStatsDetailsWhereInput']



# aggregate ClubMatchStatsDetails types


class ClubMatchStatsDetailsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ClubMatchStatsDetails arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clubMatchStatsId: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    eaClubId: Union[_int, 'types.IntWithAggregatesFilter']
    regionId: Union[_int, 'types.IntWithAggregatesFilter']
    teamId: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ClubMatchStatsDetailsScalarWhereWithAggregatesInput']
    OR: List['ClubMatchStatsDetailsScalarWhereWithAggregatesInput']
    NOT: List['ClubMatchStatsDetailsScalarWhereWithAggregatesInput']



class ClubMatchStatsDetailsGroupByOutput(TypedDict, total=False):
    id: _str
    clubMatchStatsId: _str
    name: _str
    eaClubId: _int
    regionId: _int
    teamId: _int
    _sum: 'ClubMatchStatsDetailsSumAggregateOutput'
    _avg: 'ClubMatchStatsDetailsAvgAggregateOutput'
    _min: 'ClubMatchStatsDetailsMinAggregateOutput'
    _max: 'ClubMatchStatsDetailsMaxAggregateOutput'
    _count: 'ClubMatchStatsDetailsCountAggregateOutput'


class ClubMatchStatsDetailsAvgAggregateOutput(TypedDict, total=False):
    """ClubMatchStatsDetails output for aggregating averages"""
    eaClubId: float
    regionId: float
    teamId: float


class ClubMatchStatsDetailsSumAggregateOutput(TypedDict, total=False):
    """ClubMatchStatsDetails output for aggregating sums"""
    eaClubId: _int
    regionId: _int
    teamId: _int


class ClubMatchStatsDetailsScalarAggregateOutput(TypedDict, total=False):
    """ClubMatchStatsDetails output including scalar fields"""
    id: _str
    clubMatchStatsId: _str
    name: _str
    eaClubId: _int
    regionId: _int
    teamId: _int


ClubMatchStatsDetailsMinAggregateOutput = ClubMatchStatsDetailsScalarAggregateOutput
ClubMatchStatsDetailsMaxAggregateOutput = ClubMatchStatsDetailsScalarAggregateOutput


class ClubMatchStatsDetailsMaxAggregateInput(TypedDict, total=False):
    """ClubMatchStatsDetails input for aggregating by max"""
    id: bool
    clubMatchStatsId: bool
    name: bool
    eaClubId: bool
    regionId: bool
    teamId: bool


class ClubMatchStatsDetailsMinAggregateInput(TypedDict, total=False):
    """ClubMatchStatsDetails input for aggregating by min"""
    id: bool
    clubMatchStatsId: bool
    name: bool
    eaClubId: bool
    regionId: bool
    teamId: bool


class ClubMatchStatsDetailsNumberAggregateInput(TypedDict, total=False):
    """ClubMatchStatsDetails input for aggregating numbers"""
    eaClubId: bool
    regionId: bool
    teamId: bool


ClubMatchStatsDetailsAvgAggregateInput = ClubMatchStatsDetailsNumberAggregateInput
ClubMatchStatsDetailsSumAggregateInput = ClubMatchStatsDetailsNumberAggregateInput


ClubMatchStatsDetailsCountAggregateInput = TypedDict(
    'ClubMatchStatsDetailsCountAggregateInput',
    {
        'id': bool,
        'clubMatchStatsId': bool,
        'name': bool,
        'eaClubId': bool,
        'regionId': bool,
        'teamId': bool,
        '_all': bool,
    },
    total=False,
)

ClubMatchStatsDetailsCountAggregateOutput = TypedDict(
    'ClubMatchStatsDetailsCountAggregateOutput',
    {
        'id': int,
        'clubMatchStatsId': int,
        'name': int,
        'eaClubId': int,
        'regionId': int,
        'teamId': int,
        '_all': int,
    },
    total=False,
)


ClubMatchStatsDetailsKeys = Literal[
    'id',
    'clubMatchStatsId',
    'name',
    'eaClubId',
    'regionId',
    'teamId',
    'customKit',
    'clubMatchStats',
]
ClubMatchStatsDetailsScalarFieldKeys = Literal[
    'id',
    'clubMatchStatsId',
    'name',
    'eaClubId',
    'regionId',
    'teamId',
]
ClubMatchStatsDetailsScalarFieldKeysT = TypeVar('ClubMatchStatsDetailsScalarFieldKeysT', bound=ClubMatchStatsDetailsScalarFieldKeys)

ClubMatchStatsDetailsRelationalFieldKeys = Literal[
        'customKit',
        'clubMatchStats',
    ]

# CustomKit types

class CustomKitOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the CustomKit create method"""
    id: _str
    detailsId: _str
    details: 'ClubMatchStatsDetailsCreateNestedWithoutRelationsInput'


class CustomKitCreateInput(CustomKitOptionalCreateInput):
    """Required arguments to the CustomKit create method"""
    isCustomTeam: _int
    crestAssetId: _int
    useBaseAsset: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class CustomKitOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the CustomKit create method, without relations"""
    id: _str
    detailsId: _str


class CustomKitCreateWithoutRelationsInput(CustomKitOptionalCreateWithoutRelationsInput):
    """Required arguments to the CustomKit create method, without relations"""
    isCustomTeam: _int
    crestAssetId: _int
    useBaseAsset: _int

class CustomKitConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'CustomKitCreateWithoutRelationsInput'
    where: 'CustomKitWhereUniqueInput'

class CustomKitCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'CustomKitCreateWithoutRelationsInput'
    connect: 'CustomKitWhereUniqueInput'
    connect_or_create: 'CustomKitConnectOrCreateWithoutRelationsInput'


class CustomKitCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['CustomKitCreateWithoutRelationsInput', List['CustomKitCreateWithoutRelationsInput']]
    connect: Union['CustomKitWhereUniqueInput', List['CustomKitWhereUniqueInput']]
    connect_or_create: Union['CustomKitConnectOrCreateWithoutRelationsInput', List['CustomKitConnectOrCreateWithoutRelationsInput']]

_CustomKitWhereUnique_id_Input = TypedDict(
    '_CustomKitWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_CustomKitWhereUnique_detailsId_Input = TypedDict(
    '_CustomKitWhereUnique_detailsId_Input',
    {
        'detailsId': '_str',
    },
    total=True
)

CustomKitWhereUniqueInput = Union[
    '_CustomKitWhereUnique_id_Input',
    '_CustomKitWhereUnique_detailsId_Input',
]


class CustomKitUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    isCustomTeam: Union[AtomicIntInput, _int]
    crestAssetId: Union[AtomicIntInput, _int]
    useBaseAsset: Union[AtomicIntInput, _int]
    details: 'ClubMatchStatsDetailsUpdateOneWithoutRelationsInput'


class CustomKitUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    isCustomTeam: Union[AtomicIntInput, _int]
    crestAssetId: Union[AtomicIntInput, _int]
    useBaseAsset: Union[AtomicIntInput, _int]


class CustomKitUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['CustomKitCreateWithoutRelationsInput']
    connect: List['CustomKitWhereUniqueInput']
    connect_or_create: List['CustomKitConnectOrCreateWithoutRelationsInput']
    set: List['CustomKitWhereUniqueInput']
    disconnect: List['CustomKitWhereUniqueInput']
    delete: List['CustomKitWhereUniqueInput']

    # TODO
    # update: List['CustomKitUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['CustomKitUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['CustomKitScalarWhereInput']
    # upsert: List['CustomKitUpserteWithWhereUniqueWithoutRelationsInput']


class CustomKitUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'CustomKitCreateWithoutRelationsInput'
    connect: 'CustomKitWhereUniqueInput'
    connect_or_create: 'CustomKitConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'CustomKitUpdateInput'
    # upsert: 'CustomKitUpsertWithoutRelationsInput'


class CustomKitUpsertInput(TypedDict):
    create: 'CustomKitCreateInput'
    update: 'CustomKitUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_CustomKit_id_OrderByInput = TypedDict(
    '_CustomKit_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_CustomKit_detailsId_OrderByInput = TypedDict(
    '_CustomKit_detailsId_OrderByInput',
    {
        'detailsId': 'SortOrder',
    },
    total=True
)

_CustomKit_isCustomTeam_OrderByInput = TypedDict(
    '_CustomKit_isCustomTeam_OrderByInput',
    {
        'isCustomTeam': 'SortOrder',
    },
    total=True
)

_CustomKit_crestAssetId_OrderByInput = TypedDict(
    '_CustomKit_crestAssetId_OrderByInput',
    {
        'crestAssetId': 'SortOrder',
    },
    total=True
)

_CustomKit_useBaseAsset_OrderByInput = TypedDict(
    '_CustomKit_useBaseAsset_OrderByInput',
    {
        'useBaseAsset': 'SortOrder',
    },
    total=True
)

_CustomKit_RelevanceInner = TypedDict(
    '_CustomKit_RelevanceInner',
    {
        'fields': 'List[CustomKitScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_CustomKit_RelevanceOrderByInput = TypedDict(
    '_CustomKit_RelevanceOrderByInput',
    {
        '_relevance': '_CustomKit_RelevanceInner',
    },
    total=True
)

CustomKitOrderByInput = Union[
    '_CustomKit_id_OrderByInput',
    '_CustomKit_detailsId_OrderByInput',
    '_CustomKit_isCustomTeam_OrderByInput',
    '_CustomKit_crestAssetId_OrderByInput',
    '_CustomKit_useBaseAsset_OrderByInput',
    '_CustomKit_RelevanceOrderByInput',
]



# recursive CustomKit types
# TODO: cleanup these types



CustomKitRelationFilter = TypedDict(
    'CustomKitRelationFilter',
    {
        'is': 'CustomKitWhereInput',
        'is_not': 'CustomKitWhereInput',
    },
    total=False,
)


class CustomKitListRelationFilter(TypedDict, total=False):
    some: 'CustomKitWhereInput'
    none: 'CustomKitWhereInput'
    every: 'CustomKitWhereInput'


class CustomKitInclude(TypedDict, total=False):
    """CustomKit relational arguments"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromCustomKit']


class ForumPostIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    author: Union[bool, 'UserArgsFromCustomKit']
    comments: Union[bool, 'FindManyForumCommentArgsFromCustomKit']
    reactions: Union[bool, 'FindManyForumReactionArgsFromCustomKit']
    followers: Union[bool, 'FindManyForumFollowerArgsFromCustomKit']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromCustomKit']


class ForumPostArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']
    post: Union[bool, 'ForumPostArgsFromCustomKit']
    comment: Union[bool, 'ForumCommentArgsFromCustomKit']


class ForumReactionArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']
    post: Union[bool, 'ForumPostArgsFromCustomKit']


class ForumFollowerArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']
    post: Union[bool, 'ForumPostArgsFromCustomKit']


class ForumPostSubscriptionArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    author: Union[bool, 'UserArgsFromCustomKit']
    post: Union[bool, 'ForumPostArgsFromCustomKit']
    quotedComment: Union[bool, 'ForumCommentArgsFromCustomKit']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromCustomKit']
    reactions: Union[bool, 'FindManyForumReactionArgsFromCustomKit']


class ForumCommentArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    parentLeague: Union[bool, 'LeagueArgsFromCustomKit']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromCustomKit']
    conferences: Union[bool, 'FindManyConferenceArgsFromCustomKit']
    divisions: Union[bool, 'FindManyDivisionArgsFromCustomKit']
    teams: Union[bool, 'FindManyTeamArgsFromCustomKit']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromCustomKit']


class LeagueArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    league: Union[bool, 'LeagueArgsFromCustomKit']
    season: Union[bool, 'SeasonArgsFromCustomKit']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromCustomKit']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromCustomKit']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromCustomKit']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromCustomKit']


class LeagueSeasonArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    league: Union[bool, 'LeagueArgsFromCustomKit']
    divisions: Union[bool, 'FindManyDivisionArgsFromCustomKit']


class ConferenceArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    conference: Union[bool, 'ConferenceArgsFromCustomKit']
    league: Union[bool, 'LeagueArgsFromCustomKit']
    teams: Union[bool, 'FindManyTeamArgsFromCustomKit']


class DivisionArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromCustomKit']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromCustomKit']


class SeasonArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromCustomKit']


class LeagueCommissionerArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromCustomKit']


class LeagueBOGArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromCustomKit']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromCustomKit']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromCustomKit']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromCustomKit']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromCustomKit']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromCustomKit']


class MatchArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromCustomKit']
    match: Union[bool, 'MatchArgsFromCustomKit']


class ClubMatchStatsArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    customKit: Union[bool, 'CustomKitArgsFromCustomKit']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromCustomKit']


class ClubMatchStatsDetailsArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromCustomKit']


class CustomKitArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    match: Union[bool, 'MatchArgsFromCustomKit']


class ClubAggregateMatchStatsArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    match: Union[bool, 'MatchArgsFromCustomKit']


class MatchAnalyticsArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    match: Union[bool, 'MatchArgsFromCustomKit']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromCustomKit']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromCustomKit']


class PlayerMatchArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']
    season: Union[bool, 'SeasonArgsFromCustomKit']
    contract: Union[bool, 'ContractArgsFromCustomKit']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromCustomKit']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromCustomKit']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromCustomKit']
    matches: Union[bool, 'FindManyMatchArgsFromCustomKit']


class PlayerSeasonArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromCustomKit']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromCustomKit']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromCustomKit']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromCustomKit']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromCustomKit']


class PlayerTeamSeasonArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromCustomKit']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromCustomKit']


class PlayerLeagueHistoryArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromCustomKit']
    trophySummary: Union[bool, 'PSNTrophyArgsFromCustomKit']
    games: Union[bool, 'FindManyPSNGameArgsFromCustomKit']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromCustomKit']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromCustomKit']


class PSNProfileArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    profile: Union[bool, 'PSNProfileArgsFromCustomKit']


class PSNAvatarArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    profile: Union[bool, 'PSNProfileArgsFromCustomKit']


class PSNTrophyArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    profile: Union[bool, 'PSNProfileArgsFromCustomKit']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromCustomKit']


class PSNGameArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    profile: Union[bool, 'PSNProfileArgsFromCustomKit']


class PSNSyncLogArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    profile: Union[bool, 'PSNProfileArgsFromCustomKit']
    game: Union[bool, 'PSNGameArgsFromCustomKit']


class PSNGameTrophiesArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    league: Union[bool, 'LeagueArgsFromCustomKit']
    division: Union[bool, 'DivisionArgsFromCustomKit']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromCustomKit']
    nhlAffiliate: Union[bool, 'TeamArgsFromCustomKit']
    ahlAffiliate: Union[bool, 'TeamArgsFromCustomKit']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromCustomKit']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromCustomKit']


class TeamArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    team: Union[bool, 'TeamArgsFromCustomKit']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromCustomKit']
    matches: Union[bool, 'FindManyMatchArgsFromCustomKit']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromCustomKit']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromCustomKit']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromCustomKit']
    bids: Union[bool, 'FindManyBidArgsFromCustomKit']
    managers: Union[bool, 'FindManyTeamManagerArgsFromCustomKit']


class TeamSeasonArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']
    teamSeason: Union[bool, 'TeamSeasonArgsFromCustomKit']


class TeamManagerArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    contract: Union[bool, 'ContractArgsFromCustomKit']
    teamSeason: Union[bool, 'TeamSeasonArgsFromCustomKit']


class BidArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromCustomKit']
    bids: Union[bool, 'FindManyBidArgsFromCustomKit']


class ContractArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    notifications: Union[bool, 'FindManyNotificationArgsFromCustomKit']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromCustomKit']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromCustomKit']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromCustomKit']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromCustomKit']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromCustomKit']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromCustomKit']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromCustomKit']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromCustomKit']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromCustomKit']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromCustomKit']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromCustomKit']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromCustomKit']
    psnProfile: Union[bool, 'PSNProfileArgsFromCustomKit']


class UserArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']


class EaIdHistoryArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']


class SystemHistoryArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']


class GamertagHistoryArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromCustomKit(TypedDict, total=False):
    """Relational arguments for CustomKit"""
    user: Union[bool, 'UserArgsFromCustomKit']


class NotificationArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromCustomKit(TypedDict, total=False):
    """Arguments for CustomKit"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyCustomKitArgs = FindManyCustomKitArgsFromCustomKit
FindFirstCustomKitArgs = FindManyCustomKitArgsFromCustomKit


class CustomKitWhereInput(TypedDict, total=False):
    """CustomKit arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    detailsId: Union[_str, 'types.StringFilter']
    isCustomTeam: Union[_int, 'types.IntFilter']
    crestAssetId: Union[_int, 'types.IntFilter']
    useBaseAsset: Union[_int, 'types.IntFilter']
    details: 'ClubMatchStatsDetailsRelationFilter'

    # should be noted that AND and NOT should be Union['CustomKitWhereInput', List['CustomKitWhereInput']]
    # but this causes mypy to hang :/
    AND: List['CustomKitWhereInput']
    OR: List['CustomKitWhereInput']
    NOT: List['CustomKitWhereInput']



# aggregate CustomKit types


class CustomKitScalarWhereWithAggregatesInput(TypedDict, total=False):
    """CustomKit arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    detailsId: Union[_str, 'types.StringWithAggregatesFilter']
    isCustomTeam: Union[_int, 'types.IntWithAggregatesFilter']
    crestAssetId: Union[_int, 'types.IntWithAggregatesFilter']
    useBaseAsset: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['CustomKitScalarWhereWithAggregatesInput']
    OR: List['CustomKitScalarWhereWithAggregatesInput']
    NOT: List['CustomKitScalarWhereWithAggregatesInput']



class CustomKitGroupByOutput(TypedDict, total=False):
    id: _str
    detailsId: _str
    isCustomTeam: _int
    crestAssetId: _int
    useBaseAsset: _int
    _sum: 'CustomKitSumAggregateOutput'
    _avg: 'CustomKitAvgAggregateOutput'
    _min: 'CustomKitMinAggregateOutput'
    _max: 'CustomKitMaxAggregateOutput'
    _count: 'CustomKitCountAggregateOutput'


class CustomKitAvgAggregateOutput(TypedDict, total=False):
    """CustomKit output for aggregating averages"""
    isCustomTeam: float
    crestAssetId: float
    useBaseAsset: float


class CustomKitSumAggregateOutput(TypedDict, total=False):
    """CustomKit output for aggregating sums"""
    isCustomTeam: _int
    crestAssetId: _int
    useBaseAsset: _int


class CustomKitScalarAggregateOutput(TypedDict, total=False):
    """CustomKit output including scalar fields"""
    id: _str
    detailsId: _str
    isCustomTeam: _int
    crestAssetId: _int
    useBaseAsset: _int


CustomKitMinAggregateOutput = CustomKitScalarAggregateOutput
CustomKitMaxAggregateOutput = CustomKitScalarAggregateOutput


class CustomKitMaxAggregateInput(TypedDict, total=False):
    """CustomKit input for aggregating by max"""
    id: bool
    detailsId: bool
    isCustomTeam: bool
    crestAssetId: bool
    useBaseAsset: bool


class CustomKitMinAggregateInput(TypedDict, total=False):
    """CustomKit input for aggregating by min"""
    id: bool
    detailsId: bool
    isCustomTeam: bool
    crestAssetId: bool
    useBaseAsset: bool


class CustomKitNumberAggregateInput(TypedDict, total=False):
    """CustomKit input for aggregating numbers"""
    isCustomTeam: bool
    crestAssetId: bool
    useBaseAsset: bool


CustomKitAvgAggregateInput = CustomKitNumberAggregateInput
CustomKitSumAggregateInput = CustomKitNumberAggregateInput


CustomKitCountAggregateInput = TypedDict(
    'CustomKitCountAggregateInput',
    {
        'id': bool,
        'detailsId': bool,
        'isCustomTeam': bool,
        'crestAssetId': bool,
        'useBaseAsset': bool,
        '_all': bool,
    },
    total=False,
)

CustomKitCountAggregateOutput = TypedDict(
    'CustomKitCountAggregateOutput',
    {
        'id': int,
        'detailsId': int,
        'isCustomTeam': int,
        'crestAssetId': int,
        'useBaseAsset': int,
        '_all': int,
    },
    total=False,
)


CustomKitKeys = Literal[
    'id',
    'detailsId',
    'isCustomTeam',
    'crestAssetId',
    'useBaseAsset',
    'details',
]
CustomKitScalarFieldKeys = Literal[
    'id',
    'detailsId',
    'isCustomTeam',
    'crestAssetId',
    'useBaseAsset',
]
CustomKitScalarFieldKeysT = TypeVar('CustomKitScalarFieldKeysT', bound=CustomKitScalarFieldKeys)

CustomKitRelationalFieldKeys = Literal[
        'details',
    ]

# ClubAggregateMatchStats types

class ClubAggregateMatchStatsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the ClubAggregateMatchStats create method"""
    id: _str
    matchId: _str
    match: 'MatchCreateNestedWithoutRelationsInput'


class ClubAggregateMatchStatsCreateInput(ClubAggregateMatchStatsOptionalCreateInput):
    """Required arguments to the ClubAggregateMatchStats create method"""
    clubLevel: _int
    position: _int
    posSorted: _int
    isGuest: _int
    playerDnf: _int
    playerLevel: _int
    eaTeamId: _int
    teamSide: _int
    opponentEaClubId: _int
    opponentEaTeamId: _int
    opponentScore: _int
    score: _int
    ratingDefense: _float
    ratingOffense: _float
    ratingTeamplay: _float
    toi: _int
    toiSeconds: _int
    assists: _int
    blockedShots: _int
    deflections: _int
    faceoffsLost: _int
    faceoffPct: _float
    faceoffsWon: _int
    giveaways: _int
    goals: _int
    hits: _int
    interceptions: _int
    passAttempts: _int
    passes: _int
    passPct: _float
    penaltiesDrawn: _int
    penaltyMinutes: _int
    skaterPkClearZone: _int
    plusMinus: _int
    possession: _int
    powerPlayGoals: _int
    saucerPasses: _int
    shortHandedGoals: _int
    shotAttempts: _int
    shotOnNetPct: _float
    shots: _int
    takeaways: _int
    breakawaySavePct: _float
    breakawaySaves: _int
    breakawayShots: _int
    desperationSaves: _int
    goalsAgainst: _int
    goalsAgainstAverage: _float
    penaltyShotSavePct: _float
    penaltyShotSaves: _int
    goaliePkClearZone: _int
    pokeChecks: _int
    savePct: _float
    totalSaves: _int
    totalShotsFaced: _int
    shutoutPeriods: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ClubAggregateMatchStatsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the ClubAggregateMatchStats create method, without relations"""
    id: _str
    matchId: _str


class ClubAggregateMatchStatsCreateWithoutRelationsInput(ClubAggregateMatchStatsOptionalCreateWithoutRelationsInput):
    """Required arguments to the ClubAggregateMatchStats create method, without relations"""
    clubLevel: _int
    position: _int
    posSorted: _int
    isGuest: _int
    playerDnf: _int
    playerLevel: _int
    eaTeamId: _int
    teamSide: _int
    opponentEaClubId: _int
    opponentEaTeamId: _int
    opponentScore: _int
    score: _int
    ratingDefense: _float
    ratingOffense: _float
    ratingTeamplay: _float
    toi: _int
    toiSeconds: _int
    assists: _int
    blockedShots: _int
    deflections: _int
    faceoffsLost: _int
    faceoffPct: _float
    faceoffsWon: _int
    giveaways: _int
    goals: _int
    hits: _int
    interceptions: _int
    passAttempts: _int
    passes: _int
    passPct: _float
    penaltiesDrawn: _int
    penaltyMinutes: _int
    skaterPkClearZone: _int
    plusMinus: _int
    possession: _int
    powerPlayGoals: _int
    saucerPasses: _int
    shortHandedGoals: _int
    shotAttempts: _int
    shotOnNetPct: _float
    shots: _int
    takeaways: _int
    breakawaySavePct: _float
    breakawaySaves: _int
    breakawayShots: _int
    desperationSaves: _int
    goalsAgainst: _int
    goalsAgainstAverage: _float
    penaltyShotSavePct: _float
    penaltyShotSaves: _int
    goaliePkClearZone: _int
    pokeChecks: _int
    savePct: _float
    totalSaves: _int
    totalShotsFaced: _int
    shutoutPeriods: _int

class ClubAggregateMatchStatsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ClubAggregateMatchStatsCreateWithoutRelationsInput'
    where: 'ClubAggregateMatchStatsWhereUniqueInput'

class ClubAggregateMatchStatsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ClubAggregateMatchStatsCreateWithoutRelationsInput'
    connect: 'ClubAggregateMatchStatsWhereUniqueInput'
    connect_or_create: 'ClubAggregateMatchStatsConnectOrCreateWithoutRelationsInput'


class ClubAggregateMatchStatsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ClubAggregateMatchStatsCreateWithoutRelationsInput', List['ClubAggregateMatchStatsCreateWithoutRelationsInput']]
    connect: Union['ClubAggregateMatchStatsWhereUniqueInput', List['ClubAggregateMatchStatsWhereUniqueInput']]
    connect_or_create: Union['ClubAggregateMatchStatsConnectOrCreateWithoutRelationsInput', List['ClubAggregateMatchStatsConnectOrCreateWithoutRelationsInput']]

_ClubAggregateMatchStatsWhereUnique_id_Input = TypedDict(
    '_ClubAggregateMatchStatsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ClubAggregateMatchStatsWhereUniqueInput = _ClubAggregateMatchStatsWhereUnique_id_Input


class ClubAggregateMatchStatsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    clubLevel: Union[AtomicIntInput, _int]
    position: Union[AtomicIntInput, _int]
    posSorted: Union[AtomicIntInput, _int]
    isGuest: Union[AtomicIntInput, _int]
    playerDnf: Union[AtomicIntInput, _int]
    playerLevel: Union[AtomicIntInput, _int]
    eaTeamId: Union[AtomicIntInput, _int]
    teamSide: Union[AtomicIntInput, _int]
    opponentEaClubId: Union[AtomicIntInput, _int]
    opponentEaTeamId: Union[AtomicIntInput, _int]
    opponentScore: Union[AtomicIntInput, _int]
    score: Union[AtomicIntInput, _int]
    ratingDefense: Union[AtomicFloatInput, _float]
    ratingOffense: Union[AtomicFloatInput, _float]
    ratingTeamplay: Union[AtomicFloatInput, _float]
    toi: Union[AtomicIntInput, _int]
    toiSeconds: Union[AtomicIntInput, _int]
    assists: Union[AtomicIntInput, _int]
    blockedShots: Union[AtomicIntInput, _int]
    deflections: Union[AtomicIntInput, _int]
    faceoffsLost: Union[AtomicIntInput, _int]
    faceoffPct: Union[AtomicFloatInput, _float]
    faceoffsWon: Union[AtomicIntInput, _int]
    giveaways: Union[AtomicIntInput, _int]
    goals: Union[AtomicIntInput, _int]
    hits: Union[AtomicIntInput, _int]
    interceptions: Union[AtomicIntInput, _int]
    passAttempts: Union[AtomicIntInput, _int]
    passes: Union[AtomicIntInput, _int]
    passPct: Union[AtomicFloatInput, _float]
    penaltiesDrawn: Union[AtomicIntInput, _int]
    penaltyMinutes: Union[AtomicIntInput, _int]
    skaterPkClearZone: Union[AtomicIntInput, _int]
    plusMinus: Union[AtomicIntInput, _int]
    possession: Union[AtomicIntInput, _int]
    powerPlayGoals: Union[AtomicIntInput, _int]
    saucerPasses: Union[AtomicIntInput, _int]
    shortHandedGoals: Union[AtomicIntInput, _int]
    shotAttempts: Union[AtomicIntInput, _int]
    shotOnNetPct: Union[AtomicFloatInput, _float]
    shots: Union[AtomicIntInput, _int]
    takeaways: Union[AtomicIntInput, _int]
    breakawaySavePct: Union[AtomicFloatInput, _float]
    breakawaySaves: Union[AtomicIntInput, _int]
    breakawayShots: Union[AtomicIntInput, _int]
    desperationSaves: Union[AtomicIntInput, _int]
    goalsAgainst: Union[AtomicIntInput, _int]
    goalsAgainstAverage: Union[AtomicFloatInput, _float]
    penaltyShotSavePct: Union[AtomicFloatInput, _float]
    penaltyShotSaves: Union[AtomicIntInput, _int]
    goaliePkClearZone: Union[AtomicIntInput, _int]
    pokeChecks: Union[AtomicIntInput, _int]
    savePct: Union[AtomicFloatInput, _float]
    totalSaves: Union[AtomicIntInput, _int]
    totalShotsFaced: Union[AtomicIntInput, _int]
    shutoutPeriods: Union[AtomicIntInput, _int]
    match: 'MatchUpdateOneWithoutRelationsInput'


class ClubAggregateMatchStatsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    clubLevel: Union[AtomicIntInput, _int]
    position: Union[AtomicIntInput, _int]
    posSorted: Union[AtomicIntInput, _int]
    isGuest: Union[AtomicIntInput, _int]
    playerDnf: Union[AtomicIntInput, _int]
    playerLevel: Union[AtomicIntInput, _int]
    eaTeamId: Union[AtomicIntInput, _int]
    teamSide: Union[AtomicIntInput, _int]
    opponentEaClubId: Union[AtomicIntInput, _int]
    opponentEaTeamId: Union[AtomicIntInput, _int]
    opponentScore: Union[AtomicIntInput, _int]
    score: Union[AtomicIntInput, _int]
    ratingDefense: Union[AtomicFloatInput, _float]
    ratingOffense: Union[AtomicFloatInput, _float]
    ratingTeamplay: Union[AtomicFloatInput, _float]
    toi: Union[AtomicIntInput, _int]
    toiSeconds: Union[AtomicIntInput, _int]
    assists: Union[AtomicIntInput, _int]
    blockedShots: Union[AtomicIntInput, _int]
    deflections: Union[AtomicIntInput, _int]
    faceoffsLost: Union[AtomicIntInput, _int]
    faceoffPct: Union[AtomicFloatInput, _float]
    faceoffsWon: Union[AtomicIntInput, _int]
    giveaways: Union[AtomicIntInput, _int]
    goals: Union[AtomicIntInput, _int]
    hits: Union[AtomicIntInput, _int]
    interceptions: Union[AtomicIntInput, _int]
    passAttempts: Union[AtomicIntInput, _int]
    passes: Union[AtomicIntInput, _int]
    passPct: Union[AtomicFloatInput, _float]
    penaltiesDrawn: Union[AtomicIntInput, _int]
    penaltyMinutes: Union[AtomicIntInput, _int]
    skaterPkClearZone: Union[AtomicIntInput, _int]
    plusMinus: Union[AtomicIntInput, _int]
    possession: Union[AtomicIntInput, _int]
    powerPlayGoals: Union[AtomicIntInput, _int]
    saucerPasses: Union[AtomicIntInput, _int]
    shortHandedGoals: Union[AtomicIntInput, _int]
    shotAttempts: Union[AtomicIntInput, _int]
    shotOnNetPct: Union[AtomicFloatInput, _float]
    shots: Union[AtomicIntInput, _int]
    takeaways: Union[AtomicIntInput, _int]
    breakawaySavePct: Union[AtomicFloatInput, _float]
    breakawaySaves: Union[AtomicIntInput, _int]
    breakawayShots: Union[AtomicIntInput, _int]
    desperationSaves: Union[AtomicIntInput, _int]
    goalsAgainst: Union[AtomicIntInput, _int]
    goalsAgainstAverage: Union[AtomicFloatInput, _float]
    penaltyShotSavePct: Union[AtomicFloatInput, _float]
    penaltyShotSaves: Union[AtomicIntInput, _int]
    goaliePkClearZone: Union[AtomicIntInput, _int]
    pokeChecks: Union[AtomicIntInput, _int]
    savePct: Union[AtomicFloatInput, _float]
    totalSaves: Union[AtomicIntInput, _int]
    totalShotsFaced: Union[AtomicIntInput, _int]
    shutoutPeriods: Union[AtomicIntInput, _int]


class ClubAggregateMatchStatsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ClubAggregateMatchStatsCreateWithoutRelationsInput']
    connect: List['ClubAggregateMatchStatsWhereUniqueInput']
    connect_or_create: List['ClubAggregateMatchStatsConnectOrCreateWithoutRelationsInput']
    set: List['ClubAggregateMatchStatsWhereUniqueInput']
    disconnect: List['ClubAggregateMatchStatsWhereUniqueInput']
    delete: List['ClubAggregateMatchStatsWhereUniqueInput']

    # TODO
    # update: List['ClubAggregateMatchStatsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ClubAggregateMatchStatsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ClubAggregateMatchStatsScalarWhereInput']
    # upsert: List['ClubAggregateMatchStatsUpserteWithWhereUniqueWithoutRelationsInput']


class ClubAggregateMatchStatsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ClubAggregateMatchStatsCreateWithoutRelationsInput'
    connect: 'ClubAggregateMatchStatsWhereUniqueInput'
    connect_or_create: 'ClubAggregateMatchStatsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ClubAggregateMatchStatsUpdateInput'
    # upsert: 'ClubAggregateMatchStatsUpsertWithoutRelationsInput'


class ClubAggregateMatchStatsUpsertInput(TypedDict):
    create: 'ClubAggregateMatchStatsCreateInput'
    update: 'ClubAggregateMatchStatsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_ClubAggregateMatchStats_id_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_matchId_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_matchId_OrderByInput',
    {
        'matchId': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_clubLevel_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_clubLevel_OrderByInput',
    {
        'clubLevel': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_position_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_position_OrderByInput',
    {
        'position': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_posSorted_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_posSorted_OrderByInput',
    {
        'posSorted': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_isGuest_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_isGuest_OrderByInput',
    {
        'isGuest': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_playerDnf_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_playerDnf_OrderByInput',
    {
        'playerDnf': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_playerLevel_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_playerLevel_OrderByInput',
    {
        'playerLevel': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_eaTeamId_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_eaTeamId_OrderByInput',
    {
        'eaTeamId': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_teamSide_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_teamSide_OrderByInput',
    {
        'teamSide': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_opponentEaClubId_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_opponentEaClubId_OrderByInput',
    {
        'opponentEaClubId': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_opponentEaTeamId_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_opponentEaTeamId_OrderByInput',
    {
        'opponentEaTeamId': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_opponentScore_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_opponentScore_OrderByInput',
    {
        'opponentScore': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_score_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_score_OrderByInput',
    {
        'score': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_ratingDefense_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_ratingDefense_OrderByInput',
    {
        'ratingDefense': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_ratingOffense_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_ratingOffense_OrderByInput',
    {
        'ratingOffense': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_ratingTeamplay_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_ratingTeamplay_OrderByInput',
    {
        'ratingTeamplay': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_toi_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_toi_OrderByInput',
    {
        'toi': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_toiSeconds_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_toiSeconds_OrderByInput',
    {
        'toiSeconds': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_assists_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_assists_OrderByInput',
    {
        'assists': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_blockedShots_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_blockedShots_OrderByInput',
    {
        'blockedShots': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_deflections_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_deflections_OrderByInput',
    {
        'deflections': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_faceoffsLost_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_faceoffsLost_OrderByInput',
    {
        'faceoffsLost': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_faceoffPct_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_faceoffPct_OrderByInput',
    {
        'faceoffPct': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_faceoffsWon_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_faceoffsWon_OrderByInput',
    {
        'faceoffsWon': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_giveaways_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_giveaways_OrderByInput',
    {
        'giveaways': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_goals_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_goals_OrderByInput',
    {
        'goals': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_hits_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_hits_OrderByInput',
    {
        'hits': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_interceptions_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_interceptions_OrderByInput',
    {
        'interceptions': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_passAttempts_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_passAttempts_OrderByInput',
    {
        'passAttempts': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_passes_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_passes_OrderByInput',
    {
        'passes': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_passPct_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_passPct_OrderByInput',
    {
        'passPct': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_penaltiesDrawn_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_penaltiesDrawn_OrderByInput',
    {
        'penaltiesDrawn': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_penaltyMinutes_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_penaltyMinutes_OrderByInput',
    {
        'penaltyMinutes': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_skaterPkClearZone_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_skaterPkClearZone_OrderByInput',
    {
        'skaterPkClearZone': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_plusMinus_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_plusMinus_OrderByInput',
    {
        'plusMinus': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_possession_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_possession_OrderByInput',
    {
        'possession': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_powerPlayGoals_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_powerPlayGoals_OrderByInput',
    {
        'powerPlayGoals': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_saucerPasses_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_saucerPasses_OrderByInput',
    {
        'saucerPasses': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_shortHandedGoals_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_shortHandedGoals_OrderByInput',
    {
        'shortHandedGoals': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_shotAttempts_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_shotAttempts_OrderByInput',
    {
        'shotAttempts': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_shotOnNetPct_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_shotOnNetPct_OrderByInput',
    {
        'shotOnNetPct': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_shots_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_shots_OrderByInput',
    {
        'shots': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_takeaways_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_takeaways_OrderByInput',
    {
        'takeaways': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_breakawaySavePct_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_breakawaySavePct_OrderByInput',
    {
        'breakawaySavePct': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_breakawaySaves_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_breakawaySaves_OrderByInput',
    {
        'breakawaySaves': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_breakawayShots_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_breakawayShots_OrderByInput',
    {
        'breakawayShots': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_desperationSaves_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_desperationSaves_OrderByInput',
    {
        'desperationSaves': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_goalsAgainst_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_goalsAgainst_OrderByInput',
    {
        'goalsAgainst': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_goalsAgainstAverage_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_goalsAgainstAverage_OrderByInput',
    {
        'goalsAgainstAverage': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_penaltyShotSavePct_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_penaltyShotSavePct_OrderByInput',
    {
        'penaltyShotSavePct': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_penaltyShotSaves_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_penaltyShotSaves_OrderByInput',
    {
        'penaltyShotSaves': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_goaliePkClearZone_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_goaliePkClearZone_OrderByInput',
    {
        'goaliePkClearZone': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_pokeChecks_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_pokeChecks_OrderByInput',
    {
        'pokeChecks': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_savePct_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_savePct_OrderByInput',
    {
        'savePct': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_totalSaves_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_totalSaves_OrderByInput',
    {
        'totalSaves': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_totalShotsFaced_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_totalShotsFaced_OrderByInput',
    {
        'totalShotsFaced': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_shutoutPeriods_OrderByInput = TypedDict(
    '_ClubAggregateMatchStats_shutoutPeriods_OrderByInput',
    {
        'shutoutPeriods': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_RelevanceInner = TypedDict(
    '_ClubAggregateMatchStats_RelevanceInner',
    {
        'fields': 'List[ClubAggregateMatchStatsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_ClubAggregateMatchStats_RelevanceOrderByInput = TypedDict(
    '_ClubAggregateMatchStats_RelevanceOrderByInput',
    {
        '_relevance': '_ClubAggregateMatchStats_RelevanceInner',
    },
    total=True
)

ClubAggregateMatchStatsOrderByInput = Union[
    '_ClubAggregateMatchStats_id_OrderByInput',
    '_ClubAggregateMatchStats_matchId_OrderByInput',
    '_ClubAggregateMatchStats_clubLevel_OrderByInput',
    '_ClubAggregateMatchStats_position_OrderByInput',
    '_ClubAggregateMatchStats_posSorted_OrderByInput',
    '_ClubAggregateMatchStats_isGuest_OrderByInput',
    '_ClubAggregateMatchStats_playerDnf_OrderByInput',
    '_ClubAggregateMatchStats_playerLevel_OrderByInput',
    '_ClubAggregateMatchStats_eaTeamId_OrderByInput',
    '_ClubAggregateMatchStats_teamSide_OrderByInput',
    '_ClubAggregateMatchStats_opponentEaClubId_OrderByInput',
    '_ClubAggregateMatchStats_opponentEaTeamId_OrderByInput',
    '_ClubAggregateMatchStats_opponentScore_OrderByInput',
    '_ClubAggregateMatchStats_score_OrderByInput',
    '_ClubAggregateMatchStats_ratingDefense_OrderByInput',
    '_ClubAggregateMatchStats_ratingOffense_OrderByInput',
    '_ClubAggregateMatchStats_ratingTeamplay_OrderByInput',
    '_ClubAggregateMatchStats_toi_OrderByInput',
    '_ClubAggregateMatchStats_toiSeconds_OrderByInput',
    '_ClubAggregateMatchStats_assists_OrderByInput',
    '_ClubAggregateMatchStats_blockedShots_OrderByInput',
    '_ClubAggregateMatchStats_deflections_OrderByInput',
    '_ClubAggregateMatchStats_faceoffsLost_OrderByInput',
    '_ClubAggregateMatchStats_faceoffPct_OrderByInput',
    '_ClubAggregateMatchStats_faceoffsWon_OrderByInput',
    '_ClubAggregateMatchStats_giveaways_OrderByInput',
    '_ClubAggregateMatchStats_goals_OrderByInput',
    '_ClubAggregateMatchStats_hits_OrderByInput',
    '_ClubAggregateMatchStats_interceptions_OrderByInput',
    '_ClubAggregateMatchStats_passAttempts_OrderByInput',
    '_ClubAggregateMatchStats_passes_OrderByInput',
    '_ClubAggregateMatchStats_passPct_OrderByInput',
    '_ClubAggregateMatchStats_penaltiesDrawn_OrderByInput',
    '_ClubAggregateMatchStats_penaltyMinutes_OrderByInput',
    '_ClubAggregateMatchStats_skaterPkClearZone_OrderByInput',
    '_ClubAggregateMatchStats_plusMinus_OrderByInput',
    '_ClubAggregateMatchStats_possession_OrderByInput',
    '_ClubAggregateMatchStats_powerPlayGoals_OrderByInput',
    '_ClubAggregateMatchStats_saucerPasses_OrderByInput',
    '_ClubAggregateMatchStats_shortHandedGoals_OrderByInput',
    '_ClubAggregateMatchStats_shotAttempts_OrderByInput',
    '_ClubAggregateMatchStats_shotOnNetPct_OrderByInput',
    '_ClubAggregateMatchStats_shots_OrderByInput',
    '_ClubAggregateMatchStats_takeaways_OrderByInput',
    '_ClubAggregateMatchStats_breakawaySavePct_OrderByInput',
    '_ClubAggregateMatchStats_breakawaySaves_OrderByInput',
    '_ClubAggregateMatchStats_breakawayShots_OrderByInput',
    '_ClubAggregateMatchStats_desperationSaves_OrderByInput',
    '_ClubAggregateMatchStats_goalsAgainst_OrderByInput',
    '_ClubAggregateMatchStats_goalsAgainstAverage_OrderByInput',
    '_ClubAggregateMatchStats_penaltyShotSavePct_OrderByInput',
    '_ClubAggregateMatchStats_penaltyShotSaves_OrderByInput',
    '_ClubAggregateMatchStats_goaliePkClearZone_OrderByInput',
    '_ClubAggregateMatchStats_pokeChecks_OrderByInput',
    '_ClubAggregateMatchStats_savePct_OrderByInput',
    '_ClubAggregateMatchStats_totalSaves_OrderByInput',
    '_ClubAggregateMatchStats_totalShotsFaced_OrderByInput',
    '_ClubAggregateMatchStats_shutoutPeriods_OrderByInput',
    '_ClubAggregateMatchStats_RelevanceOrderByInput',
]



# recursive ClubAggregateMatchStats types
# TODO: cleanup these types



ClubAggregateMatchStatsRelationFilter = TypedDict(
    'ClubAggregateMatchStatsRelationFilter',
    {
        'is': 'ClubAggregateMatchStatsWhereInput',
        'is_not': 'ClubAggregateMatchStatsWhereInput',
    },
    total=False,
)


class ClubAggregateMatchStatsListRelationFilter(TypedDict, total=False):
    some: 'ClubAggregateMatchStatsWhereInput'
    none: 'ClubAggregateMatchStatsWhereInput'
    every: 'ClubAggregateMatchStatsWhereInput'


class ClubAggregateMatchStatsInclude(TypedDict, total=False):
    """ClubAggregateMatchStats relational arguments"""
    match: Union[bool, 'MatchArgsFromClubAggregateMatchStats']


class ForumPostIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    author: Union[bool, 'UserArgsFromClubAggregateMatchStats']
    comments: Union[bool, 'FindManyForumCommentArgsFromClubAggregateMatchStats']
    reactions: Union[bool, 'FindManyForumReactionArgsFromClubAggregateMatchStats']
    followers: Union[bool, 'FindManyForumFollowerArgsFromClubAggregateMatchStats']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromClubAggregateMatchStats']


class ForumPostArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']
    post: Union[bool, 'ForumPostArgsFromClubAggregateMatchStats']
    comment: Union[bool, 'ForumCommentArgsFromClubAggregateMatchStats']


class ForumReactionArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']
    post: Union[bool, 'ForumPostArgsFromClubAggregateMatchStats']


class ForumFollowerArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']
    post: Union[bool, 'ForumPostArgsFromClubAggregateMatchStats']


class ForumPostSubscriptionArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    author: Union[bool, 'UserArgsFromClubAggregateMatchStats']
    post: Union[bool, 'ForumPostArgsFromClubAggregateMatchStats']
    quotedComment: Union[bool, 'ForumCommentArgsFromClubAggregateMatchStats']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromClubAggregateMatchStats']
    reactions: Union[bool, 'FindManyForumReactionArgsFromClubAggregateMatchStats']


class ForumCommentArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    parentLeague: Union[bool, 'LeagueArgsFromClubAggregateMatchStats']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromClubAggregateMatchStats']
    conferences: Union[bool, 'FindManyConferenceArgsFromClubAggregateMatchStats']
    divisions: Union[bool, 'FindManyDivisionArgsFromClubAggregateMatchStats']
    teams: Union[bool, 'FindManyTeamArgsFromClubAggregateMatchStats']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromClubAggregateMatchStats']


class LeagueArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    league: Union[bool, 'LeagueArgsFromClubAggregateMatchStats']
    season: Union[bool, 'SeasonArgsFromClubAggregateMatchStats']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromClubAggregateMatchStats']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromClubAggregateMatchStats']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromClubAggregateMatchStats']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromClubAggregateMatchStats']


class LeagueSeasonArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    league: Union[bool, 'LeagueArgsFromClubAggregateMatchStats']
    divisions: Union[bool, 'FindManyDivisionArgsFromClubAggregateMatchStats']


class ConferenceArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    conference: Union[bool, 'ConferenceArgsFromClubAggregateMatchStats']
    league: Union[bool, 'LeagueArgsFromClubAggregateMatchStats']
    teams: Union[bool, 'FindManyTeamArgsFromClubAggregateMatchStats']


class DivisionArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromClubAggregateMatchStats']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromClubAggregateMatchStats']


class SeasonArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubAggregateMatchStats']


class LeagueCommissionerArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubAggregateMatchStats']


class LeagueBOGArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromClubAggregateMatchStats']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromClubAggregateMatchStats']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromClubAggregateMatchStats']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromClubAggregateMatchStats']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromClubAggregateMatchStats']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromClubAggregateMatchStats']


class MatchArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromClubAggregateMatchStats']
    match: Union[bool, 'MatchArgsFromClubAggregateMatchStats']


class ClubMatchStatsArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    customKit: Union[bool, 'CustomKitArgsFromClubAggregateMatchStats']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromClubAggregateMatchStats']


class ClubMatchStatsDetailsArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromClubAggregateMatchStats']


class CustomKitArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    match: Union[bool, 'MatchArgsFromClubAggregateMatchStats']


class ClubAggregateMatchStatsArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    match: Union[bool, 'MatchArgsFromClubAggregateMatchStats']


class MatchAnalyticsArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    match: Union[bool, 'MatchArgsFromClubAggregateMatchStats']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromClubAggregateMatchStats']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubAggregateMatchStats']


class PlayerMatchArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']
    season: Union[bool, 'SeasonArgsFromClubAggregateMatchStats']
    contract: Union[bool, 'ContractArgsFromClubAggregateMatchStats']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubAggregateMatchStats']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromClubAggregateMatchStats']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromClubAggregateMatchStats']
    matches: Union[bool, 'FindManyMatchArgsFromClubAggregateMatchStats']


class PlayerSeasonArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubAggregateMatchStats']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromClubAggregateMatchStats']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromClubAggregateMatchStats']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromClubAggregateMatchStats']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromClubAggregateMatchStats']


class PlayerTeamSeasonArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubAggregateMatchStats']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubAggregateMatchStats']


class PlayerLeagueHistoryArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromClubAggregateMatchStats']
    trophySummary: Union[bool, 'PSNTrophyArgsFromClubAggregateMatchStats']
    games: Union[bool, 'FindManyPSNGameArgsFromClubAggregateMatchStats']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromClubAggregateMatchStats']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromClubAggregateMatchStats']


class PSNProfileArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    profile: Union[bool, 'PSNProfileArgsFromClubAggregateMatchStats']


class PSNAvatarArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    profile: Union[bool, 'PSNProfileArgsFromClubAggregateMatchStats']


class PSNTrophyArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    profile: Union[bool, 'PSNProfileArgsFromClubAggregateMatchStats']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromClubAggregateMatchStats']


class PSNGameArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    profile: Union[bool, 'PSNProfileArgsFromClubAggregateMatchStats']


class PSNSyncLogArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    profile: Union[bool, 'PSNProfileArgsFromClubAggregateMatchStats']
    game: Union[bool, 'PSNGameArgsFromClubAggregateMatchStats']


class PSNGameTrophiesArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    league: Union[bool, 'LeagueArgsFromClubAggregateMatchStats']
    division: Union[bool, 'DivisionArgsFromClubAggregateMatchStats']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromClubAggregateMatchStats']
    nhlAffiliate: Union[bool, 'TeamArgsFromClubAggregateMatchStats']
    ahlAffiliate: Union[bool, 'TeamArgsFromClubAggregateMatchStats']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromClubAggregateMatchStats']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromClubAggregateMatchStats']


class TeamArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    team: Union[bool, 'TeamArgsFromClubAggregateMatchStats']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromClubAggregateMatchStats']
    matches: Union[bool, 'FindManyMatchArgsFromClubAggregateMatchStats']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubAggregateMatchStats']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubAggregateMatchStats']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromClubAggregateMatchStats']
    bids: Union[bool, 'FindManyBidArgsFromClubAggregateMatchStats']
    managers: Union[bool, 'FindManyTeamManagerArgsFromClubAggregateMatchStats']


class TeamSeasonArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']
    teamSeason: Union[bool, 'TeamSeasonArgsFromClubAggregateMatchStats']


class TeamManagerArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    contract: Union[bool, 'ContractArgsFromClubAggregateMatchStats']
    teamSeason: Union[bool, 'TeamSeasonArgsFromClubAggregateMatchStats']


class BidArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromClubAggregateMatchStats']
    bids: Union[bool, 'FindManyBidArgsFromClubAggregateMatchStats']


class ContractArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    notifications: Union[bool, 'FindManyNotificationArgsFromClubAggregateMatchStats']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromClubAggregateMatchStats']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromClubAggregateMatchStats']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromClubAggregateMatchStats']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromClubAggregateMatchStats']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromClubAggregateMatchStats']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromClubAggregateMatchStats']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromClubAggregateMatchStats']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromClubAggregateMatchStats']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromClubAggregateMatchStats']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromClubAggregateMatchStats']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromClubAggregateMatchStats']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromClubAggregateMatchStats']
    psnProfile: Union[bool, 'PSNProfileArgsFromClubAggregateMatchStats']


class UserArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']


class EaIdHistoryArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']


class SystemHistoryArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']


class GamertagHistoryArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromClubAggregateMatchStats(TypedDict, total=False):
    """Relational arguments for ClubAggregateMatchStats"""
    user: Union[bool, 'UserArgsFromClubAggregateMatchStats']


class NotificationArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromClubAggregateMatchStats(TypedDict, total=False):
    """Arguments for ClubAggregateMatchStats"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyClubAggregateMatchStatsArgs = FindManyClubAggregateMatchStatsArgsFromClubAggregateMatchStats
FindFirstClubAggregateMatchStatsArgs = FindManyClubAggregateMatchStatsArgsFromClubAggregateMatchStats


class ClubAggregateMatchStatsWhereInput(TypedDict, total=False):
    """ClubAggregateMatchStats arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    matchId: Union[_str, 'types.StringFilter']
    clubLevel: Union[_int, 'types.IntFilter']
    position: Union[_int, 'types.IntFilter']
    posSorted: Union[_int, 'types.IntFilter']
    isGuest: Union[_int, 'types.IntFilter']
    playerDnf: Union[_int, 'types.IntFilter']
    playerLevel: Union[_int, 'types.IntFilter']
    eaTeamId: Union[_int, 'types.IntFilter']
    teamSide: Union[_int, 'types.IntFilter']
    opponentEaClubId: Union[_int, 'types.IntFilter']
    opponentEaTeamId: Union[_int, 'types.IntFilter']
    opponentScore: Union[_int, 'types.IntFilter']
    score: Union[_int, 'types.IntFilter']
    ratingDefense: Union[_float, 'types.FloatFilter']
    ratingOffense: Union[_float, 'types.FloatFilter']
    ratingTeamplay: Union[_float, 'types.FloatFilter']
    toi: Union[_int, 'types.IntFilter']
    toiSeconds: Union[_int, 'types.IntFilter']
    assists: Union[_int, 'types.IntFilter']
    blockedShots: Union[_int, 'types.IntFilter']
    deflections: Union[_int, 'types.IntFilter']
    faceoffsLost: Union[_int, 'types.IntFilter']
    faceoffPct: Union[_float, 'types.FloatFilter']
    faceoffsWon: Union[_int, 'types.IntFilter']
    giveaways: Union[_int, 'types.IntFilter']
    goals: Union[_int, 'types.IntFilter']
    hits: Union[_int, 'types.IntFilter']
    interceptions: Union[_int, 'types.IntFilter']
    passAttempts: Union[_int, 'types.IntFilter']
    passes: Union[_int, 'types.IntFilter']
    passPct: Union[_float, 'types.FloatFilter']
    penaltiesDrawn: Union[_int, 'types.IntFilter']
    penaltyMinutes: Union[_int, 'types.IntFilter']
    skaterPkClearZone: Union[_int, 'types.IntFilter']
    plusMinus: Union[_int, 'types.IntFilter']
    possession: Union[_int, 'types.IntFilter']
    powerPlayGoals: Union[_int, 'types.IntFilter']
    saucerPasses: Union[_int, 'types.IntFilter']
    shortHandedGoals: Union[_int, 'types.IntFilter']
    shotAttempts: Union[_int, 'types.IntFilter']
    shotOnNetPct: Union[_float, 'types.FloatFilter']
    shots: Union[_int, 'types.IntFilter']
    takeaways: Union[_int, 'types.IntFilter']
    breakawaySavePct: Union[_float, 'types.FloatFilter']
    breakawaySaves: Union[_int, 'types.IntFilter']
    breakawayShots: Union[_int, 'types.IntFilter']
    desperationSaves: Union[_int, 'types.IntFilter']
    goalsAgainst: Union[_int, 'types.IntFilter']
    goalsAgainstAverage: Union[_float, 'types.FloatFilter']
    penaltyShotSavePct: Union[_float, 'types.FloatFilter']
    penaltyShotSaves: Union[_int, 'types.IntFilter']
    goaliePkClearZone: Union[_int, 'types.IntFilter']
    pokeChecks: Union[_int, 'types.IntFilter']
    savePct: Union[_float, 'types.FloatFilter']
    totalSaves: Union[_int, 'types.IntFilter']
    totalShotsFaced: Union[_int, 'types.IntFilter']
    shutoutPeriods: Union[_int, 'types.IntFilter']
    match: 'MatchRelationFilter'

    # should be noted that AND and NOT should be Union['ClubAggregateMatchStatsWhereInput', List['ClubAggregateMatchStatsWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ClubAggregateMatchStatsWhereInput']
    OR: List['ClubAggregateMatchStatsWhereInput']
    NOT: List['ClubAggregateMatchStatsWhereInput']



# aggregate ClubAggregateMatchStats types


class ClubAggregateMatchStatsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """ClubAggregateMatchStats arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    matchId: Union[_str, 'types.StringWithAggregatesFilter']
    clubLevel: Union[_int, 'types.IntWithAggregatesFilter']
    position: Union[_int, 'types.IntWithAggregatesFilter']
    posSorted: Union[_int, 'types.IntWithAggregatesFilter']
    isGuest: Union[_int, 'types.IntWithAggregatesFilter']
    playerDnf: Union[_int, 'types.IntWithAggregatesFilter']
    playerLevel: Union[_int, 'types.IntWithAggregatesFilter']
    eaTeamId: Union[_int, 'types.IntWithAggregatesFilter']
    teamSide: Union[_int, 'types.IntWithAggregatesFilter']
    opponentEaClubId: Union[_int, 'types.IntWithAggregatesFilter']
    opponentEaTeamId: Union[_int, 'types.IntWithAggregatesFilter']
    opponentScore: Union[_int, 'types.IntWithAggregatesFilter']
    score: Union[_int, 'types.IntWithAggregatesFilter']
    ratingDefense: Union[_float, 'types.FloatWithAggregatesFilter']
    ratingOffense: Union[_float, 'types.FloatWithAggregatesFilter']
    ratingTeamplay: Union[_float, 'types.FloatWithAggregatesFilter']
    toi: Union[_int, 'types.IntWithAggregatesFilter']
    toiSeconds: Union[_int, 'types.IntWithAggregatesFilter']
    assists: Union[_int, 'types.IntWithAggregatesFilter']
    blockedShots: Union[_int, 'types.IntWithAggregatesFilter']
    deflections: Union[_int, 'types.IntWithAggregatesFilter']
    faceoffsLost: Union[_int, 'types.IntWithAggregatesFilter']
    faceoffPct: Union[_float, 'types.FloatWithAggregatesFilter']
    faceoffsWon: Union[_int, 'types.IntWithAggregatesFilter']
    giveaways: Union[_int, 'types.IntWithAggregatesFilter']
    goals: Union[_int, 'types.IntWithAggregatesFilter']
    hits: Union[_int, 'types.IntWithAggregatesFilter']
    interceptions: Union[_int, 'types.IntWithAggregatesFilter']
    passAttempts: Union[_int, 'types.IntWithAggregatesFilter']
    passes: Union[_int, 'types.IntWithAggregatesFilter']
    passPct: Union[_float, 'types.FloatWithAggregatesFilter']
    penaltiesDrawn: Union[_int, 'types.IntWithAggregatesFilter']
    penaltyMinutes: Union[_int, 'types.IntWithAggregatesFilter']
    skaterPkClearZone: Union[_int, 'types.IntWithAggregatesFilter']
    plusMinus: Union[_int, 'types.IntWithAggregatesFilter']
    possession: Union[_int, 'types.IntWithAggregatesFilter']
    powerPlayGoals: Union[_int, 'types.IntWithAggregatesFilter']
    saucerPasses: Union[_int, 'types.IntWithAggregatesFilter']
    shortHandedGoals: Union[_int, 'types.IntWithAggregatesFilter']
    shotAttempts: Union[_int, 'types.IntWithAggregatesFilter']
    shotOnNetPct: Union[_float, 'types.FloatWithAggregatesFilter']
    shots: Union[_int, 'types.IntWithAggregatesFilter']
    takeaways: Union[_int, 'types.IntWithAggregatesFilter']
    breakawaySavePct: Union[_float, 'types.FloatWithAggregatesFilter']
    breakawaySaves: Union[_int, 'types.IntWithAggregatesFilter']
    breakawayShots: Union[_int, 'types.IntWithAggregatesFilter']
    desperationSaves: Union[_int, 'types.IntWithAggregatesFilter']
    goalsAgainst: Union[_int, 'types.IntWithAggregatesFilter']
    goalsAgainstAverage: Union[_float, 'types.FloatWithAggregatesFilter']
    penaltyShotSavePct: Union[_float, 'types.FloatWithAggregatesFilter']
    penaltyShotSaves: Union[_int, 'types.IntWithAggregatesFilter']
    goaliePkClearZone: Union[_int, 'types.IntWithAggregatesFilter']
    pokeChecks: Union[_int, 'types.IntWithAggregatesFilter']
    savePct: Union[_float, 'types.FloatWithAggregatesFilter']
    totalSaves: Union[_int, 'types.IntWithAggregatesFilter']
    totalShotsFaced: Union[_int, 'types.IntWithAggregatesFilter']
    shutoutPeriods: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['ClubAggregateMatchStatsScalarWhereWithAggregatesInput']
    OR: List['ClubAggregateMatchStatsScalarWhereWithAggregatesInput']
    NOT: List['ClubAggregateMatchStatsScalarWhereWithAggregatesInput']



class ClubAggregateMatchStatsGroupByOutput(TypedDict, total=False):
    id: _str
    matchId: _str
    clubLevel: _int
    position: _int
    posSorted: _int
    isGuest: _int
    playerDnf: _int
    playerLevel: _int
    eaTeamId: _int
    teamSide: _int
    opponentEaClubId: _int
    opponentEaTeamId: _int
    opponentScore: _int
    score: _int
    ratingDefense: _float
    ratingOffense: _float
    ratingTeamplay: _float
    toi: _int
    toiSeconds: _int
    assists: _int
    blockedShots: _int
    deflections: _int
    faceoffsLost: _int
    faceoffPct: _float
    faceoffsWon: _int
    giveaways: _int
    goals: _int
    hits: _int
    interceptions: _int
    passAttempts: _int
    passes: _int
    passPct: _float
    penaltiesDrawn: _int
    penaltyMinutes: _int
    skaterPkClearZone: _int
    plusMinus: _int
    possession: _int
    powerPlayGoals: _int
    saucerPasses: _int
    shortHandedGoals: _int
    shotAttempts: _int
    shotOnNetPct: _float
    shots: _int
    takeaways: _int
    breakawaySavePct: _float
    breakawaySaves: _int
    breakawayShots: _int
    desperationSaves: _int
    goalsAgainst: _int
    goalsAgainstAverage: _float
    penaltyShotSavePct: _float
    penaltyShotSaves: _int
    goaliePkClearZone: _int
    pokeChecks: _int
    savePct: _float
    totalSaves: _int
    totalShotsFaced: _int
    shutoutPeriods: _int
    _sum: 'ClubAggregateMatchStatsSumAggregateOutput'
    _avg: 'ClubAggregateMatchStatsAvgAggregateOutput'
    _min: 'ClubAggregateMatchStatsMinAggregateOutput'
    _max: 'ClubAggregateMatchStatsMaxAggregateOutput'
    _count: 'ClubAggregateMatchStatsCountAggregateOutput'


class ClubAggregateMatchStatsAvgAggregateOutput(TypedDict, total=False):
    """ClubAggregateMatchStats output for aggregating averages"""
    clubLevel: float
    position: float
    posSorted: float
    isGuest: float
    playerDnf: float
    playerLevel: float
    eaTeamId: float
    teamSide: float
    opponentEaClubId: float
    opponentEaTeamId: float
    opponentScore: float
    score: float
    ratingDefense: float
    ratingOffense: float
    ratingTeamplay: float
    toi: float
    toiSeconds: float
    assists: float
    blockedShots: float
    deflections: float
    faceoffsLost: float
    faceoffPct: float
    faceoffsWon: float
    giveaways: float
    goals: float
    hits: float
    interceptions: float
    passAttempts: float
    passes: float
    passPct: float
    penaltiesDrawn: float
    penaltyMinutes: float
    skaterPkClearZone: float
    plusMinus: float
    possession: float
    powerPlayGoals: float
    saucerPasses: float
    shortHandedGoals: float
    shotAttempts: float
    shotOnNetPct: float
    shots: float
    takeaways: float
    breakawaySavePct: float
    breakawaySaves: float
    breakawayShots: float
    desperationSaves: float
    goalsAgainst: float
    goalsAgainstAverage: float
    penaltyShotSavePct: float
    penaltyShotSaves: float
    goaliePkClearZone: float
    pokeChecks: float
    savePct: float
    totalSaves: float
    totalShotsFaced: float
    shutoutPeriods: float


class ClubAggregateMatchStatsSumAggregateOutput(TypedDict, total=False):
    """ClubAggregateMatchStats output for aggregating sums"""
    clubLevel: _int
    position: _int
    posSorted: _int
    isGuest: _int
    playerDnf: _int
    playerLevel: _int
    eaTeamId: _int
    teamSide: _int
    opponentEaClubId: _int
    opponentEaTeamId: _int
    opponentScore: _int
    score: _int
    ratingDefense: _float
    ratingOffense: _float
    ratingTeamplay: _float
    toi: _int
    toiSeconds: _int
    assists: _int
    blockedShots: _int
    deflections: _int
    faceoffsLost: _int
    faceoffPct: _float
    faceoffsWon: _int
    giveaways: _int
    goals: _int
    hits: _int
    interceptions: _int
    passAttempts: _int
    passes: _int
    passPct: _float
    penaltiesDrawn: _int
    penaltyMinutes: _int
    skaterPkClearZone: _int
    plusMinus: _int
    possession: _int
    powerPlayGoals: _int
    saucerPasses: _int
    shortHandedGoals: _int
    shotAttempts: _int
    shotOnNetPct: _float
    shots: _int
    takeaways: _int
    breakawaySavePct: _float
    breakawaySaves: _int
    breakawayShots: _int
    desperationSaves: _int
    goalsAgainst: _int
    goalsAgainstAverage: _float
    penaltyShotSavePct: _float
    penaltyShotSaves: _int
    goaliePkClearZone: _int
    pokeChecks: _int
    savePct: _float
    totalSaves: _int
    totalShotsFaced: _int
    shutoutPeriods: _int


class ClubAggregateMatchStatsScalarAggregateOutput(TypedDict, total=False):
    """ClubAggregateMatchStats output including scalar fields"""
    id: _str
    matchId: _str
    clubLevel: _int
    position: _int
    posSorted: _int
    isGuest: _int
    playerDnf: _int
    playerLevel: _int
    eaTeamId: _int
    teamSide: _int
    opponentEaClubId: _int
    opponentEaTeamId: _int
    opponentScore: _int
    score: _int
    ratingDefense: _float
    ratingOffense: _float
    ratingTeamplay: _float
    toi: _int
    toiSeconds: _int
    assists: _int
    blockedShots: _int
    deflections: _int
    faceoffsLost: _int
    faceoffPct: _float
    faceoffsWon: _int
    giveaways: _int
    goals: _int
    hits: _int
    interceptions: _int
    passAttempts: _int
    passes: _int
    passPct: _float
    penaltiesDrawn: _int
    penaltyMinutes: _int
    skaterPkClearZone: _int
    plusMinus: _int
    possession: _int
    powerPlayGoals: _int
    saucerPasses: _int
    shortHandedGoals: _int
    shotAttempts: _int
    shotOnNetPct: _float
    shots: _int
    takeaways: _int
    breakawaySavePct: _float
    breakawaySaves: _int
    breakawayShots: _int
    desperationSaves: _int
    goalsAgainst: _int
    goalsAgainstAverage: _float
    penaltyShotSavePct: _float
    penaltyShotSaves: _int
    goaliePkClearZone: _int
    pokeChecks: _int
    savePct: _float
    totalSaves: _int
    totalShotsFaced: _int
    shutoutPeriods: _int


ClubAggregateMatchStatsMinAggregateOutput = ClubAggregateMatchStatsScalarAggregateOutput
ClubAggregateMatchStatsMaxAggregateOutput = ClubAggregateMatchStatsScalarAggregateOutput


class ClubAggregateMatchStatsMaxAggregateInput(TypedDict, total=False):
    """ClubAggregateMatchStats input for aggregating by max"""
    id: bool
    matchId: bool
    clubLevel: bool
    position: bool
    posSorted: bool
    isGuest: bool
    playerDnf: bool
    playerLevel: bool
    eaTeamId: bool
    teamSide: bool
    opponentEaClubId: bool
    opponentEaTeamId: bool
    opponentScore: bool
    score: bool
    ratingDefense: bool
    ratingOffense: bool
    ratingTeamplay: bool
    toi: bool
    toiSeconds: bool
    assists: bool
    blockedShots: bool
    deflections: bool
    faceoffsLost: bool
    faceoffPct: bool
    faceoffsWon: bool
    giveaways: bool
    goals: bool
    hits: bool
    interceptions: bool
    passAttempts: bool
    passes: bool
    passPct: bool
    penaltiesDrawn: bool
    penaltyMinutes: bool
    skaterPkClearZone: bool
    plusMinus: bool
    possession: bool
    powerPlayGoals: bool
    saucerPasses: bool
    shortHandedGoals: bool
    shotAttempts: bool
    shotOnNetPct: bool
    shots: bool
    takeaways: bool
    breakawaySavePct: bool
    breakawaySaves: bool
    breakawayShots: bool
    desperationSaves: bool
    goalsAgainst: bool
    goalsAgainstAverage: bool
    penaltyShotSavePct: bool
    penaltyShotSaves: bool
    goaliePkClearZone: bool
    pokeChecks: bool
    savePct: bool
    totalSaves: bool
    totalShotsFaced: bool
    shutoutPeriods: bool


class ClubAggregateMatchStatsMinAggregateInput(TypedDict, total=False):
    """ClubAggregateMatchStats input for aggregating by min"""
    id: bool
    matchId: bool
    clubLevel: bool
    position: bool
    posSorted: bool
    isGuest: bool
    playerDnf: bool
    playerLevel: bool
    eaTeamId: bool
    teamSide: bool
    opponentEaClubId: bool
    opponentEaTeamId: bool
    opponentScore: bool
    score: bool
    ratingDefense: bool
    ratingOffense: bool
    ratingTeamplay: bool
    toi: bool
    toiSeconds: bool
    assists: bool
    blockedShots: bool
    deflections: bool
    faceoffsLost: bool
    faceoffPct: bool
    faceoffsWon: bool
    giveaways: bool
    goals: bool
    hits: bool
    interceptions: bool
    passAttempts: bool
    passes: bool
    passPct: bool
    penaltiesDrawn: bool
    penaltyMinutes: bool
    skaterPkClearZone: bool
    plusMinus: bool
    possession: bool
    powerPlayGoals: bool
    saucerPasses: bool
    shortHandedGoals: bool
    shotAttempts: bool
    shotOnNetPct: bool
    shots: bool
    takeaways: bool
    breakawaySavePct: bool
    breakawaySaves: bool
    breakawayShots: bool
    desperationSaves: bool
    goalsAgainst: bool
    goalsAgainstAverage: bool
    penaltyShotSavePct: bool
    penaltyShotSaves: bool
    goaliePkClearZone: bool
    pokeChecks: bool
    savePct: bool
    totalSaves: bool
    totalShotsFaced: bool
    shutoutPeriods: bool


class ClubAggregateMatchStatsNumberAggregateInput(TypedDict, total=False):
    """ClubAggregateMatchStats input for aggregating numbers"""
    clubLevel: bool
    position: bool
    posSorted: bool
    isGuest: bool
    playerDnf: bool
    playerLevel: bool
    eaTeamId: bool
    teamSide: bool
    opponentEaClubId: bool
    opponentEaTeamId: bool
    opponentScore: bool
    score: bool
    ratingDefense: bool
    ratingOffense: bool
    ratingTeamplay: bool
    toi: bool
    toiSeconds: bool
    assists: bool
    blockedShots: bool
    deflections: bool
    faceoffsLost: bool
    faceoffPct: bool
    faceoffsWon: bool
    giveaways: bool
    goals: bool
    hits: bool
    interceptions: bool
    passAttempts: bool
    passes: bool
    passPct: bool
    penaltiesDrawn: bool
    penaltyMinutes: bool
    skaterPkClearZone: bool
    plusMinus: bool
    possession: bool
    powerPlayGoals: bool
    saucerPasses: bool
    shortHandedGoals: bool
    shotAttempts: bool
    shotOnNetPct: bool
    shots: bool
    takeaways: bool
    breakawaySavePct: bool
    breakawaySaves: bool
    breakawayShots: bool
    desperationSaves: bool
    goalsAgainst: bool
    goalsAgainstAverage: bool
    penaltyShotSavePct: bool
    penaltyShotSaves: bool
    goaliePkClearZone: bool
    pokeChecks: bool
    savePct: bool
    totalSaves: bool
    totalShotsFaced: bool
    shutoutPeriods: bool


ClubAggregateMatchStatsAvgAggregateInput = ClubAggregateMatchStatsNumberAggregateInput
ClubAggregateMatchStatsSumAggregateInput = ClubAggregateMatchStatsNumberAggregateInput


ClubAggregateMatchStatsCountAggregateInput = TypedDict(
    'ClubAggregateMatchStatsCountAggregateInput',
    {
        'id': bool,
        'matchId': bool,
        'clubLevel': bool,
        'position': bool,
        'posSorted': bool,
        'isGuest': bool,
        'playerDnf': bool,
        'playerLevel': bool,
        'eaTeamId': bool,
        'teamSide': bool,
        'opponentEaClubId': bool,
        'opponentEaTeamId': bool,
        'opponentScore': bool,
        'score': bool,
        'ratingDefense': bool,
        'ratingOffense': bool,
        'ratingTeamplay': bool,
        'toi': bool,
        'toiSeconds': bool,
        'assists': bool,
        'blockedShots': bool,
        'deflections': bool,
        'faceoffsLost': bool,
        'faceoffPct': bool,
        'faceoffsWon': bool,
        'giveaways': bool,
        'goals': bool,
        'hits': bool,
        'interceptions': bool,
        'passAttempts': bool,
        'passes': bool,
        'passPct': bool,
        'penaltiesDrawn': bool,
        'penaltyMinutes': bool,
        'skaterPkClearZone': bool,
        'plusMinus': bool,
        'possession': bool,
        'powerPlayGoals': bool,
        'saucerPasses': bool,
        'shortHandedGoals': bool,
        'shotAttempts': bool,
        'shotOnNetPct': bool,
        'shots': bool,
        'takeaways': bool,
        'breakawaySavePct': bool,
        'breakawaySaves': bool,
        'breakawayShots': bool,
        'desperationSaves': bool,
        'goalsAgainst': bool,
        'goalsAgainstAverage': bool,
        'penaltyShotSavePct': bool,
        'penaltyShotSaves': bool,
        'goaliePkClearZone': bool,
        'pokeChecks': bool,
        'savePct': bool,
        'totalSaves': bool,
        'totalShotsFaced': bool,
        'shutoutPeriods': bool,
        '_all': bool,
    },
    total=False,
)

ClubAggregateMatchStatsCountAggregateOutput = TypedDict(
    'ClubAggregateMatchStatsCountAggregateOutput',
    {
        'id': int,
        'matchId': int,
        'clubLevel': int,
        'position': int,
        'posSorted': int,
        'isGuest': int,
        'playerDnf': int,
        'playerLevel': int,
        'eaTeamId': int,
        'teamSide': int,
        'opponentEaClubId': int,
        'opponentEaTeamId': int,
        'opponentScore': int,
        'score': int,
        'ratingDefense': int,
        'ratingOffense': int,
        'ratingTeamplay': int,
        'toi': int,
        'toiSeconds': int,
        'assists': int,
        'blockedShots': int,
        'deflections': int,
        'faceoffsLost': int,
        'faceoffPct': int,
        'faceoffsWon': int,
        'giveaways': int,
        'goals': int,
        'hits': int,
        'interceptions': int,
        'passAttempts': int,
        'passes': int,
        'passPct': int,
        'penaltiesDrawn': int,
        'penaltyMinutes': int,
        'skaterPkClearZone': int,
        'plusMinus': int,
        'possession': int,
        'powerPlayGoals': int,
        'saucerPasses': int,
        'shortHandedGoals': int,
        'shotAttempts': int,
        'shotOnNetPct': int,
        'shots': int,
        'takeaways': int,
        'breakawaySavePct': int,
        'breakawaySaves': int,
        'breakawayShots': int,
        'desperationSaves': int,
        'goalsAgainst': int,
        'goalsAgainstAverage': int,
        'penaltyShotSavePct': int,
        'penaltyShotSaves': int,
        'goaliePkClearZone': int,
        'pokeChecks': int,
        'savePct': int,
        'totalSaves': int,
        'totalShotsFaced': int,
        'shutoutPeriods': int,
        '_all': int,
    },
    total=False,
)


ClubAggregateMatchStatsKeys = Literal[
    'id',
    'matchId',
    'clubLevel',
    'position',
    'posSorted',
    'isGuest',
    'playerDnf',
    'playerLevel',
    'eaTeamId',
    'teamSide',
    'opponentEaClubId',
    'opponentEaTeamId',
    'opponentScore',
    'score',
    'ratingDefense',
    'ratingOffense',
    'ratingTeamplay',
    'toi',
    'toiSeconds',
    'assists',
    'blockedShots',
    'deflections',
    'faceoffsLost',
    'faceoffPct',
    'faceoffsWon',
    'giveaways',
    'goals',
    'hits',
    'interceptions',
    'passAttempts',
    'passes',
    'passPct',
    'penaltiesDrawn',
    'penaltyMinutes',
    'skaterPkClearZone',
    'plusMinus',
    'possession',
    'powerPlayGoals',
    'saucerPasses',
    'shortHandedGoals',
    'shotAttempts',
    'shotOnNetPct',
    'shots',
    'takeaways',
    'breakawaySavePct',
    'breakawaySaves',
    'breakawayShots',
    'desperationSaves',
    'goalsAgainst',
    'goalsAgainstAverage',
    'penaltyShotSavePct',
    'penaltyShotSaves',
    'goaliePkClearZone',
    'pokeChecks',
    'savePct',
    'totalSaves',
    'totalShotsFaced',
    'shutoutPeriods',
    'match',
]
ClubAggregateMatchStatsScalarFieldKeys = Literal[
    'id',
    'matchId',
    'clubLevel',
    'position',
    'posSorted',
    'isGuest',
    'playerDnf',
    'playerLevel',
    'eaTeamId',
    'teamSide',
    'opponentEaClubId',
    'opponentEaTeamId',
    'opponentScore',
    'score',
    'ratingDefense',
    'ratingOffense',
    'ratingTeamplay',
    'toi',
    'toiSeconds',
    'assists',
    'blockedShots',
    'deflections',
    'faceoffsLost',
    'faceoffPct',
    'faceoffsWon',
    'giveaways',
    'goals',
    'hits',
    'interceptions',
    'passAttempts',
    'passes',
    'passPct',
    'penaltiesDrawn',
    'penaltyMinutes',
    'skaterPkClearZone',
    'plusMinus',
    'possession',
    'powerPlayGoals',
    'saucerPasses',
    'shortHandedGoals',
    'shotAttempts',
    'shotOnNetPct',
    'shots',
    'takeaways',
    'breakawaySavePct',
    'breakawaySaves',
    'breakawayShots',
    'desperationSaves',
    'goalsAgainst',
    'goalsAgainstAverage',
    'penaltyShotSavePct',
    'penaltyShotSaves',
    'goaliePkClearZone',
    'pokeChecks',
    'savePct',
    'totalSaves',
    'totalShotsFaced',
    'shutoutPeriods',
]
ClubAggregateMatchStatsScalarFieldKeysT = TypeVar('ClubAggregateMatchStatsScalarFieldKeysT', bound=ClubAggregateMatchStatsScalarFieldKeys)

ClubAggregateMatchStatsRelationalFieldKeys = Literal[
        'match',
    ]

# MatchAnalytics types

class MatchAnalyticsOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the MatchAnalytics create method"""
    id: _str
    matchId: _str
    match: 'MatchCreateNestedWithoutRelationsInput'


class MatchAnalyticsCreateInput(MatchAnalyticsOptionalCreateInput):
    """Required arguments to the MatchAnalytics create method"""
    possessionDifferential: _int
    possessionPercentageHome: _float
    possessionPercentageAway: _float
    homeShootingEfficiency: _float
    awayShootingEfficiency: _float
    homePassingEfficiency: _float
    awayPassingEfficiency: _float
    homePossessionEfficiency: _float
    awayPossessionEfficiency: _float
    homePowerPlayPct: _float
    awayPowerPlayPct: _float
    homePenaltyKillPct: _float
    awayPenaltyKillPct: _float
    homeScore: _float
    awayScore: _float
    shotDifferential: _int
    hitDifferential: _int
    takeawayDifferential: _int
    scoringChancesDifferential: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MatchAnalyticsOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the MatchAnalytics create method, without relations"""
    id: _str
    matchId: _str


class MatchAnalyticsCreateWithoutRelationsInput(MatchAnalyticsOptionalCreateWithoutRelationsInput):
    """Required arguments to the MatchAnalytics create method, without relations"""
    possessionDifferential: _int
    possessionPercentageHome: _float
    possessionPercentageAway: _float
    homeShootingEfficiency: _float
    awayShootingEfficiency: _float
    homePassingEfficiency: _float
    awayPassingEfficiency: _float
    homePossessionEfficiency: _float
    awayPossessionEfficiency: _float
    homePowerPlayPct: _float
    awayPowerPlayPct: _float
    homePenaltyKillPct: _float
    awayPenaltyKillPct: _float
    homeScore: _float
    awayScore: _float
    shotDifferential: _int
    hitDifferential: _int
    takeawayDifferential: _int
    scoringChancesDifferential: _int

class MatchAnalyticsConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MatchAnalyticsCreateWithoutRelationsInput'
    where: 'MatchAnalyticsWhereUniqueInput'

class MatchAnalyticsCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MatchAnalyticsCreateWithoutRelationsInput'
    connect: 'MatchAnalyticsWhereUniqueInput'
    connect_or_create: 'MatchAnalyticsConnectOrCreateWithoutRelationsInput'


class MatchAnalyticsCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MatchAnalyticsCreateWithoutRelationsInput', List['MatchAnalyticsCreateWithoutRelationsInput']]
    connect: Union['MatchAnalyticsWhereUniqueInput', List['MatchAnalyticsWhereUniqueInput']]
    connect_or_create: Union['MatchAnalyticsConnectOrCreateWithoutRelationsInput', List['MatchAnalyticsConnectOrCreateWithoutRelationsInput']]

_MatchAnalyticsWhereUnique_id_Input = TypedDict(
    '_MatchAnalyticsWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MatchAnalyticsWhereUniqueInput = _MatchAnalyticsWhereUnique_id_Input


class MatchAnalyticsUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    possessionDifferential: Union[AtomicIntInput, _int]
    possessionPercentageHome: Union[AtomicFloatInput, _float]
    possessionPercentageAway: Union[AtomicFloatInput, _float]
    homeShootingEfficiency: Union[AtomicFloatInput, _float]
    awayShootingEfficiency: Union[AtomicFloatInput, _float]
    homePassingEfficiency: Union[AtomicFloatInput, _float]
    awayPassingEfficiency: Union[AtomicFloatInput, _float]
    homePossessionEfficiency: Union[AtomicFloatInput, _float]
    awayPossessionEfficiency: Union[AtomicFloatInput, _float]
    homePowerPlayPct: Union[AtomicFloatInput, _float]
    awayPowerPlayPct: Union[AtomicFloatInput, _float]
    homePenaltyKillPct: Union[AtomicFloatInput, _float]
    awayPenaltyKillPct: Union[AtomicFloatInput, _float]
    homeScore: Union[AtomicFloatInput, _float]
    awayScore: Union[AtomicFloatInput, _float]
    shotDifferential: Union[AtomicIntInput, _int]
    hitDifferential: Union[AtomicIntInput, _int]
    takeawayDifferential: Union[AtomicIntInput, _int]
    scoringChancesDifferential: Union[AtomicIntInput, _int]
    match: 'MatchUpdateOneWithoutRelationsInput'


class MatchAnalyticsUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    possessionDifferential: Union[AtomicIntInput, _int]
    possessionPercentageHome: Union[AtomicFloatInput, _float]
    possessionPercentageAway: Union[AtomicFloatInput, _float]
    homeShootingEfficiency: Union[AtomicFloatInput, _float]
    awayShootingEfficiency: Union[AtomicFloatInput, _float]
    homePassingEfficiency: Union[AtomicFloatInput, _float]
    awayPassingEfficiency: Union[AtomicFloatInput, _float]
    homePossessionEfficiency: Union[AtomicFloatInput, _float]
    awayPossessionEfficiency: Union[AtomicFloatInput, _float]
    homePowerPlayPct: Union[AtomicFloatInput, _float]
    awayPowerPlayPct: Union[AtomicFloatInput, _float]
    homePenaltyKillPct: Union[AtomicFloatInput, _float]
    awayPenaltyKillPct: Union[AtomicFloatInput, _float]
    homeScore: Union[AtomicFloatInput, _float]
    awayScore: Union[AtomicFloatInput, _float]
    shotDifferential: Union[AtomicIntInput, _int]
    hitDifferential: Union[AtomicIntInput, _int]
    takeawayDifferential: Union[AtomicIntInput, _int]
    scoringChancesDifferential: Union[AtomicIntInput, _int]


class MatchAnalyticsUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MatchAnalyticsCreateWithoutRelationsInput']
    connect: List['MatchAnalyticsWhereUniqueInput']
    connect_or_create: List['MatchAnalyticsConnectOrCreateWithoutRelationsInput']
    set: List['MatchAnalyticsWhereUniqueInput']
    disconnect: List['MatchAnalyticsWhereUniqueInput']
    delete: List['MatchAnalyticsWhereUniqueInput']

    # TODO
    # update: List['MatchAnalyticsUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MatchAnalyticsUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MatchAnalyticsScalarWhereInput']
    # upsert: List['MatchAnalyticsUpserteWithWhereUniqueWithoutRelationsInput']


class MatchAnalyticsUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MatchAnalyticsCreateWithoutRelationsInput'
    connect: 'MatchAnalyticsWhereUniqueInput'
    connect_or_create: 'MatchAnalyticsConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MatchAnalyticsUpdateInput'
    # upsert: 'MatchAnalyticsUpsertWithoutRelationsInput'


class MatchAnalyticsUpsertInput(TypedDict):
    create: 'MatchAnalyticsCreateInput'
    update: 'MatchAnalyticsUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_MatchAnalytics_id_OrderByInput = TypedDict(
    '_MatchAnalytics_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_matchId_OrderByInput = TypedDict(
    '_MatchAnalytics_matchId_OrderByInput',
    {
        'matchId': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_possessionDifferential_OrderByInput = TypedDict(
    '_MatchAnalytics_possessionDifferential_OrderByInput',
    {
        'possessionDifferential': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_possessionPercentageHome_OrderByInput = TypedDict(
    '_MatchAnalytics_possessionPercentageHome_OrderByInput',
    {
        'possessionPercentageHome': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_possessionPercentageAway_OrderByInput = TypedDict(
    '_MatchAnalytics_possessionPercentageAway_OrderByInput',
    {
        'possessionPercentageAway': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_homeShootingEfficiency_OrderByInput = TypedDict(
    '_MatchAnalytics_homeShootingEfficiency_OrderByInput',
    {
        'homeShootingEfficiency': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_awayShootingEfficiency_OrderByInput = TypedDict(
    '_MatchAnalytics_awayShootingEfficiency_OrderByInput',
    {
        'awayShootingEfficiency': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_homePassingEfficiency_OrderByInput = TypedDict(
    '_MatchAnalytics_homePassingEfficiency_OrderByInput',
    {
        'homePassingEfficiency': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_awayPassingEfficiency_OrderByInput = TypedDict(
    '_MatchAnalytics_awayPassingEfficiency_OrderByInput',
    {
        'awayPassingEfficiency': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_homePossessionEfficiency_OrderByInput = TypedDict(
    '_MatchAnalytics_homePossessionEfficiency_OrderByInput',
    {
        'homePossessionEfficiency': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_awayPossessionEfficiency_OrderByInput = TypedDict(
    '_MatchAnalytics_awayPossessionEfficiency_OrderByInput',
    {
        'awayPossessionEfficiency': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_homePowerPlayPct_OrderByInput = TypedDict(
    '_MatchAnalytics_homePowerPlayPct_OrderByInput',
    {
        'homePowerPlayPct': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_awayPowerPlayPct_OrderByInput = TypedDict(
    '_MatchAnalytics_awayPowerPlayPct_OrderByInput',
    {
        'awayPowerPlayPct': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_homePenaltyKillPct_OrderByInput = TypedDict(
    '_MatchAnalytics_homePenaltyKillPct_OrderByInput',
    {
        'homePenaltyKillPct': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_awayPenaltyKillPct_OrderByInput = TypedDict(
    '_MatchAnalytics_awayPenaltyKillPct_OrderByInput',
    {
        'awayPenaltyKillPct': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_homeScore_OrderByInput = TypedDict(
    '_MatchAnalytics_homeScore_OrderByInput',
    {
        'homeScore': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_awayScore_OrderByInput = TypedDict(
    '_MatchAnalytics_awayScore_OrderByInput',
    {
        'awayScore': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_shotDifferential_OrderByInput = TypedDict(
    '_MatchAnalytics_shotDifferential_OrderByInput',
    {
        'shotDifferential': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_hitDifferential_OrderByInput = TypedDict(
    '_MatchAnalytics_hitDifferential_OrderByInput',
    {
        'hitDifferential': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_takeawayDifferential_OrderByInput = TypedDict(
    '_MatchAnalytics_takeawayDifferential_OrderByInput',
    {
        'takeawayDifferential': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_scoringChancesDifferential_OrderByInput = TypedDict(
    '_MatchAnalytics_scoringChancesDifferential_OrderByInput',
    {
        'scoringChancesDifferential': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_RelevanceInner = TypedDict(
    '_MatchAnalytics_RelevanceInner',
    {
        'fields': 'List[MatchAnalyticsScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_MatchAnalytics_RelevanceOrderByInput = TypedDict(
    '_MatchAnalytics_RelevanceOrderByInput',
    {
        '_relevance': '_MatchAnalytics_RelevanceInner',
    },
    total=True
)

MatchAnalyticsOrderByInput = Union[
    '_MatchAnalytics_id_OrderByInput',
    '_MatchAnalytics_matchId_OrderByInput',
    '_MatchAnalytics_possessionDifferential_OrderByInput',
    '_MatchAnalytics_possessionPercentageHome_OrderByInput',
    '_MatchAnalytics_possessionPercentageAway_OrderByInput',
    '_MatchAnalytics_homeShootingEfficiency_OrderByInput',
    '_MatchAnalytics_awayShootingEfficiency_OrderByInput',
    '_MatchAnalytics_homePassingEfficiency_OrderByInput',
    '_MatchAnalytics_awayPassingEfficiency_OrderByInput',
    '_MatchAnalytics_homePossessionEfficiency_OrderByInput',
    '_MatchAnalytics_awayPossessionEfficiency_OrderByInput',
    '_MatchAnalytics_homePowerPlayPct_OrderByInput',
    '_MatchAnalytics_awayPowerPlayPct_OrderByInput',
    '_MatchAnalytics_homePenaltyKillPct_OrderByInput',
    '_MatchAnalytics_awayPenaltyKillPct_OrderByInput',
    '_MatchAnalytics_homeScore_OrderByInput',
    '_MatchAnalytics_awayScore_OrderByInput',
    '_MatchAnalytics_shotDifferential_OrderByInput',
    '_MatchAnalytics_hitDifferential_OrderByInput',
    '_MatchAnalytics_takeawayDifferential_OrderByInput',
    '_MatchAnalytics_scoringChancesDifferential_OrderByInput',
    '_MatchAnalytics_RelevanceOrderByInput',
]



# recursive MatchAnalytics types
# TODO: cleanup these types



MatchAnalyticsRelationFilter = TypedDict(
    'MatchAnalyticsRelationFilter',
    {
        'is': 'MatchAnalyticsWhereInput',
        'is_not': 'MatchAnalyticsWhereInput',
    },
    total=False,
)


class MatchAnalyticsListRelationFilter(TypedDict, total=False):
    some: 'MatchAnalyticsWhereInput'
    none: 'MatchAnalyticsWhereInput'
    every: 'MatchAnalyticsWhereInput'


class MatchAnalyticsInclude(TypedDict, total=False):
    """MatchAnalytics relational arguments"""
    match: Union[bool, 'MatchArgsFromMatchAnalytics']


class ForumPostIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    author: Union[bool, 'UserArgsFromMatchAnalytics']
    comments: Union[bool, 'FindManyForumCommentArgsFromMatchAnalytics']
    reactions: Union[bool, 'FindManyForumReactionArgsFromMatchAnalytics']
    followers: Union[bool, 'FindManyForumFollowerArgsFromMatchAnalytics']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromMatchAnalytics']


class ForumPostArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']
    post: Union[bool, 'ForumPostArgsFromMatchAnalytics']
    comment: Union[bool, 'ForumCommentArgsFromMatchAnalytics']


class ForumReactionArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']
    post: Union[bool, 'ForumPostArgsFromMatchAnalytics']


class ForumFollowerArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']
    post: Union[bool, 'ForumPostArgsFromMatchAnalytics']


class ForumPostSubscriptionArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    author: Union[bool, 'UserArgsFromMatchAnalytics']
    post: Union[bool, 'ForumPostArgsFromMatchAnalytics']
    quotedComment: Union[bool, 'ForumCommentArgsFromMatchAnalytics']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromMatchAnalytics']
    reactions: Union[bool, 'FindManyForumReactionArgsFromMatchAnalytics']


class ForumCommentArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    parentLeague: Union[bool, 'LeagueArgsFromMatchAnalytics']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromMatchAnalytics']
    conferences: Union[bool, 'FindManyConferenceArgsFromMatchAnalytics']
    divisions: Union[bool, 'FindManyDivisionArgsFromMatchAnalytics']
    teams: Union[bool, 'FindManyTeamArgsFromMatchAnalytics']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromMatchAnalytics']


class LeagueArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    league: Union[bool, 'LeagueArgsFromMatchAnalytics']
    season: Union[bool, 'SeasonArgsFromMatchAnalytics']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromMatchAnalytics']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromMatchAnalytics']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromMatchAnalytics']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromMatchAnalytics']


class LeagueSeasonArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    league: Union[bool, 'LeagueArgsFromMatchAnalytics']
    divisions: Union[bool, 'FindManyDivisionArgsFromMatchAnalytics']


class ConferenceArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    conference: Union[bool, 'ConferenceArgsFromMatchAnalytics']
    league: Union[bool, 'LeagueArgsFromMatchAnalytics']
    teams: Union[bool, 'FindManyTeamArgsFromMatchAnalytics']


class DivisionArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromMatchAnalytics']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromMatchAnalytics']


class SeasonArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromMatchAnalytics']


class LeagueCommissionerArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromMatchAnalytics']


class LeagueBOGArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromMatchAnalytics']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromMatchAnalytics']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromMatchAnalytics']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromMatchAnalytics']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromMatchAnalytics']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromMatchAnalytics']


class MatchArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromMatchAnalytics']
    match: Union[bool, 'MatchArgsFromMatchAnalytics']


class ClubMatchStatsArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    customKit: Union[bool, 'CustomKitArgsFromMatchAnalytics']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromMatchAnalytics']


class ClubMatchStatsDetailsArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromMatchAnalytics']


class CustomKitArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    match: Union[bool, 'MatchArgsFromMatchAnalytics']


class ClubAggregateMatchStatsArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    match: Union[bool, 'MatchArgsFromMatchAnalytics']


class MatchAnalyticsArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    match: Union[bool, 'MatchArgsFromMatchAnalytics']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromMatchAnalytics']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromMatchAnalytics']


class PlayerMatchArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']
    season: Union[bool, 'SeasonArgsFromMatchAnalytics']
    contract: Union[bool, 'ContractArgsFromMatchAnalytics']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromMatchAnalytics']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromMatchAnalytics']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromMatchAnalytics']
    matches: Union[bool, 'FindManyMatchArgsFromMatchAnalytics']


class PlayerSeasonArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromMatchAnalytics']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromMatchAnalytics']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromMatchAnalytics']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromMatchAnalytics']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromMatchAnalytics']


class PlayerTeamSeasonArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromMatchAnalytics']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromMatchAnalytics']


class PlayerLeagueHistoryArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromMatchAnalytics']
    trophySummary: Union[bool, 'PSNTrophyArgsFromMatchAnalytics']
    games: Union[bool, 'FindManyPSNGameArgsFromMatchAnalytics']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromMatchAnalytics']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromMatchAnalytics']


class PSNProfileArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    profile: Union[bool, 'PSNProfileArgsFromMatchAnalytics']


class PSNAvatarArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    profile: Union[bool, 'PSNProfileArgsFromMatchAnalytics']


class PSNTrophyArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    profile: Union[bool, 'PSNProfileArgsFromMatchAnalytics']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromMatchAnalytics']


class PSNGameArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    profile: Union[bool, 'PSNProfileArgsFromMatchAnalytics']


class PSNSyncLogArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    profile: Union[bool, 'PSNProfileArgsFromMatchAnalytics']
    game: Union[bool, 'PSNGameArgsFromMatchAnalytics']


class PSNGameTrophiesArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    league: Union[bool, 'LeagueArgsFromMatchAnalytics']
    division: Union[bool, 'DivisionArgsFromMatchAnalytics']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromMatchAnalytics']
    nhlAffiliate: Union[bool, 'TeamArgsFromMatchAnalytics']
    ahlAffiliate: Union[bool, 'TeamArgsFromMatchAnalytics']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromMatchAnalytics']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromMatchAnalytics']


class TeamArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    team: Union[bool, 'TeamArgsFromMatchAnalytics']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromMatchAnalytics']
    matches: Union[bool, 'FindManyMatchArgsFromMatchAnalytics']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromMatchAnalytics']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromMatchAnalytics']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromMatchAnalytics']
    bids: Union[bool, 'FindManyBidArgsFromMatchAnalytics']
    managers: Union[bool, 'FindManyTeamManagerArgsFromMatchAnalytics']


class TeamSeasonArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']
    teamSeason: Union[bool, 'TeamSeasonArgsFromMatchAnalytics']


class TeamManagerArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    contract: Union[bool, 'ContractArgsFromMatchAnalytics']
    teamSeason: Union[bool, 'TeamSeasonArgsFromMatchAnalytics']


class BidArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromMatchAnalytics']
    bids: Union[bool, 'FindManyBidArgsFromMatchAnalytics']


class ContractArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    notifications: Union[bool, 'FindManyNotificationArgsFromMatchAnalytics']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromMatchAnalytics']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromMatchAnalytics']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromMatchAnalytics']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromMatchAnalytics']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromMatchAnalytics']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromMatchAnalytics']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromMatchAnalytics']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromMatchAnalytics']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromMatchAnalytics']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromMatchAnalytics']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromMatchAnalytics']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromMatchAnalytics']
    psnProfile: Union[bool, 'PSNProfileArgsFromMatchAnalytics']


class UserArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']


class EaIdHistoryArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']


class SystemHistoryArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']


class GamertagHistoryArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromMatchAnalytics(TypedDict, total=False):
    """Relational arguments for MatchAnalytics"""
    user: Union[bool, 'UserArgsFromMatchAnalytics']


class NotificationArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromMatchAnalytics(TypedDict, total=False):
    """Arguments for MatchAnalytics"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyMatchAnalyticsArgs = FindManyMatchAnalyticsArgsFromMatchAnalytics
FindFirstMatchAnalyticsArgs = FindManyMatchAnalyticsArgsFromMatchAnalytics


class MatchAnalyticsWhereInput(TypedDict, total=False):
    """MatchAnalytics arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    matchId: Union[_str, 'types.StringFilter']
    possessionDifferential: Union[_int, 'types.IntFilter']
    possessionPercentageHome: Union[_float, 'types.FloatFilter']
    possessionPercentageAway: Union[_float, 'types.FloatFilter']
    homeShootingEfficiency: Union[_float, 'types.FloatFilter']
    awayShootingEfficiency: Union[_float, 'types.FloatFilter']
    homePassingEfficiency: Union[_float, 'types.FloatFilter']
    awayPassingEfficiency: Union[_float, 'types.FloatFilter']
    homePossessionEfficiency: Union[_float, 'types.FloatFilter']
    awayPossessionEfficiency: Union[_float, 'types.FloatFilter']
    homePowerPlayPct: Union[_float, 'types.FloatFilter']
    awayPowerPlayPct: Union[_float, 'types.FloatFilter']
    homePenaltyKillPct: Union[_float, 'types.FloatFilter']
    awayPenaltyKillPct: Union[_float, 'types.FloatFilter']
    homeScore: Union[_float, 'types.FloatFilter']
    awayScore: Union[_float, 'types.FloatFilter']
    shotDifferential: Union[_int, 'types.IntFilter']
    hitDifferential: Union[_int, 'types.IntFilter']
    takeawayDifferential: Union[_int, 'types.IntFilter']
    scoringChancesDifferential: Union[_int, 'types.IntFilter']
    match: 'MatchRelationFilter'

    # should be noted that AND and NOT should be Union['MatchAnalyticsWhereInput', List['MatchAnalyticsWhereInput']]
    # but this causes mypy to hang :/
    AND: List['MatchAnalyticsWhereInput']
    OR: List['MatchAnalyticsWhereInput']
    NOT: List['MatchAnalyticsWhereInput']



# aggregate MatchAnalytics types


class MatchAnalyticsScalarWhereWithAggregatesInput(TypedDict, total=False):
    """MatchAnalytics arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    matchId: Union[_str, 'types.StringWithAggregatesFilter']
    possessionDifferential: Union[_int, 'types.IntWithAggregatesFilter']
    possessionPercentageHome: Union[_float, 'types.FloatWithAggregatesFilter']
    possessionPercentageAway: Union[_float, 'types.FloatWithAggregatesFilter']
    homeShootingEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    awayShootingEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    homePassingEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    awayPassingEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    homePossessionEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    awayPossessionEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    homePowerPlayPct: Union[_float, 'types.FloatWithAggregatesFilter']
    awayPowerPlayPct: Union[_float, 'types.FloatWithAggregatesFilter']
    homePenaltyKillPct: Union[_float, 'types.FloatWithAggregatesFilter']
    awayPenaltyKillPct: Union[_float, 'types.FloatWithAggregatesFilter']
    homeScore: Union[_float, 'types.FloatWithAggregatesFilter']
    awayScore: Union[_float, 'types.FloatWithAggregatesFilter']
    shotDifferential: Union[_int, 'types.IntWithAggregatesFilter']
    hitDifferential: Union[_int, 'types.IntWithAggregatesFilter']
    takeawayDifferential: Union[_int, 'types.IntWithAggregatesFilter']
    scoringChancesDifferential: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['MatchAnalyticsScalarWhereWithAggregatesInput']
    OR: List['MatchAnalyticsScalarWhereWithAggregatesInput']
    NOT: List['MatchAnalyticsScalarWhereWithAggregatesInput']



class MatchAnalyticsGroupByOutput(TypedDict, total=False):
    id: _str
    matchId: _str
    possessionDifferential: _int
    possessionPercentageHome: _float
    possessionPercentageAway: _float
    homeShootingEfficiency: _float
    awayShootingEfficiency: _float
    homePassingEfficiency: _float
    awayPassingEfficiency: _float
    homePossessionEfficiency: _float
    awayPossessionEfficiency: _float
    homePowerPlayPct: _float
    awayPowerPlayPct: _float
    homePenaltyKillPct: _float
    awayPenaltyKillPct: _float
    homeScore: _float
    awayScore: _float
    shotDifferential: _int
    hitDifferential: _int
    takeawayDifferential: _int
    scoringChancesDifferential: _int
    _sum: 'MatchAnalyticsSumAggregateOutput'
    _avg: 'MatchAnalyticsAvgAggregateOutput'
    _min: 'MatchAnalyticsMinAggregateOutput'
    _max: 'MatchAnalyticsMaxAggregateOutput'
    _count: 'MatchAnalyticsCountAggregateOutput'


class MatchAnalyticsAvgAggregateOutput(TypedDict, total=False):
    """MatchAnalytics output for aggregating averages"""
    possessionDifferential: float
    possessionPercentageHome: float
    possessionPercentageAway: float
    homeShootingEfficiency: float
    awayShootingEfficiency: float
    homePassingEfficiency: float
    awayPassingEfficiency: float
    homePossessionEfficiency: float
    awayPossessionEfficiency: float
    homePowerPlayPct: float
    awayPowerPlayPct: float
    homePenaltyKillPct: float
    awayPenaltyKillPct: float
    homeScore: float
    awayScore: float
    shotDifferential: float
    hitDifferential: float
    takeawayDifferential: float
    scoringChancesDifferential: float


class MatchAnalyticsSumAggregateOutput(TypedDict, total=False):
    """MatchAnalytics output for aggregating sums"""
    possessionDifferential: _int
    possessionPercentageHome: _float
    possessionPercentageAway: _float
    homeShootingEfficiency: _float
    awayShootingEfficiency: _float
    homePassingEfficiency: _float
    awayPassingEfficiency: _float
    homePossessionEfficiency: _float
    awayPossessionEfficiency: _float
    homePowerPlayPct: _float
    awayPowerPlayPct: _float
    homePenaltyKillPct: _float
    awayPenaltyKillPct: _float
    homeScore: _float
    awayScore: _float
    shotDifferential: _int
    hitDifferential: _int
    takeawayDifferential: _int
    scoringChancesDifferential: _int


class MatchAnalyticsScalarAggregateOutput(TypedDict, total=False):
    """MatchAnalytics output including scalar fields"""
    id: _str
    matchId: _str
    possessionDifferential: _int
    possessionPercentageHome: _float
    possessionPercentageAway: _float
    homeShootingEfficiency: _float
    awayShootingEfficiency: _float
    homePassingEfficiency: _float
    awayPassingEfficiency: _float
    homePossessionEfficiency: _float
    awayPossessionEfficiency: _float
    homePowerPlayPct: _float
    awayPowerPlayPct: _float
    homePenaltyKillPct: _float
    awayPenaltyKillPct: _float
    homeScore: _float
    awayScore: _float
    shotDifferential: _int
    hitDifferential: _int
    takeawayDifferential: _int
    scoringChancesDifferential: _int


MatchAnalyticsMinAggregateOutput = MatchAnalyticsScalarAggregateOutput
MatchAnalyticsMaxAggregateOutput = MatchAnalyticsScalarAggregateOutput


class MatchAnalyticsMaxAggregateInput(TypedDict, total=False):
    """MatchAnalytics input for aggregating by max"""
    id: bool
    matchId: bool
    possessionDifferential: bool
    possessionPercentageHome: bool
    possessionPercentageAway: bool
    homeShootingEfficiency: bool
    awayShootingEfficiency: bool
    homePassingEfficiency: bool
    awayPassingEfficiency: bool
    homePossessionEfficiency: bool
    awayPossessionEfficiency: bool
    homePowerPlayPct: bool
    awayPowerPlayPct: bool
    homePenaltyKillPct: bool
    awayPenaltyKillPct: bool
    homeScore: bool
    awayScore: bool
    shotDifferential: bool
    hitDifferential: bool
    takeawayDifferential: bool
    scoringChancesDifferential: bool


class MatchAnalyticsMinAggregateInput(TypedDict, total=False):
    """MatchAnalytics input for aggregating by min"""
    id: bool
    matchId: bool
    possessionDifferential: bool
    possessionPercentageHome: bool
    possessionPercentageAway: bool
    homeShootingEfficiency: bool
    awayShootingEfficiency: bool
    homePassingEfficiency: bool
    awayPassingEfficiency: bool
    homePossessionEfficiency: bool
    awayPossessionEfficiency: bool
    homePowerPlayPct: bool
    awayPowerPlayPct: bool
    homePenaltyKillPct: bool
    awayPenaltyKillPct: bool
    homeScore: bool
    awayScore: bool
    shotDifferential: bool
    hitDifferential: bool
    takeawayDifferential: bool
    scoringChancesDifferential: bool


class MatchAnalyticsNumberAggregateInput(TypedDict, total=False):
    """MatchAnalytics input for aggregating numbers"""
    possessionDifferential: bool
    possessionPercentageHome: bool
    possessionPercentageAway: bool
    homeShootingEfficiency: bool
    awayShootingEfficiency: bool
    homePassingEfficiency: bool
    awayPassingEfficiency: bool
    homePossessionEfficiency: bool
    awayPossessionEfficiency: bool
    homePowerPlayPct: bool
    awayPowerPlayPct: bool
    homePenaltyKillPct: bool
    awayPenaltyKillPct: bool
    homeScore: bool
    awayScore: bool
    shotDifferential: bool
    hitDifferential: bool
    takeawayDifferential: bool
    scoringChancesDifferential: bool


MatchAnalyticsAvgAggregateInput = MatchAnalyticsNumberAggregateInput
MatchAnalyticsSumAggregateInput = MatchAnalyticsNumberAggregateInput


MatchAnalyticsCountAggregateInput = TypedDict(
    'MatchAnalyticsCountAggregateInput',
    {
        'id': bool,
        'matchId': bool,
        'possessionDifferential': bool,
        'possessionPercentageHome': bool,
        'possessionPercentageAway': bool,
        'homeShootingEfficiency': bool,
        'awayShootingEfficiency': bool,
        'homePassingEfficiency': bool,
        'awayPassingEfficiency': bool,
        'homePossessionEfficiency': bool,
        'awayPossessionEfficiency': bool,
        'homePowerPlayPct': bool,
        'awayPowerPlayPct': bool,
        'homePenaltyKillPct': bool,
        'awayPenaltyKillPct': bool,
        'homeScore': bool,
        'awayScore': bool,
        'shotDifferential': bool,
        'hitDifferential': bool,
        'takeawayDifferential': bool,
        'scoringChancesDifferential': bool,
        '_all': bool,
    },
    total=False,
)

MatchAnalyticsCountAggregateOutput = TypedDict(
    'MatchAnalyticsCountAggregateOutput',
    {
        'id': int,
        'matchId': int,
        'possessionDifferential': int,
        'possessionPercentageHome': int,
        'possessionPercentageAway': int,
        'homeShootingEfficiency': int,
        'awayShootingEfficiency': int,
        'homePassingEfficiency': int,
        'awayPassingEfficiency': int,
        'homePossessionEfficiency': int,
        'awayPossessionEfficiency': int,
        'homePowerPlayPct': int,
        'awayPowerPlayPct': int,
        'homePenaltyKillPct': int,
        'awayPenaltyKillPct': int,
        'homeScore': int,
        'awayScore': int,
        'shotDifferential': int,
        'hitDifferential': int,
        'takeawayDifferential': int,
        'scoringChancesDifferential': int,
        '_all': int,
    },
    total=False,
)


MatchAnalyticsKeys = Literal[
    'id',
    'matchId',
    'possessionDifferential',
    'possessionPercentageHome',
    'possessionPercentageAway',
    'homeShootingEfficiency',
    'awayShootingEfficiency',
    'homePassingEfficiency',
    'awayPassingEfficiency',
    'homePossessionEfficiency',
    'awayPossessionEfficiency',
    'homePowerPlayPct',
    'awayPowerPlayPct',
    'homePenaltyKillPct',
    'awayPenaltyKillPct',
    'homeScore',
    'awayScore',
    'shotDifferential',
    'hitDifferential',
    'takeawayDifferential',
    'scoringChancesDifferential',
    'match',
]
MatchAnalyticsScalarFieldKeys = Literal[
    'id',
    'matchId',
    'possessionDifferential',
    'possessionPercentageHome',
    'possessionPercentageAway',
    'homeShootingEfficiency',
    'awayShootingEfficiency',
    'homePassingEfficiency',
    'awayPassingEfficiency',
    'homePossessionEfficiency',
    'awayPossessionEfficiency',
    'homePowerPlayPct',
    'awayPowerPlayPct',
    'homePenaltyKillPct',
    'awayPenaltyKillPct',
    'homeScore',
    'awayScore',
    'shotDifferential',
    'hitDifferential',
    'takeawayDifferential',
    'scoringChancesDifferential',
]
MatchAnalyticsScalarFieldKeysT = TypeVar('MatchAnalyticsScalarFieldKeysT', bound=MatchAnalyticsScalarFieldKeys)

MatchAnalyticsRelationalFieldKeys = Literal[
        'match',
    ]

# PlayerMatch types

class PlayerMatchOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PlayerMatch create method"""
    id: _str
    matchId: _str
    playerTeamSeasonId: _str
    playerSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    match: 'MatchCreateNestedWithoutRelationsInput'
    playerTeamSeason: 'PlayerTeamSeasonCreateNestedWithoutRelationsInput'
    playerSeason: 'PlayerSeasonCreateNestedWithoutRelationsInput'


class PlayerMatchCreateInput(PlayerMatchOptionalCreateInput):
    """Required arguments to the PlayerMatch create method"""
    playerLevel: _int
    position: _str
    posSorted: _int
    playerName: _str
    clientPlatform: _str
    playerLevelDisplay: _int
    isGuest: _bool
    playerDnf: _bool
    pNhlOnlineGameType: _str
    eaTeamId: _str
    teamSide: _int
    opponentClubId: _str
    opponentEaTeamId: _str
    opponentScore: _int
    score: _int
    ratingDefense: _float
    ratingOffense: _float
    ratingTeamplay: _float
    toi: _int
    toiSeconds: _int
    assists: _int
    blockedShots: _int
    deflections: _int
    faceoffsLost: _int
    faceoffPct: _float
    faceoffsWon: _int
    giveaways: _int
    goals: _int
    gameWinningGoals: _int
    hits: _int
    interceptions: _int
    passAttempts: _int
    passes: _int
    passPct: _float
    penaltiesDrawn: _int
    penaltyMinutes: _int
    skaterPkClearZone: _int
    plusMinus: _int
    possessionSeconds: _int
    powerPlayGoals: _int
    saucerPasses: _int
    shortHandedGoals: _int
    shotAttempts: _int
    shotsOnNetPct: _float
    shootingPct: _float
    shotsOnGoal: _int
    takeaways: _int
    points: _int
    faceoffsTotal: _int
    shotsMissed: _int
    passesMissed: _int
    passingPct: _float
    majorPenalties: _int
    minorPenalties: _int
    totalPenalties: _int
    pointsPer60: _float
    possessionPerMinute: _float
    shotEfficiency: _float
    tkawayGvawayRatio: _float
    penaltyDifferential: _int
    defActionsPerMinute: _float
    offImpact: _float
    defImpact: _float
    detailedPosition: _str
    positionAbbreviation: _str
    gameImpactScore: _float
    puckManagementRating: _float
    possessionEfficiency: _float
    netDefContribution: _float
    timeAdjustedRating: _float
    shotGenerationRate: _float
    offZonePresence: _float
    twoWayRating: _float
    breakawaySavePct: _float
    breakawaySaves: _int
    breakawayShots: _int
    desperationSaves: _int
    goalsAgainst: _int
    goalsAgainstAverage: _float
    penaltyShotSavePct: _float
    penaltyShotSaves: _int
    penaltyShotsFaced: _int
    goaliePkClearZone: _int
    pokeChecks: _int
    savePct: _float
    totalSaves: _int
    totalShotsFaced: _int
    shutoutPeriods: _int
    goalsSaved: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PlayerMatchOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PlayerMatch create method, without relations"""
    id: _str
    matchId: _str
    playerTeamSeasonId: _str
    playerSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerMatchCreateWithoutRelationsInput(PlayerMatchOptionalCreateWithoutRelationsInput):
    """Required arguments to the PlayerMatch create method, without relations"""
    playerLevel: _int
    position: _str
    posSorted: _int
    playerName: _str
    clientPlatform: _str
    playerLevelDisplay: _int
    isGuest: _bool
    playerDnf: _bool
    pNhlOnlineGameType: _str
    eaTeamId: _str
    teamSide: _int
    opponentClubId: _str
    opponentEaTeamId: _str
    opponentScore: _int
    score: _int
    ratingDefense: _float
    ratingOffense: _float
    ratingTeamplay: _float
    toi: _int
    toiSeconds: _int
    assists: _int
    blockedShots: _int
    deflections: _int
    faceoffsLost: _int
    faceoffPct: _float
    faceoffsWon: _int
    giveaways: _int
    goals: _int
    gameWinningGoals: _int
    hits: _int
    interceptions: _int
    passAttempts: _int
    passes: _int
    passPct: _float
    penaltiesDrawn: _int
    penaltyMinutes: _int
    skaterPkClearZone: _int
    plusMinus: _int
    possessionSeconds: _int
    powerPlayGoals: _int
    saucerPasses: _int
    shortHandedGoals: _int
    shotAttempts: _int
    shotsOnNetPct: _float
    shootingPct: _float
    shotsOnGoal: _int
    takeaways: _int
    points: _int
    faceoffsTotal: _int
    shotsMissed: _int
    passesMissed: _int
    passingPct: _float
    majorPenalties: _int
    minorPenalties: _int
    totalPenalties: _int
    pointsPer60: _float
    possessionPerMinute: _float
    shotEfficiency: _float
    tkawayGvawayRatio: _float
    penaltyDifferential: _int
    defActionsPerMinute: _float
    offImpact: _float
    defImpact: _float
    detailedPosition: _str
    positionAbbreviation: _str
    gameImpactScore: _float
    puckManagementRating: _float
    possessionEfficiency: _float
    netDefContribution: _float
    timeAdjustedRating: _float
    shotGenerationRate: _float
    offZonePresence: _float
    twoWayRating: _float
    breakawaySavePct: _float
    breakawaySaves: _int
    breakawayShots: _int
    desperationSaves: _int
    goalsAgainst: _int
    goalsAgainstAverage: _float
    penaltyShotSavePct: _float
    penaltyShotSaves: _int
    penaltyShotsFaced: _int
    goaliePkClearZone: _int
    pokeChecks: _int
    savePct: _float
    totalSaves: _int
    totalShotsFaced: _int
    shutoutPeriods: _int
    goalsSaved: _int

class PlayerMatchConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PlayerMatchCreateWithoutRelationsInput'
    where: 'PlayerMatchWhereUniqueInput'

class PlayerMatchCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PlayerMatchCreateWithoutRelationsInput'
    connect: 'PlayerMatchWhereUniqueInput'
    connect_or_create: 'PlayerMatchConnectOrCreateWithoutRelationsInput'


class PlayerMatchCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PlayerMatchCreateWithoutRelationsInput', List['PlayerMatchCreateWithoutRelationsInput']]
    connect: Union['PlayerMatchWhereUniqueInput', List['PlayerMatchWhereUniqueInput']]
    connect_or_create: Union['PlayerMatchConnectOrCreateWithoutRelationsInput', List['PlayerMatchConnectOrCreateWithoutRelationsInput']]

_PlayerMatchWhereUnique_id_Input = TypedDict(
    '_PlayerMatchWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

PlayerMatchWhereUniqueInput = _PlayerMatchWhereUnique_id_Input


class PlayerMatchUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    playerLevel: Union[AtomicIntInput, _int]
    position: _str
    posSorted: Union[AtomicIntInput, _int]
    playerName: _str
    clientPlatform: _str
    playerLevelDisplay: Union[AtomicIntInput, _int]
    isGuest: _bool
    playerDnf: _bool
    pNhlOnlineGameType: _str
    eaTeamId: _str
    teamSide: Union[AtomicIntInput, _int]
    opponentClubId: _str
    opponentEaTeamId: _str
    opponentScore: Union[AtomicIntInput, _int]
    score: Union[AtomicIntInput, _int]
    ratingDefense: Union[AtomicFloatInput, _float]
    ratingOffense: Union[AtomicFloatInput, _float]
    ratingTeamplay: Union[AtomicFloatInput, _float]
    toi: Union[AtomicIntInput, _int]
    toiSeconds: Union[AtomicIntInput, _int]
    assists: Union[AtomicIntInput, _int]
    blockedShots: Union[AtomicIntInput, _int]
    deflections: Union[AtomicIntInput, _int]
    faceoffsLost: Union[AtomicIntInput, _int]
    faceoffPct: Union[AtomicFloatInput, _float]
    faceoffsWon: Union[AtomicIntInput, _int]
    giveaways: Union[AtomicIntInput, _int]
    goals: Union[AtomicIntInput, _int]
    gameWinningGoals: Union[AtomicIntInput, _int]
    hits: Union[AtomicIntInput, _int]
    interceptions: Union[AtomicIntInput, _int]
    passAttempts: Union[AtomicIntInput, _int]
    passes: Union[AtomicIntInput, _int]
    passPct: Union[AtomicFloatInput, _float]
    penaltiesDrawn: Union[AtomicIntInput, _int]
    penaltyMinutes: Union[AtomicIntInput, _int]
    skaterPkClearZone: Union[AtomicIntInput, _int]
    plusMinus: Union[AtomicIntInput, _int]
    possessionSeconds: Union[AtomicIntInput, _int]
    powerPlayGoals: Union[AtomicIntInput, _int]
    saucerPasses: Union[AtomicIntInput, _int]
    shortHandedGoals: Union[AtomicIntInput, _int]
    shotAttempts: Union[AtomicIntInput, _int]
    shotsOnNetPct: Union[AtomicFloatInput, _float]
    shootingPct: Union[AtomicFloatInput, _float]
    shotsOnGoal: Union[AtomicIntInput, _int]
    takeaways: Union[AtomicIntInput, _int]
    points: Union[AtomicIntInput, _int]
    faceoffsTotal: Union[AtomicIntInput, _int]
    shotsMissed: Union[AtomicIntInput, _int]
    passesMissed: Union[AtomicIntInput, _int]
    passingPct: Union[AtomicFloatInput, _float]
    majorPenalties: Union[AtomicIntInput, _int]
    minorPenalties: Union[AtomicIntInput, _int]
    totalPenalties: Union[AtomicIntInput, _int]
    pointsPer60: Union[AtomicFloatInput, _float]
    possessionPerMinute: Union[AtomicFloatInput, _float]
    shotEfficiency: Union[AtomicFloatInput, _float]
    tkawayGvawayRatio: Union[AtomicFloatInput, _float]
    penaltyDifferential: Union[AtomicIntInput, _int]
    defActionsPerMinute: Union[AtomicFloatInput, _float]
    offImpact: Union[AtomicFloatInput, _float]
    defImpact: Union[AtomicFloatInput, _float]
    detailedPosition: _str
    positionAbbreviation: _str
    gameImpactScore: Union[AtomicFloatInput, _float]
    puckManagementRating: Union[AtomicFloatInput, _float]
    possessionEfficiency: Union[AtomicFloatInput, _float]
    netDefContribution: Union[AtomicFloatInput, _float]
    timeAdjustedRating: Union[AtomicFloatInput, _float]
    shotGenerationRate: Union[AtomicFloatInput, _float]
    offZonePresence: Union[AtomicFloatInput, _float]
    twoWayRating: Union[AtomicFloatInput, _float]
    breakawaySavePct: Union[AtomicFloatInput, _float]
    breakawaySaves: Union[AtomicIntInput, _int]
    breakawayShots: Union[AtomicIntInput, _int]
    desperationSaves: Union[AtomicIntInput, _int]
    goalsAgainst: Union[AtomicIntInput, _int]
    goalsAgainstAverage: Union[AtomicFloatInput, _float]
    penaltyShotSavePct: Union[AtomicFloatInput, _float]
    penaltyShotSaves: Union[AtomicIntInput, _int]
    penaltyShotsFaced: Union[AtomicIntInput, _int]
    goaliePkClearZone: Union[AtomicIntInput, _int]
    pokeChecks: Union[AtomicIntInput, _int]
    savePct: Union[AtomicFloatInput, _float]
    totalSaves: Union[AtomicIntInput, _int]
    totalShotsFaced: Union[AtomicIntInput, _int]
    shutoutPeriods: Union[AtomicIntInput, _int]
    goalsSaved: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    match: 'MatchUpdateOneWithoutRelationsInput'
    playerTeamSeason: 'PlayerTeamSeasonUpdateOneWithoutRelationsInput'
    playerSeason: 'PlayerSeasonUpdateOneWithoutRelationsInput'


class PlayerMatchUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    playerLevel: Union[AtomicIntInput, _int]
    position: _str
    posSorted: Union[AtomicIntInput, _int]
    playerName: _str
    clientPlatform: _str
    playerLevelDisplay: Union[AtomicIntInput, _int]
    isGuest: _bool
    playerDnf: _bool
    pNhlOnlineGameType: _str
    eaTeamId: _str
    teamSide: Union[AtomicIntInput, _int]
    opponentClubId: _str
    opponentEaTeamId: _str
    opponentScore: Union[AtomicIntInput, _int]
    score: Union[AtomicIntInput, _int]
    ratingDefense: Union[AtomicFloatInput, _float]
    ratingOffense: Union[AtomicFloatInput, _float]
    ratingTeamplay: Union[AtomicFloatInput, _float]
    toi: Union[AtomicIntInput, _int]
    toiSeconds: Union[AtomicIntInput, _int]
    assists: Union[AtomicIntInput, _int]
    blockedShots: Union[AtomicIntInput, _int]
    deflections: Union[AtomicIntInput, _int]
    faceoffsLost: Union[AtomicIntInput, _int]
    faceoffPct: Union[AtomicFloatInput, _float]
    faceoffsWon: Union[AtomicIntInput, _int]
    giveaways: Union[AtomicIntInput, _int]
    goals: Union[AtomicIntInput, _int]
    gameWinningGoals: Union[AtomicIntInput, _int]
    hits: Union[AtomicIntInput, _int]
    interceptions: Union[AtomicIntInput, _int]
    passAttempts: Union[AtomicIntInput, _int]
    passes: Union[AtomicIntInput, _int]
    passPct: Union[AtomicFloatInput, _float]
    penaltiesDrawn: Union[AtomicIntInput, _int]
    penaltyMinutes: Union[AtomicIntInput, _int]
    skaterPkClearZone: Union[AtomicIntInput, _int]
    plusMinus: Union[AtomicIntInput, _int]
    possessionSeconds: Union[AtomicIntInput, _int]
    powerPlayGoals: Union[AtomicIntInput, _int]
    saucerPasses: Union[AtomicIntInput, _int]
    shortHandedGoals: Union[AtomicIntInput, _int]
    shotAttempts: Union[AtomicIntInput, _int]
    shotsOnNetPct: Union[AtomicFloatInput, _float]
    shootingPct: Union[AtomicFloatInput, _float]
    shotsOnGoal: Union[AtomicIntInput, _int]
    takeaways: Union[AtomicIntInput, _int]
    points: Union[AtomicIntInput, _int]
    faceoffsTotal: Union[AtomicIntInput, _int]
    shotsMissed: Union[AtomicIntInput, _int]
    passesMissed: Union[AtomicIntInput, _int]
    passingPct: Union[AtomicFloatInput, _float]
    majorPenalties: Union[AtomicIntInput, _int]
    minorPenalties: Union[AtomicIntInput, _int]
    totalPenalties: Union[AtomicIntInput, _int]
    pointsPer60: Union[AtomicFloatInput, _float]
    possessionPerMinute: Union[AtomicFloatInput, _float]
    shotEfficiency: Union[AtomicFloatInput, _float]
    tkawayGvawayRatio: Union[AtomicFloatInput, _float]
    penaltyDifferential: Union[AtomicIntInput, _int]
    defActionsPerMinute: Union[AtomicFloatInput, _float]
    offImpact: Union[AtomicFloatInput, _float]
    defImpact: Union[AtomicFloatInput, _float]
    detailedPosition: _str
    positionAbbreviation: _str
    gameImpactScore: Union[AtomicFloatInput, _float]
    puckManagementRating: Union[AtomicFloatInput, _float]
    possessionEfficiency: Union[AtomicFloatInput, _float]
    netDefContribution: Union[AtomicFloatInput, _float]
    timeAdjustedRating: Union[AtomicFloatInput, _float]
    shotGenerationRate: Union[AtomicFloatInput, _float]
    offZonePresence: Union[AtomicFloatInput, _float]
    twoWayRating: Union[AtomicFloatInput, _float]
    breakawaySavePct: Union[AtomicFloatInput, _float]
    breakawaySaves: Union[AtomicIntInput, _int]
    breakawayShots: Union[AtomicIntInput, _int]
    desperationSaves: Union[AtomicIntInput, _int]
    goalsAgainst: Union[AtomicIntInput, _int]
    goalsAgainstAverage: Union[AtomicFloatInput, _float]
    penaltyShotSavePct: Union[AtomicFloatInput, _float]
    penaltyShotSaves: Union[AtomicIntInput, _int]
    penaltyShotsFaced: Union[AtomicIntInput, _int]
    goaliePkClearZone: Union[AtomicIntInput, _int]
    pokeChecks: Union[AtomicIntInput, _int]
    savePct: Union[AtomicFloatInput, _float]
    totalSaves: Union[AtomicIntInput, _int]
    totalShotsFaced: Union[AtomicIntInput, _int]
    shutoutPeriods: Union[AtomicIntInput, _int]
    goalsSaved: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerMatchUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PlayerMatchCreateWithoutRelationsInput']
    connect: List['PlayerMatchWhereUniqueInput']
    connect_or_create: List['PlayerMatchConnectOrCreateWithoutRelationsInput']
    set: List['PlayerMatchWhereUniqueInput']
    disconnect: List['PlayerMatchWhereUniqueInput']
    delete: List['PlayerMatchWhereUniqueInput']

    # TODO
    # update: List['PlayerMatchUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PlayerMatchUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PlayerMatchScalarWhereInput']
    # upsert: List['PlayerMatchUpserteWithWhereUniqueWithoutRelationsInput']


class PlayerMatchUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PlayerMatchCreateWithoutRelationsInput'
    connect: 'PlayerMatchWhereUniqueInput'
    connect_or_create: 'PlayerMatchConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PlayerMatchUpdateInput'
    # upsert: 'PlayerMatchUpsertWithoutRelationsInput'


class PlayerMatchUpsertInput(TypedDict):
    create: 'PlayerMatchCreateInput'
    update: 'PlayerMatchUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PlayerMatch_id_OrderByInput = TypedDict(
    '_PlayerMatch_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PlayerMatch_matchId_OrderByInput = TypedDict(
    '_PlayerMatch_matchId_OrderByInput',
    {
        'matchId': 'SortOrder',
    },
    total=True
)

_PlayerMatch_playerTeamSeasonId_OrderByInput = TypedDict(
    '_PlayerMatch_playerTeamSeasonId_OrderByInput',
    {
        'playerTeamSeasonId': 'SortOrder',
    },
    total=True
)

_PlayerMatch_playerSeasonId_OrderByInput = TypedDict(
    '_PlayerMatch_playerSeasonId_OrderByInput',
    {
        'playerSeasonId': 'SortOrder',
    },
    total=True
)

_PlayerMatch_playerLevel_OrderByInput = TypedDict(
    '_PlayerMatch_playerLevel_OrderByInput',
    {
        'playerLevel': 'SortOrder',
    },
    total=True
)

_PlayerMatch_position_OrderByInput = TypedDict(
    '_PlayerMatch_position_OrderByInput',
    {
        'position': 'SortOrder',
    },
    total=True
)

_PlayerMatch_posSorted_OrderByInput = TypedDict(
    '_PlayerMatch_posSorted_OrderByInput',
    {
        'posSorted': 'SortOrder',
    },
    total=True
)

_PlayerMatch_playerName_OrderByInput = TypedDict(
    '_PlayerMatch_playerName_OrderByInput',
    {
        'playerName': 'SortOrder',
    },
    total=True
)

_PlayerMatch_clientPlatform_OrderByInput = TypedDict(
    '_PlayerMatch_clientPlatform_OrderByInput',
    {
        'clientPlatform': 'SortOrder',
    },
    total=True
)

_PlayerMatch_playerLevelDisplay_OrderByInput = TypedDict(
    '_PlayerMatch_playerLevelDisplay_OrderByInput',
    {
        'playerLevelDisplay': 'SortOrder',
    },
    total=True
)

_PlayerMatch_isGuest_OrderByInput = TypedDict(
    '_PlayerMatch_isGuest_OrderByInput',
    {
        'isGuest': 'SortOrder',
    },
    total=True
)

_PlayerMatch_playerDnf_OrderByInput = TypedDict(
    '_PlayerMatch_playerDnf_OrderByInput',
    {
        'playerDnf': 'SortOrder',
    },
    total=True
)

_PlayerMatch_pNhlOnlineGameType_OrderByInput = TypedDict(
    '_PlayerMatch_pNhlOnlineGameType_OrderByInput',
    {
        'pNhlOnlineGameType': 'SortOrder',
    },
    total=True
)

_PlayerMatch_eaTeamId_OrderByInput = TypedDict(
    '_PlayerMatch_eaTeamId_OrderByInput',
    {
        'eaTeamId': 'SortOrder',
    },
    total=True
)

_PlayerMatch_teamSide_OrderByInput = TypedDict(
    '_PlayerMatch_teamSide_OrderByInput',
    {
        'teamSide': 'SortOrder',
    },
    total=True
)

_PlayerMatch_opponentClubId_OrderByInput = TypedDict(
    '_PlayerMatch_opponentClubId_OrderByInput',
    {
        'opponentClubId': 'SortOrder',
    },
    total=True
)

_PlayerMatch_opponentEaTeamId_OrderByInput = TypedDict(
    '_PlayerMatch_opponentEaTeamId_OrderByInput',
    {
        'opponentEaTeamId': 'SortOrder',
    },
    total=True
)

_PlayerMatch_opponentScore_OrderByInput = TypedDict(
    '_PlayerMatch_opponentScore_OrderByInput',
    {
        'opponentScore': 'SortOrder',
    },
    total=True
)

_PlayerMatch_score_OrderByInput = TypedDict(
    '_PlayerMatch_score_OrderByInput',
    {
        'score': 'SortOrder',
    },
    total=True
)

_PlayerMatch_ratingDefense_OrderByInput = TypedDict(
    '_PlayerMatch_ratingDefense_OrderByInput',
    {
        'ratingDefense': 'SortOrder',
    },
    total=True
)

_PlayerMatch_ratingOffense_OrderByInput = TypedDict(
    '_PlayerMatch_ratingOffense_OrderByInput',
    {
        'ratingOffense': 'SortOrder',
    },
    total=True
)

_PlayerMatch_ratingTeamplay_OrderByInput = TypedDict(
    '_PlayerMatch_ratingTeamplay_OrderByInput',
    {
        'ratingTeamplay': 'SortOrder',
    },
    total=True
)

_PlayerMatch_toi_OrderByInput = TypedDict(
    '_PlayerMatch_toi_OrderByInput',
    {
        'toi': 'SortOrder',
    },
    total=True
)

_PlayerMatch_toiSeconds_OrderByInput = TypedDict(
    '_PlayerMatch_toiSeconds_OrderByInput',
    {
        'toiSeconds': 'SortOrder',
    },
    total=True
)

_PlayerMatch_assists_OrderByInput = TypedDict(
    '_PlayerMatch_assists_OrderByInput',
    {
        'assists': 'SortOrder',
    },
    total=True
)

_PlayerMatch_blockedShots_OrderByInput = TypedDict(
    '_PlayerMatch_blockedShots_OrderByInput',
    {
        'blockedShots': 'SortOrder',
    },
    total=True
)

_PlayerMatch_deflections_OrderByInput = TypedDict(
    '_PlayerMatch_deflections_OrderByInput',
    {
        'deflections': 'SortOrder',
    },
    total=True
)

_PlayerMatch_faceoffsLost_OrderByInput = TypedDict(
    '_PlayerMatch_faceoffsLost_OrderByInput',
    {
        'faceoffsLost': 'SortOrder',
    },
    total=True
)

_PlayerMatch_faceoffPct_OrderByInput = TypedDict(
    '_PlayerMatch_faceoffPct_OrderByInput',
    {
        'faceoffPct': 'SortOrder',
    },
    total=True
)

_PlayerMatch_faceoffsWon_OrderByInput = TypedDict(
    '_PlayerMatch_faceoffsWon_OrderByInput',
    {
        'faceoffsWon': 'SortOrder',
    },
    total=True
)

_PlayerMatch_giveaways_OrderByInput = TypedDict(
    '_PlayerMatch_giveaways_OrderByInput',
    {
        'giveaways': 'SortOrder',
    },
    total=True
)

_PlayerMatch_goals_OrderByInput = TypedDict(
    '_PlayerMatch_goals_OrderByInput',
    {
        'goals': 'SortOrder',
    },
    total=True
)

_PlayerMatch_gameWinningGoals_OrderByInput = TypedDict(
    '_PlayerMatch_gameWinningGoals_OrderByInput',
    {
        'gameWinningGoals': 'SortOrder',
    },
    total=True
)

_PlayerMatch_hits_OrderByInput = TypedDict(
    '_PlayerMatch_hits_OrderByInput',
    {
        'hits': 'SortOrder',
    },
    total=True
)

_PlayerMatch_interceptions_OrderByInput = TypedDict(
    '_PlayerMatch_interceptions_OrderByInput',
    {
        'interceptions': 'SortOrder',
    },
    total=True
)

_PlayerMatch_passAttempts_OrderByInput = TypedDict(
    '_PlayerMatch_passAttempts_OrderByInput',
    {
        'passAttempts': 'SortOrder',
    },
    total=True
)

_PlayerMatch_passes_OrderByInput = TypedDict(
    '_PlayerMatch_passes_OrderByInput',
    {
        'passes': 'SortOrder',
    },
    total=True
)

_PlayerMatch_passPct_OrderByInput = TypedDict(
    '_PlayerMatch_passPct_OrderByInput',
    {
        'passPct': 'SortOrder',
    },
    total=True
)

_PlayerMatch_penaltiesDrawn_OrderByInput = TypedDict(
    '_PlayerMatch_penaltiesDrawn_OrderByInput',
    {
        'penaltiesDrawn': 'SortOrder',
    },
    total=True
)

_PlayerMatch_penaltyMinutes_OrderByInput = TypedDict(
    '_PlayerMatch_penaltyMinutes_OrderByInput',
    {
        'penaltyMinutes': 'SortOrder',
    },
    total=True
)

_PlayerMatch_skaterPkClearZone_OrderByInput = TypedDict(
    '_PlayerMatch_skaterPkClearZone_OrderByInput',
    {
        'skaterPkClearZone': 'SortOrder',
    },
    total=True
)

_PlayerMatch_plusMinus_OrderByInput = TypedDict(
    '_PlayerMatch_plusMinus_OrderByInput',
    {
        'plusMinus': 'SortOrder',
    },
    total=True
)

_PlayerMatch_possessionSeconds_OrderByInput = TypedDict(
    '_PlayerMatch_possessionSeconds_OrderByInput',
    {
        'possessionSeconds': 'SortOrder',
    },
    total=True
)

_PlayerMatch_powerPlayGoals_OrderByInput = TypedDict(
    '_PlayerMatch_powerPlayGoals_OrderByInput',
    {
        'powerPlayGoals': 'SortOrder',
    },
    total=True
)

_PlayerMatch_saucerPasses_OrderByInput = TypedDict(
    '_PlayerMatch_saucerPasses_OrderByInput',
    {
        'saucerPasses': 'SortOrder',
    },
    total=True
)

_PlayerMatch_shortHandedGoals_OrderByInput = TypedDict(
    '_PlayerMatch_shortHandedGoals_OrderByInput',
    {
        'shortHandedGoals': 'SortOrder',
    },
    total=True
)

_PlayerMatch_shotAttempts_OrderByInput = TypedDict(
    '_PlayerMatch_shotAttempts_OrderByInput',
    {
        'shotAttempts': 'SortOrder',
    },
    total=True
)

_PlayerMatch_shotsOnNetPct_OrderByInput = TypedDict(
    '_PlayerMatch_shotsOnNetPct_OrderByInput',
    {
        'shotsOnNetPct': 'SortOrder',
    },
    total=True
)

_PlayerMatch_shootingPct_OrderByInput = TypedDict(
    '_PlayerMatch_shootingPct_OrderByInput',
    {
        'shootingPct': 'SortOrder',
    },
    total=True
)

_PlayerMatch_shotsOnGoal_OrderByInput = TypedDict(
    '_PlayerMatch_shotsOnGoal_OrderByInput',
    {
        'shotsOnGoal': 'SortOrder',
    },
    total=True
)

_PlayerMatch_takeaways_OrderByInput = TypedDict(
    '_PlayerMatch_takeaways_OrderByInput',
    {
        'takeaways': 'SortOrder',
    },
    total=True
)

_PlayerMatch_points_OrderByInput = TypedDict(
    '_PlayerMatch_points_OrderByInput',
    {
        'points': 'SortOrder',
    },
    total=True
)

_PlayerMatch_faceoffsTotal_OrderByInput = TypedDict(
    '_PlayerMatch_faceoffsTotal_OrderByInput',
    {
        'faceoffsTotal': 'SortOrder',
    },
    total=True
)

_PlayerMatch_shotsMissed_OrderByInput = TypedDict(
    '_PlayerMatch_shotsMissed_OrderByInput',
    {
        'shotsMissed': 'SortOrder',
    },
    total=True
)

_PlayerMatch_passesMissed_OrderByInput = TypedDict(
    '_PlayerMatch_passesMissed_OrderByInput',
    {
        'passesMissed': 'SortOrder',
    },
    total=True
)

_PlayerMatch_passingPct_OrderByInput = TypedDict(
    '_PlayerMatch_passingPct_OrderByInput',
    {
        'passingPct': 'SortOrder',
    },
    total=True
)

_PlayerMatch_majorPenalties_OrderByInput = TypedDict(
    '_PlayerMatch_majorPenalties_OrderByInput',
    {
        'majorPenalties': 'SortOrder',
    },
    total=True
)

_PlayerMatch_minorPenalties_OrderByInput = TypedDict(
    '_PlayerMatch_minorPenalties_OrderByInput',
    {
        'minorPenalties': 'SortOrder',
    },
    total=True
)

_PlayerMatch_totalPenalties_OrderByInput = TypedDict(
    '_PlayerMatch_totalPenalties_OrderByInput',
    {
        'totalPenalties': 'SortOrder',
    },
    total=True
)

_PlayerMatch_pointsPer60_OrderByInput = TypedDict(
    '_PlayerMatch_pointsPer60_OrderByInput',
    {
        'pointsPer60': 'SortOrder',
    },
    total=True
)

_PlayerMatch_possessionPerMinute_OrderByInput = TypedDict(
    '_PlayerMatch_possessionPerMinute_OrderByInput',
    {
        'possessionPerMinute': 'SortOrder',
    },
    total=True
)

_PlayerMatch_shotEfficiency_OrderByInput = TypedDict(
    '_PlayerMatch_shotEfficiency_OrderByInput',
    {
        'shotEfficiency': 'SortOrder',
    },
    total=True
)

_PlayerMatch_tkawayGvawayRatio_OrderByInput = TypedDict(
    '_PlayerMatch_tkawayGvawayRatio_OrderByInput',
    {
        'tkawayGvawayRatio': 'SortOrder',
    },
    total=True
)

_PlayerMatch_penaltyDifferential_OrderByInput = TypedDict(
    '_PlayerMatch_penaltyDifferential_OrderByInput',
    {
        'penaltyDifferential': 'SortOrder',
    },
    total=True
)

_PlayerMatch_defActionsPerMinute_OrderByInput = TypedDict(
    '_PlayerMatch_defActionsPerMinute_OrderByInput',
    {
        'defActionsPerMinute': 'SortOrder',
    },
    total=True
)

_PlayerMatch_offImpact_OrderByInput = TypedDict(
    '_PlayerMatch_offImpact_OrderByInput',
    {
        'offImpact': 'SortOrder',
    },
    total=True
)

_PlayerMatch_defImpact_OrderByInput = TypedDict(
    '_PlayerMatch_defImpact_OrderByInput',
    {
        'defImpact': 'SortOrder',
    },
    total=True
)

_PlayerMatch_detailedPosition_OrderByInput = TypedDict(
    '_PlayerMatch_detailedPosition_OrderByInput',
    {
        'detailedPosition': 'SortOrder',
    },
    total=True
)

_PlayerMatch_positionAbbreviation_OrderByInput = TypedDict(
    '_PlayerMatch_positionAbbreviation_OrderByInput',
    {
        'positionAbbreviation': 'SortOrder',
    },
    total=True
)

_PlayerMatch_gameImpactScore_OrderByInput = TypedDict(
    '_PlayerMatch_gameImpactScore_OrderByInput',
    {
        'gameImpactScore': 'SortOrder',
    },
    total=True
)

_PlayerMatch_puckManagementRating_OrderByInput = TypedDict(
    '_PlayerMatch_puckManagementRating_OrderByInput',
    {
        'puckManagementRating': 'SortOrder',
    },
    total=True
)

_PlayerMatch_possessionEfficiency_OrderByInput = TypedDict(
    '_PlayerMatch_possessionEfficiency_OrderByInput',
    {
        'possessionEfficiency': 'SortOrder',
    },
    total=True
)

_PlayerMatch_netDefContribution_OrderByInput = TypedDict(
    '_PlayerMatch_netDefContribution_OrderByInput',
    {
        'netDefContribution': 'SortOrder',
    },
    total=True
)

_PlayerMatch_timeAdjustedRating_OrderByInput = TypedDict(
    '_PlayerMatch_timeAdjustedRating_OrderByInput',
    {
        'timeAdjustedRating': 'SortOrder',
    },
    total=True
)

_PlayerMatch_shotGenerationRate_OrderByInput = TypedDict(
    '_PlayerMatch_shotGenerationRate_OrderByInput',
    {
        'shotGenerationRate': 'SortOrder',
    },
    total=True
)

_PlayerMatch_offZonePresence_OrderByInput = TypedDict(
    '_PlayerMatch_offZonePresence_OrderByInput',
    {
        'offZonePresence': 'SortOrder',
    },
    total=True
)

_PlayerMatch_twoWayRating_OrderByInput = TypedDict(
    '_PlayerMatch_twoWayRating_OrderByInput',
    {
        'twoWayRating': 'SortOrder',
    },
    total=True
)

_PlayerMatch_breakawaySavePct_OrderByInput = TypedDict(
    '_PlayerMatch_breakawaySavePct_OrderByInput',
    {
        'breakawaySavePct': 'SortOrder',
    },
    total=True
)

_PlayerMatch_breakawaySaves_OrderByInput = TypedDict(
    '_PlayerMatch_breakawaySaves_OrderByInput',
    {
        'breakawaySaves': 'SortOrder',
    },
    total=True
)

_PlayerMatch_breakawayShots_OrderByInput = TypedDict(
    '_PlayerMatch_breakawayShots_OrderByInput',
    {
        'breakawayShots': 'SortOrder',
    },
    total=True
)

_PlayerMatch_desperationSaves_OrderByInput = TypedDict(
    '_PlayerMatch_desperationSaves_OrderByInput',
    {
        'desperationSaves': 'SortOrder',
    },
    total=True
)

_PlayerMatch_goalsAgainst_OrderByInput = TypedDict(
    '_PlayerMatch_goalsAgainst_OrderByInput',
    {
        'goalsAgainst': 'SortOrder',
    },
    total=True
)

_PlayerMatch_goalsAgainstAverage_OrderByInput = TypedDict(
    '_PlayerMatch_goalsAgainstAverage_OrderByInput',
    {
        'goalsAgainstAverage': 'SortOrder',
    },
    total=True
)

_PlayerMatch_penaltyShotSavePct_OrderByInput = TypedDict(
    '_PlayerMatch_penaltyShotSavePct_OrderByInput',
    {
        'penaltyShotSavePct': 'SortOrder',
    },
    total=True
)

_PlayerMatch_penaltyShotSaves_OrderByInput = TypedDict(
    '_PlayerMatch_penaltyShotSaves_OrderByInput',
    {
        'penaltyShotSaves': 'SortOrder',
    },
    total=True
)

_PlayerMatch_penaltyShotsFaced_OrderByInput = TypedDict(
    '_PlayerMatch_penaltyShotsFaced_OrderByInput',
    {
        'penaltyShotsFaced': 'SortOrder',
    },
    total=True
)

_PlayerMatch_goaliePkClearZone_OrderByInput = TypedDict(
    '_PlayerMatch_goaliePkClearZone_OrderByInput',
    {
        'goaliePkClearZone': 'SortOrder',
    },
    total=True
)

_PlayerMatch_pokeChecks_OrderByInput = TypedDict(
    '_PlayerMatch_pokeChecks_OrderByInput',
    {
        'pokeChecks': 'SortOrder',
    },
    total=True
)

_PlayerMatch_savePct_OrderByInput = TypedDict(
    '_PlayerMatch_savePct_OrderByInput',
    {
        'savePct': 'SortOrder',
    },
    total=True
)

_PlayerMatch_totalSaves_OrderByInput = TypedDict(
    '_PlayerMatch_totalSaves_OrderByInput',
    {
        'totalSaves': 'SortOrder',
    },
    total=True
)

_PlayerMatch_totalShotsFaced_OrderByInput = TypedDict(
    '_PlayerMatch_totalShotsFaced_OrderByInput',
    {
        'totalShotsFaced': 'SortOrder',
    },
    total=True
)

_PlayerMatch_shutoutPeriods_OrderByInput = TypedDict(
    '_PlayerMatch_shutoutPeriods_OrderByInput',
    {
        'shutoutPeriods': 'SortOrder',
    },
    total=True
)

_PlayerMatch_goalsSaved_OrderByInput = TypedDict(
    '_PlayerMatch_goalsSaved_OrderByInput',
    {
        'goalsSaved': 'SortOrder',
    },
    total=True
)

_PlayerMatch_createdAt_OrderByInput = TypedDict(
    '_PlayerMatch_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_PlayerMatch_updatedAt_OrderByInput = TypedDict(
    '_PlayerMatch_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_PlayerMatch_RelevanceInner = TypedDict(
    '_PlayerMatch_RelevanceInner',
    {
        'fields': 'List[PlayerMatchScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_PlayerMatch_RelevanceOrderByInput = TypedDict(
    '_PlayerMatch_RelevanceOrderByInput',
    {
        '_relevance': '_PlayerMatch_RelevanceInner',
    },
    total=True
)

PlayerMatchOrderByInput = Union[
    '_PlayerMatch_id_OrderByInput',
    '_PlayerMatch_matchId_OrderByInput',
    '_PlayerMatch_playerTeamSeasonId_OrderByInput',
    '_PlayerMatch_playerSeasonId_OrderByInput',
    '_PlayerMatch_playerLevel_OrderByInput',
    '_PlayerMatch_position_OrderByInput',
    '_PlayerMatch_posSorted_OrderByInput',
    '_PlayerMatch_playerName_OrderByInput',
    '_PlayerMatch_clientPlatform_OrderByInput',
    '_PlayerMatch_playerLevelDisplay_OrderByInput',
    '_PlayerMatch_isGuest_OrderByInput',
    '_PlayerMatch_playerDnf_OrderByInput',
    '_PlayerMatch_pNhlOnlineGameType_OrderByInput',
    '_PlayerMatch_eaTeamId_OrderByInput',
    '_PlayerMatch_teamSide_OrderByInput',
    '_PlayerMatch_opponentClubId_OrderByInput',
    '_PlayerMatch_opponentEaTeamId_OrderByInput',
    '_PlayerMatch_opponentScore_OrderByInput',
    '_PlayerMatch_score_OrderByInput',
    '_PlayerMatch_ratingDefense_OrderByInput',
    '_PlayerMatch_ratingOffense_OrderByInput',
    '_PlayerMatch_ratingTeamplay_OrderByInput',
    '_PlayerMatch_toi_OrderByInput',
    '_PlayerMatch_toiSeconds_OrderByInput',
    '_PlayerMatch_assists_OrderByInput',
    '_PlayerMatch_blockedShots_OrderByInput',
    '_PlayerMatch_deflections_OrderByInput',
    '_PlayerMatch_faceoffsLost_OrderByInput',
    '_PlayerMatch_faceoffPct_OrderByInput',
    '_PlayerMatch_faceoffsWon_OrderByInput',
    '_PlayerMatch_giveaways_OrderByInput',
    '_PlayerMatch_goals_OrderByInput',
    '_PlayerMatch_gameWinningGoals_OrderByInput',
    '_PlayerMatch_hits_OrderByInput',
    '_PlayerMatch_interceptions_OrderByInput',
    '_PlayerMatch_passAttempts_OrderByInput',
    '_PlayerMatch_passes_OrderByInput',
    '_PlayerMatch_passPct_OrderByInput',
    '_PlayerMatch_penaltiesDrawn_OrderByInput',
    '_PlayerMatch_penaltyMinutes_OrderByInput',
    '_PlayerMatch_skaterPkClearZone_OrderByInput',
    '_PlayerMatch_plusMinus_OrderByInput',
    '_PlayerMatch_possessionSeconds_OrderByInput',
    '_PlayerMatch_powerPlayGoals_OrderByInput',
    '_PlayerMatch_saucerPasses_OrderByInput',
    '_PlayerMatch_shortHandedGoals_OrderByInput',
    '_PlayerMatch_shotAttempts_OrderByInput',
    '_PlayerMatch_shotsOnNetPct_OrderByInput',
    '_PlayerMatch_shootingPct_OrderByInput',
    '_PlayerMatch_shotsOnGoal_OrderByInput',
    '_PlayerMatch_takeaways_OrderByInput',
    '_PlayerMatch_points_OrderByInput',
    '_PlayerMatch_faceoffsTotal_OrderByInput',
    '_PlayerMatch_shotsMissed_OrderByInput',
    '_PlayerMatch_passesMissed_OrderByInput',
    '_PlayerMatch_passingPct_OrderByInput',
    '_PlayerMatch_majorPenalties_OrderByInput',
    '_PlayerMatch_minorPenalties_OrderByInput',
    '_PlayerMatch_totalPenalties_OrderByInput',
    '_PlayerMatch_pointsPer60_OrderByInput',
    '_PlayerMatch_possessionPerMinute_OrderByInput',
    '_PlayerMatch_shotEfficiency_OrderByInput',
    '_PlayerMatch_tkawayGvawayRatio_OrderByInput',
    '_PlayerMatch_penaltyDifferential_OrderByInput',
    '_PlayerMatch_defActionsPerMinute_OrderByInput',
    '_PlayerMatch_offImpact_OrderByInput',
    '_PlayerMatch_defImpact_OrderByInput',
    '_PlayerMatch_detailedPosition_OrderByInput',
    '_PlayerMatch_positionAbbreviation_OrderByInput',
    '_PlayerMatch_gameImpactScore_OrderByInput',
    '_PlayerMatch_puckManagementRating_OrderByInput',
    '_PlayerMatch_possessionEfficiency_OrderByInput',
    '_PlayerMatch_netDefContribution_OrderByInput',
    '_PlayerMatch_timeAdjustedRating_OrderByInput',
    '_PlayerMatch_shotGenerationRate_OrderByInput',
    '_PlayerMatch_offZonePresence_OrderByInput',
    '_PlayerMatch_twoWayRating_OrderByInput',
    '_PlayerMatch_breakawaySavePct_OrderByInput',
    '_PlayerMatch_breakawaySaves_OrderByInput',
    '_PlayerMatch_breakawayShots_OrderByInput',
    '_PlayerMatch_desperationSaves_OrderByInput',
    '_PlayerMatch_goalsAgainst_OrderByInput',
    '_PlayerMatch_goalsAgainstAverage_OrderByInput',
    '_PlayerMatch_penaltyShotSavePct_OrderByInput',
    '_PlayerMatch_penaltyShotSaves_OrderByInput',
    '_PlayerMatch_penaltyShotsFaced_OrderByInput',
    '_PlayerMatch_goaliePkClearZone_OrderByInput',
    '_PlayerMatch_pokeChecks_OrderByInput',
    '_PlayerMatch_savePct_OrderByInput',
    '_PlayerMatch_totalSaves_OrderByInput',
    '_PlayerMatch_totalShotsFaced_OrderByInput',
    '_PlayerMatch_shutoutPeriods_OrderByInput',
    '_PlayerMatch_goalsSaved_OrderByInput',
    '_PlayerMatch_createdAt_OrderByInput',
    '_PlayerMatch_updatedAt_OrderByInput',
    '_PlayerMatch_RelevanceOrderByInput',
]



# recursive PlayerMatch types
# TODO: cleanup these types



PlayerMatchRelationFilter = TypedDict(
    'PlayerMatchRelationFilter',
    {
        'is': 'PlayerMatchWhereInput',
        'is_not': 'PlayerMatchWhereInput',
    },
    total=False,
)


class PlayerMatchListRelationFilter(TypedDict, total=False):
    some: 'PlayerMatchWhereInput'
    none: 'PlayerMatchWhereInput'
    every: 'PlayerMatchWhereInput'


class PlayerMatchInclude(TypedDict, total=False):
    """PlayerMatch relational arguments"""
    match: Union[bool, 'MatchArgsFromPlayerMatch']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromPlayerMatch']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerMatch']


class ForumPostIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    author: Union[bool, 'UserArgsFromPlayerMatch']
    comments: Union[bool, 'FindManyForumCommentArgsFromPlayerMatch']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPlayerMatch']
    followers: Union[bool, 'FindManyForumFollowerArgsFromPlayerMatch']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromPlayerMatch']


class ForumPostArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']
    post: Union[bool, 'ForumPostArgsFromPlayerMatch']
    comment: Union[bool, 'ForumCommentArgsFromPlayerMatch']


class ForumReactionArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']
    post: Union[bool, 'ForumPostArgsFromPlayerMatch']


class ForumFollowerArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']
    post: Union[bool, 'ForumPostArgsFromPlayerMatch']


class ForumPostSubscriptionArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    author: Union[bool, 'UserArgsFromPlayerMatch']
    post: Union[bool, 'ForumPostArgsFromPlayerMatch']
    quotedComment: Union[bool, 'ForumCommentArgsFromPlayerMatch']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromPlayerMatch']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPlayerMatch']


class ForumCommentArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    parentLeague: Union[bool, 'LeagueArgsFromPlayerMatch']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromPlayerMatch']
    conferences: Union[bool, 'FindManyConferenceArgsFromPlayerMatch']
    divisions: Union[bool, 'FindManyDivisionArgsFromPlayerMatch']
    teams: Union[bool, 'FindManyTeamArgsFromPlayerMatch']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromPlayerMatch']


class LeagueArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    league: Union[bool, 'LeagueArgsFromPlayerMatch']
    season: Union[bool, 'SeasonArgsFromPlayerMatch']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPlayerMatch']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromPlayerMatch']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromPlayerMatch']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPlayerMatch']


class LeagueSeasonArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    league: Union[bool, 'LeagueArgsFromPlayerMatch']
    divisions: Union[bool, 'FindManyDivisionArgsFromPlayerMatch']


class ConferenceArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    conference: Union[bool, 'ConferenceArgsFromPlayerMatch']
    league: Union[bool, 'LeagueArgsFromPlayerMatch']
    teams: Union[bool, 'FindManyTeamArgsFromPlayerMatch']


class DivisionArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromPlayerMatch']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerMatch']


class SeasonArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerMatch']


class LeagueCommissionerArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerMatch']


class LeagueBOGArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerMatch']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromPlayerMatch']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromPlayerMatch']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromPlayerMatch']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromPlayerMatch']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerMatch']


class MatchArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPlayerMatch']
    match: Union[bool, 'MatchArgsFromPlayerMatch']


class ClubMatchStatsArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    customKit: Union[bool, 'CustomKitArgsFromPlayerMatch']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromPlayerMatch']


class ClubMatchStatsDetailsArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPlayerMatch']


class CustomKitArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    match: Union[bool, 'MatchArgsFromPlayerMatch']


class ClubAggregateMatchStatsArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    match: Union[bool, 'MatchArgsFromPlayerMatch']


class MatchAnalyticsArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    match: Union[bool, 'MatchArgsFromPlayerMatch']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromPlayerMatch']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerMatch']


class PlayerMatchArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']
    season: Union[bool, 'SeasonArgsFromPlayerMatch']
    contract: Union[bool, 'ContractArgsFromPlayerMatch']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerMatch']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPlayerMatch']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPlayerMatch']
    matches: Union[bool, 'FindManyMatchArgsFromPlayerMatch']


class PlayerSeasonArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerMatch']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromPlayerMatch']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromPlayerMatch']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromPlayerMatch']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPlayerMatch']


class PlayerTeamSeasonArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerMatch']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerMatch']


class PlayerLeagueHistoryArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromPlayerMatch']
    trophySummary: Union[bool, 'PSNTrophyArgsFromPlayerMatch']
    games: Union[bool, 'FindManyPSNGameArgsFromPlayerMatch']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromPlayerMatch']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromPlayerMatch']


class PSNProfileArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerMatch']


class PSNAvatarArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerMatch']


class PSNTrophyArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerMatch']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromPlayerMatch']


class PSNGameArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerMatch']


class PSNSyncLogArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerMatch']
    game: Union[bool, 'PSNGameArgsFromPlayerMatch']


class PSNGameTrophiesArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    league: Union[bool, 'LeagueArgsFromPlayerMatch']
    division: Union[bool, 'DivisionArgsFromPlayerMatch']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromPlayerMatch']
    nhlAffiliate: Union[bool, 'TeamArgsFromPlayerMatch']
    ahlAffiliate: Union[bool, 'TeamArgsFromPlayerMatch']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromPlayerMatch']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromPlayerMatch']


class TeamArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    team: Union[bool, 'TeamArgsFromPlayerMatch']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerMatch']
    matches: Union[bool, 'FindManyMatchArgsFromPlayerMatch']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerMatch']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerMatch']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerMatch']
    bids: Union[bool, 'FindManyBidArgsFromPlayerMatch']
    managers: Union[bool, 'FindManyTeamManagerArgsFromPlayerMatch']


class TeamSeasonArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerMatch']


class TeamManagerArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    contract: Union[bool, 'ContractArgsFromPlayerMatch']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerMatch']


class BidArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerMatch']
    bids: Union[bool, 'FindManyBidArgsFromPlayerMatch']


class ContractArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    notifications: Union[bool, 'FindManyNotificationArgsFromPlayerMatch']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromPlayerMatch']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromPlayerMatch']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromPlayerMatch']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromPlayerMatch']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromPlayerMatch']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromPlayerMatch']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromPlayerMatch']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromPlayerMatch']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPlayerMatch']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromPlayerMatch']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerMatch']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromPlayerMatch']
    psnProfile: Union[bool, 'PSNProfileArgsFromPlayerMatch']


class UserArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']


class EaIdHistoryArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']


class SystemHistoryArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']


class GamertagHistoryArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromPlayerMatch(TypedDict, total=False):
    """Relational arguments for PlayerMatch"""
    user: Union[bool, 'UserArgsFromPlayerMatch']


class NotificationArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromPlayerMatch(TypedDict, total=False):
    """Arguments for PlayerMatch"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyPlayerMatchArgs = FindManyPlayerMatchArgsFromPlayerMatch
FindFirstPlayerMatchArgs = FindManyPlayerMatchArgsFromPlayerMatch


class PlayerMatchWhereInput(TypedDict, total=False):
    """PlayerMatch arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    matchId: Union[_str, 'types.StringFilter']
    playerTeamSeasonId: Union[_str, 'types.StringFilter']
    playerSeasonId: Union[_str, 'types.StringFilter']
    playerLevel: Union[_int, 'types.IntFilter']
    position: Union[_str, 'types.StringFilter']
    posSorted: Union[_int, 'types.IntFilter']
    playerName: Union[_str, 'types.StringFilter']
    clientPlatform: Union[_str, 'types.StringFilter']
    playerLevelDisplay: Union[_int, 'types.IntFilter']
    isGuest: Union[_bool, 'types.BooleanFilter']
    playerDnf: Union[_bool, 'types.BooleanFilter']
    pNhlOnlineGameType: Union[_str, 'types.StringFilter']
    eaTeamId: Union[_str, 'types.StringFilter']
    teamSide: Union[_int, 'types.IntFilter']
    opponentClubId: Union[_str, 'types.StringFilter']
    opponentEaTeamId: Union[_str, 'types.StringFilter']
    opponentScore: Union[_int, 'types.IntFilter']
    score: Union[_int, 'types.IntFilter']
    ratingDefense: Union[_float, 'types.FloatFilter']
    ratingOffense: Union[_float, 'types.FloatFilter']
    ratingTeamplay: Union[_float, 'types.FloatFilter']
    toi: Union[_int, 'types.IntFilter']
    toiSeconds: Union[_int, 'types.IntFilter']
    assists: Union[_int, 'types.IntFilter']
    blockedShots: Union[_int, 'types.IntFilter']
    deflections: Union[_int, 'types.IntFilter']
    faceoffsLost: Union[_int, 'types.IntFilter']
    faceoffPct: Union[_float, 'types.FloatFilter']
    faceoffsWon: Union[_int, 'types.IntFilter']
    giveaways: Union[_int, 'types.IntFilter']
    goals: Union[_int, 'types.IntFilter']
    gameWinningGoals: Union[_int, 'types.IntFilter']
    hits: Union[_int, 'types.IntFilter']
    interceptions: Union[_int, 'types.IntFilter']
    passAttempts: Union[_int, 'types.IntFilter']
    passes: Union[_int, 'types.IntFilter']
    passPct: Union[_float, 'types.FloatFilter']
    penaltiesDrawn: Union[_int, 'types.IntFilter']
    penaltyMinutes: Union[_int, 'types.IntFilter']
    skaterPkClearZone: Union[_int, 'types.IntFilter']
    plusMinus: Union[_int, 'types.IntFilter']
    possessionSeconds: Union[_int, 'types.IntFilter']
    powerPlayGoals: Union[_int, 'types.IntFilter']
    saucerPasses: Union[_int, 'types.IntFilter']
    shortHandedGoals: Union[_int, 'types.IntFilter']
    shotAttempts: Union[_int, 'types.IntFilter']
    shotsOnNetPct: Union[_float, 'types.FloatFilter']
    shootingPct: Union[_float, 'types.FloatFilter']
    shotsOnGoal: Union[_int, 'types.IntFilter']
    takeaways: Union[_int, 'types.IntFilter']
    points: Union[_int, 'types.IntFilter']
    faceoffsTotal: Union[_int, 'types.IntFilter']
    shotsMissed: Union[_int, 'types.IntFilter']
    passesMissed: Union[_int, 'types.IntFilter']
    passingPct: Union[_float, 'types.FloatFilter']
    majorPenalties: Union[_int, 'types.IntFilter']
    minorPenalties: Union[_int, 'types.IntFilter']
    totalPenalties: Union[_int, 'types.IntFilter']
    pointsPer60: Union[_float, 'types.FloatFilter']
    possessionPerMinute: Union[_float, 'types.FloatFilter']
    shotEfficiency: Union[_float, 'types.FloatFilter']
    tkawayGvawayRatio: Union[_float, 'types.FloatFilter']
    penaltyDifferential: Union[_int, 'types.IntFilter']
    defActionsPerMinute: Union[_float, 'types.FloatFilter']
    offImpact: Union[_float, 'types.FloatFilter']
    defImpact: Union[_float, 'types.FloatFilter']
    detailedPosition: Union[_str, 'types.StringFilter']
    positionAbbreviation: Union[_str, 'types.StringFilter']
    gameImpactScore: Union[_float, 'types.FloatFilter']
    puckManagementRating: Union[_float, 'types.FloatFilter']
    possessionEfficiency: Union[_float, 'types.FloatFilter']
    netDefContribution: Union[_float, 'types.FloatFilter']
    timeAdjustedRating: Union[_float, 'types.FloatFilter']
    shotGenerationRate: Union[_float, 'types.FloatFilter']
    offZonePresence: Union[_float, 'types.FloatFilter']
    twoWayRating: Union[_float, 'types.FloatFilter']
    breakawaySavePct: Union[_float, 'types.FloatFilter']
    breakawaySaves: Union[_int, 'types.IntFilter']
    breakawayShots: Union[_int, 'types.IntFilter']
    desperationSaves: Union[_int, 'types.IntFilter']
    goalsAgainst: Union[_int, 'types.IntFilter']
    goalsAgainstAverage: Union[_float, 'types.FloatFilter']
    penaltyShotSavePct: Union[_float, 'types.FloatFilter']
    penaltyShotSaves: Union[_int, 'types.IntFilter']
    penaltyShotsFaced: Union[_int, 'types.IntFilter']
    goaliePkClearZone: Union[_int, 'types.IntFilter']
    pokeChecks: Union[_int, 'types.IntFilter']
    savePct: Union[_float, 'types.FloatFilter']
    totalSaves: Union[_int, 'types.IntFilter']
    totalShotsFaced: Union[_int, 'types.IntFilter']
    shutoutPeriods: Union[_int, 'types.IntFilter']
    goalsSaved: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    match: 'MatchRelationFilter'
    playerTeamSeason: 'PlayerTeamSeasonRelationFilter'
    playerSeason: 'PlayerSeasonRelationFilter'

    # should be noted that AND and NOT should be Union['PlayerMatchWhereInput', List['PlayerMatchWhereInput']]
    # but this causes mypy to hang :/
    AND: List['PlayerMatchWhereInput']
    OR: List['PlayerMatchWhereInput']
    NOT: List['PlayerMatchWhereInput']



# aggregate PlayerMatch types


class PlayerMatchScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PlayerMatch arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    matchId: Union[_str, 'types.StringWithAggregatesFilter']
    playerTeamSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    playerSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    playerLevel: Union[_int, 'types.IntWithAggregatesFilter']
    position: Union[_str, 'types.StringWithAggregatesFilter']
    posSorted: Union[_int, 'types.IntWithAggregatesFilter']
    playerName: Union[_str, 'types.StringWithAggregatesFilter']
    clientPlatform: Union[_str, 'types.StringWithAggregatesFilter']
    playerLevelDisplay: Union[_int, 'types.IntWithAggregatesFilter']
    isGuest: Union[_bool, 'types.BooleanWithAggregatesFilter']
    playerDnf: Union[_bool, 'types.BooleanWithAggregatesFilter']
    pNhlOnlineGameType: Union[_str, 'types.StringWithAggregatesFilter']
    eaTeamId: Union[_str, 'types.StringWithAggregatesFilter']
    teamSide: Union[_int, 'types.IntWithAggregatesFilter']
    opponentClubId: Union[_str, 'types.StringWithAggregatesFilter']
    opponentEaTeamId: Union[_str, 'types.StringWithAggregatesFilter']
    opponentScore: Union[_int, 'types.IntWithAggregatesFilter']
    score: Union[_int, 'types.IntWithAggregatesFilter']
    ratingDefense: Union[_float, 'types.FloatWithAggregatesFilter']
    ratingOffense: Union[_float, 'types.FloatWithAggregatesFilter']
    ratingTeamplay: Union[_float, 'types.FloatWithAggregatesFilter']
    toi: Union[_int, 'types.IntWithAggregatesFilter']
    toiSeconds: Union[_int, 'types.IntWithAggregatesFilter']
    assists: Union[_int, 'types.IntWithAggregatesFilter']
    blockedShots: Union[_int, 'types.IntWithAggregatesFilter']
    deflections: Union[_int, 'types.IntWithAggregatesFilter']
    faceoffsLost: Union[_int, 'types.IntWithAggregatesFilter']
    faceoffPct: Union[_float, 'types.FloatWithAggregatesFilter']
    faceoffsWon: Union[_int, 'types.IntWithAggregatesFilter']
    giveaways: Union[_int, 'types.IntWithAggregatesFilter']
    goals: Union[_int, 'types.IntWithAggregatesFilter']
    gameWinningGoals: Union[_int, 'types.IntWithAggregatesFilter']
    hits: Union[_int, 'types.IntWithAggregatesFilter']
    interceptions: Union[_int, 'types.IntWithAggregatesFilter']
    passAttempts: Union[_int, 'types.IntWithAggregatesFilter']
    passes: Union[_int, 'types.IntWithAggregatesFilter']
    passPct: Union[_float, 'types.FloatWithAggregatesFilter']
    penaltiesDrawn: Union[_int, 'types.IntWithAggregatesFilter']
    penaltyMinutes: Union[_int, 'types.IntWithAggregatesFilter']
    skaterPkClearZone: Union[_int, 'types.IntWithAggregatesFilter']
    plusMinus: Union[_int, 'types.IntWithAggregatesFilter']
    possessionSeconds: Union[_int, 'types.IntWithAggregatesFilter']
    powerPlayGoals: Union[_int, 'types.IntWithAggregatesFilter']
    saucerPasses: Union[_int, 'types.IntWithAggregatesFilter']
    shortHandedGoals: Union[_int, 'types.IntWithAggregatesFilter']
    shotAttempts: Union[_int, 'types.IntWithAggregatesFilter']
    shotsOnNetPct: Union[_float, 'types.FloatWithAggregatesFilter']
    shootingPct: Union[_float, 'types.FloatWithAggregatesFilter']
    shotsOnGoal: Union[_int, 'types.IntWithAggregatesFilter']
    takeaways: Union[_int, 'types.IntWithAggregatesFilter']
    points: Union[_int, 'types.IntWithAggregatesFilter']
    faceoffsTotal: Union[_int, 'types.IntWithAggregatesFilter']
    shotsMissed: Union[_int, 'types.IntWithAggregatesFilter']
    passesMissed: Union[_int, 'types.IntWithAggregatesFilter']
    passingPct: Union[_float, 'types.FloatWithAggregatesFilter']
    majorPenalties: Union[_int, 'types.IntWithAggregatesFilter']
    minorPenalties: Union[_int, 'types.IntWithAggregatesFilter']
    totalPenalties: Union[_int, 'types.IntWithAggregatesFilter']
    pointsPer60: Union[_float, 'types.FloatWithAggregatesFilter']
    possessionPerMinute: Union[_float, 'types.FloatWithAggregatesFilter']
    shotEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    tkawayGvawayRatio: Union[_float, 'types.FloatWithAggregatesFilter']
    penaltyDifferential: Union[_int, 'types.IntWithAggregatesFilter']
    defActionsPerMinute: Union[_float, 'types.FloatWithAggregatesFilter']
    offImpact: Union[_float, 'types.FloatWithAggregatesFilter']
    defImpact: Union[_float, 'types.FloatWithAggregatesFilter']
    detailedPosition: Union[_str, 'types.StringWithAggregatesFilter']
    positionAbbreviation: Union[_str, 'types.StringWithAggregatesFilter']
    gameImpactScore: Union[_float, 'types.FloatWithAggregatesFilter']
    puckManagementRating: Union[_float, 'types.FloatWithAggregatesFilter']
    possessionEfficiency: Union[_float, 'types.FloatWithAggregatesFilter']
    netDefContribution: Union[_float, 'types.FloatWithAggregatesFilter']
    timeAdjustedRating: Union[_float, 'types.FloatWithAggregatesFilter']
    shotGenerationRate: Union[_float, 'types.FloatWithAggregatesFilter']
    offZonePresence: Union[_float, 'types.FloatWithAggregatesFilter']
    twoWayRating: Union[_float, 'types.FloatWithAggregatesFilter']
    breakawaySavePct: Union[_float, 'types.FloatWithAggregatesFilter']
    breakawaySaves: Union[_int, 'types.IntWithAggregatesFilter']
    breakawayShots: Union[_int, 'types.IntWithAggregatesFilter']
    desperationSaves: Union[_int, 'types.IntWithAggregatesFilter']
    goalsAgainst: Union[_int, 'types.IntWithAggregatesFilter']
    goalsAgainstAverage: Union[_float, 'types.FloatWithAggregatesFilter']
    penaltyShotSavePct: Union[_float, 'types.FloatWithAggregatesFilter']
    penaltyShotSaves: Union[_int, 'types.IntWithAggregatesFilter']
    penaltyShotsFaced: Union[_int, 'types.IntWithAggregatesFilter']
    goaliePkClearZone: Union[_int, 'types.IntWithAggregatesFilter']
    pokeChecks: Union[_int, 'types.IntWithAggregatesFilter']
    savePct: Union[_float, 'types.FloatWithAggregatesFilter']
    totalSaves: Union[_int, 'types.IntWithAggregatesFilter']
    totalShotsFaced: Union[_int, 'types.IntWithAggregatesFilter']
    shutoutPeriods: Union[_int, 'types.IntWithAggregatesFilter']
    goalsSaved: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PlayerMatchScalarWhereWithAggregatesInput']
    OR: List['PlayerMatchScalarWhereWithAggregatesInput']
    NOT: List['PlayerMatchScalarWhereWithAggregatesInput']



class PlayerMatchGroupByOutput(TypedDict, total=False):
    id: _str
    matchId: _str
    playerTeamSeasonId: _str
    playerSeasonId: _str
    playerLevel: _int
    position: _str
    posSorted: _int
    playerName: _str
    clientPlatform: _str
    playerLevelDisplay: _int
    isGuest: _bool
    playerDnf: _bool
    pNhlOnlineGameType: _str
    eaTeamId: _str
    teamSide: _int
    opponentClubId: _str
    opponentEaTeamId: _str
    opponentScore: _int
    score: _int
    ratingDefense: _float
    ratingOffense: _float
    ratingTeamplay: _float
    toi: _int
    toiSeconds: _int
    assists: _int
    blockedShots: _int
    deflections: _int
    faceoffsLost: _int
    faceoffPct: _float
    faceoffsWon: _int
    giveaways: _int
    goals: _int
    gameWinningGoals: _int
    hits: _int
    interceptions: _int
    passAttempts: _int
    passes: _int
    passPct: _float
    penaltiesDrawn: _int
    penaltyMinutes: _int
    skaterPkClearZone: _int
    plusMinus: _int
    possessionSeconds: _int
    powerPlayGoals: _int
    saucerPasses: _int
    shortHandedGoals: _int
    shotAttempts: _int
    shotsOnNetPct: _float
    shootingPct: _float
    shotsOnGoal: _int
    takeaways: _int
    points: _int
    faceoffsTotal: _int
    shotsMissed: _int
    passesMissed: _int
    passingPct: _float
    majorPenalties: _int
    minorPenalties: _int
    totalPenalties: _int
    pointsPer60: _float
    possessionPerMinute: _float
    shotEfficiency: _float
    tkawayGvawayRatio: _float
    penaltyDifferential: _int
    defActionsPerMinute: _float
    offImpact: _float
    defImpact: _float
    detailedPosition: _str
    positionAbbreviation: _str
    gameImpactScore: _float
    puckManagementRating: _float
    possessionEfficiency: _float
    netDefContribution: _float
    timeAdjustedRating: _float
    shotGenerationRate: _float
    offZonePresence: _float
    twoWayRating: _float
    breakawaySavePct: _float
    breakawaySaves: _int
    breakawayShots: _int
    desperationSaves: _int
    goalsAgainst: _int
    goalsAgainstAverage: _float
    penaltyShotSavePct: _float
    penaltyShotSaves: _int
    penaltyShotsFaced: _int
    goaliePkClearZone: _int
    pokeChecks: _int
    savePct: _float
    totalSaves: _int
    totalShotsFaced: _int
    shutoutPeriods: _int
    goalsSaved: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PlayerMatchSumAggregateOutput'
    _avg: 'PlayerMatchAvgAggregateOutput'
    _min: 'PlayerMatchMinAggregateOutput'
    _max: 'PlayerMatchMaxAggregateOutput'
    _count: 'PlayerMatchCountAggregateOutput'


class PlayerMatchAvgAggregateOutput(TypedDict, total=False):
    """PlayerMatch output for aggregating averages"""
    playerLevel: float
    posSorted: float
    playerLevelDisplay: float
    teamSide: float
    opponentScore: float
    score: float
    ratingDefense: float
    ratingOffense: float
    ratingTeamplay: float
    toi: float
    toiSeconds: float
    assists: float
    blockedShots: float
    deflections: float
    faceoffsLost: float
    faceoffPct: float
    faceoffsWon: float
    giveaways: float
    goals: float
    gameWinningGoals: float
    hits: float
    interceptions: float
    passAttempts: float
    passes: float
    passPct: float
    penaltiesDrawn: float
    penaltyMinutes: float
    skaterPkClearZone: float
    plusMinus: float
    possessionSeconds: float
    powerPlayGoals: float
    saucerPasses: float
    shortHandedGoals: float
    shotAttempts: float
    shotsOnNetPct: float
    shootingPct: float
    shotsOnGoal: float
    takeaways: float
    points: float
    faceoffsTotal: float
    shotsMissed: float
    passesMissed: float
    passingPct: float
    majorPenalties: float
    minorPenalties: float
    totalPenalties: float
    pointsPer60: float
    possessionPerMinute: float
    shotEfficiency: float
    tkawayGvawayRatio: float
    penaltyDifferential: float
    defActionsPerMinute: float
    offImpact: float
    defImpact: float
    gameImpactScore: float
    puckManagementRating: float
    possessionEfficiency: float
    netDefContribution: float
    timeAdjustedRating: float
    shotGenerationRate: float
    offZonePresence: float
    twoWayRating: float
    breakawaySavePct: float
    breakawaySaves: float
    breakawayShots: float
    desperationSaves: float
    goalsAgainst: float
    goalsAgainstAverage: float
    penaltyShotSavePct: float
    penaltyShotSaves: float
    penaltyShotsFaced: float
    goaliePkClearZone: float
    pokeChecks: float
    savePct: float
    totalSaves: float
    totalShotsFaced: float
    shutoutPeriods: float
    goalsSaved: float


class PlayerMatchSumAggregateOutput(TypedDict, total=False):
    """PlayerMatch output for aggregating sums"""
    playerLevel: _int
    posSorted: _int
    playerLevelDisplay: _int
    teamSide: _int
    opponentScore: _int
    score: _int
    ratingDefense: _float
    ratingOffense: _float
    ratingTeamplay: _float
    toi: _int
    toiSeconds: _int
    assists: _int
    blockedShots: _int
    deflections: _int
    faceoffsLost: _int
    faceoffPct: _float
    faceoffsWon: _int
    giveaways: _int
    goals: _int
    gameWinningGoals: _int
    hits: _int
    interceptions: _int
    passAttempts: _int
    passes: _int
    passPct: _float
    penaltiesDrawn: _int
    penaltyMinutes: _int
    skaterPkClearZone: _int
    plusMinus: _int
    possessionSeconds: _int
    powerPlayGoals: _int
    saucerPasses: _int
    shortHandedGoals: _int
    shotAttempts: _int
    shotsOnNetPct: _float
    shootingPct: _float
    shotsOnGoal: _int
    takeaways: _int
    points: _int
    faceoffsTotal: _int
    shotsMissed: _int
    passesMissed: _int
    passingPct: _float
    majorPenalties: _int
    minorPenalties: _int
    totalPenalties: _int
    pointsPer60: _float
    possessionPerMinute: _float
    shotEfficiency: _float
    tkawayGvawayRatio: _float
    penaltyDifferential: _int
    defActionsPerMinute: _float
    offImpact: _float
    defImpact: _float
    gameImpactScore: _float
    puckManagementRating: _float
    possessionEfficiency: _float
    netDefContribution: _float
    timeAdjustedRating: _float
    shotGenerationRate: _float
    offZonePresence: _float
    twoWayRating: _float
    breakawaySavePct: _float
    breakawaySaves: _int
    breakawayShots: _int
    desperationSaves: _int
    goalsAgainst: _int
    goalsAgainstAverage: _float
    penaltyShotSavePct: _float
    penaltyShotSaves: _int
    penaltyShotsFaced: _int
    goaliePkClearZone: _int
    pokeChecks: _int
    savePct: _float
    totalSaves: _int
    totalShotsFaced: _int
    shutoutPeriods: _int
    goalsSaved: _int


class PlayerMatchScalarAggregateOutput(TypedDict, total=False):
    """PlayerMatch output including scalar fields"""
    id: _str
    matchId: _str
    playerTeamSeasonId: _str
    playerSeasonId: _str
    playerLevel: _int
    position: _str
    posSorted: _int
    playerName: _str
    clientPlatform: _str
    playerLevelDisplay: _int
    isGuest: _bool
    playerDnf: _bool
    pNhlOnlineGameType: _str
    eaTeamId: _str
    teamSide: _int
    opponentClubId: _str
    opponentEaTeamId: _str
    opponentScore: _int
    score: _int
    ratingDefense: _float
    ratingOffense: _float
    ratingTeamplay: _float
    toi: _int
    toiSeconds: _int
    assists: _int
    blockedShots: _int
    deflections: _int
    faceoffsLost: _int
    faceoffPct: _float
    faceoffsWon: _int
    giveaways: _int
    goals: _int
    gameWinningGoals: _int
    hits: _int
    interceptions: _int
    passAttempts: _int
    passes: _int
    passPct: _float
    penaltiesDrawn: _int
    penaltyMinutes: _int
    skaterPkClearZone: _int
    plusMinus: _int
    possessionSeconds: _int
    powerPlayGoals: _int
    saucerPasses: _int
    shortHandedGoals: _int
    shotAttempts: _int
    shotsOnNetPct: _float
    shootingPct: _float
    shotsOnGoal: _int
    takeaways: _int
    points: _int
    faceoffsTotal: _int
    shotsMissed: _int
    passesMissed: _int
    passingPct: _float
    majorPenalties: _int
    minorPenalties: _int
    totalPenalties: _int
    pointsPer60: _float
    possessionPerMinute: _float
    shotEfficiency: _float
    tkawayGvawayRatio: _float
    penaltyDifferential: _int
    defActionsPerMinute: _float
    offImpact: _float
    defImpact: _float
    detailedPosition: _str
    positionAbbreviation: _str
    gameImpactScore: _float
    puckManagementRating: _float
    possessionEfficiency: _float
    netDefContribution: _float
    timeAdjustedRating: _float
    shotGenerationRate: _float
    offZonePresence: _float
    twoWayRating: _float
    breakawaySavePct: _float
    breakawaySaves: _int
    breakawayShots: _int
    desperationSaves: _int
    goalsAgainst: _int
    goalsAgainstAverage: _float
    penaltyShotSavePct: _float
    penaltyShotSaves: _int
    penaltyShotsFaced: _int
    goaliePkClearZone: _int
    pokeChecks: _int
    savePct: _float
    totalSaves: _int
    totalShotsFaced: _int
    shutoutPeriods: _int
    goalsSaved: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PlayerMatchMinAggregateOutput = PlayerMatchScalarAggregateOutput
PlayerMatchMaxAggregateOutput = PlayerMatchScalarAggregateOutput


class PlayerMatchMaxAggregateInput(TypedDict, total=False):
    """PlayerMatch input for aggregating by max"""
    id: bool
    matchId: bool
    playerTeamSeasonId: bool
    playerSeasonId: bool
    playerLevel: bool
    position: bool
    posSorted: bool
    playerName: bool
    clientPlatform: bool
    playerLevelDisplay: bool
    isGuest: bool
    playerDnf: bool
    pNhlOnlineGameType: bool
    eaTeamId: bool
    teamSide: bool
    opponentClubId: bool
    opponentEaTeamId: bool
    opponentScore: bool
    score: bool
    ratingDefense: bool
    ratingOffense: bool
    ratingTeamplay: bool
    toi: bool
    toiSeconds: bool
    assists: bool
    blockedShots: bool
    deflections: bool
    faceoffsLost: bool
    faceoffPct: bool
    faceoffsWon: bool
    giveaways: bool
    goals: bool
    gameWinningGoals: bool
    hits: bool
    interceptions: bool
    passAttempts: bool
    passes: bool
    passPct: bool
    penaltiesDrawn: bool
    penaltyMinutes: bool
    skaterPkClearZone: bool
    plusMinus: bool
    possessionSeconds: bool
    powerPlayGoals: bool
    saucerPasses: bool
    shortHandedGoals: bool
    shotAttempts: bool
    shotsOnNetPct: bool
    shootingPct: bool
    shotsOnGoal: bool
    takeaways: bool
    points: bool
    faceoffsTotal: bool
    shotsMissed: bool
    passesMissed: bool
    passingPct: bool
    majorPenalties: bool
    minorPenalties: bool
    totalPenalties: bool
    pointsPer60: bool
    possessionPerMinute: bool
    shotEfficiency: bool
    tkawayGvawayRatio: bool
    penaltyDifferential: bool
    defActionsPerMinute: bool
    offImpact: bool
    defImpact: bool
    detailedPosition: bool
    positionAbbreviation: bool
    gameImpactScore: bool
    puckManagementRating: bool
    possessionEfficiency: bool
    netDefContribution: bool
    timeAdjustedRating: bool
    shotGenerationRate: bool
    offZonePresence: bool
    twoWayRating: bool
    breakawaySavePct: bool
    breakawaySaves: bool
    breakawayShots: bool
    desperationSaves: bool
    goalsAgainst: bool
    goalsAgainstAverage: bool
    penaltyShotSavePct: bool
    penaltyShotSaves: bool
    penaltyShotsFaced: bool
    goaliePkClearZone: bool
    pokeChecks: bool
    savePct: bool
    totalSaves: bool
    totalShotsFaced: bool
    shutoutPeriods: bool
    goalsSaved: bool
    createdAt: bool
    updatedAt: bool


class PlayerMatchMinAggregateInput(TypedDict, total=False):
    """PlayerMatch input for aggregating by min"""
    id: bool
    matchId: bool
    playerTeamSeasonId: bool
    playerSeasonId: bool
    playerLevel: bool
    position: bool
    posSorted: bool
    playerName: bool
    clientPlatform: bool
    playerLevelDisplay: bool
    isGuest: bool
    playerDnf: bool
    pNhlOnlineGameType: bool
    eaTeamId: bool
    teamSide: bool
    opponentClubId: bool
    opponentEaTeamId: bool
    opponentScore: bool
    score: bool
    ratingDefense: bool
    ratingOffense: bool
    ratingTeamplay: bool
    toi: bool
    toiSeconds: bool
    assists: bool
    blockedShots: bool
    deflections: bool
    faceoffsLost: bool
    faceoffPct: bool
    faceoffsWon: bool
    giveaways: bool
    goals: bool
    gameWinningGoals: bool
    hits: bool
    interceptions: bool
    passAttempts: bool
    passes: bool
    passPct: bool
    penaltiesDrawn: bool
    penaltyMinutes: bool
    skaterPkClearZone: bool
    plusMinus: bool
    possessionSeconds: bool
    powerPlayGoals: bool
    saucerPasses: bool
    shortHandedGoals: bool
    shotAttempts: bool
    shotsOnNetPct: bool
    shootingPct: bool
    shotsOnGoal: bool
    takeaways: bool
    points: bool
    faceoffsTotal: bool
    shotsMissed: bool
    passesMissed: bool
    passingPct: bool
    majorPenalties: bool
    minorPenalties: bool
    totalPenalties: bool
    pointsPer60: bool
    possessionPerMinute: bool
    shotEfficiency: bool
    tkawayGvawayRatio: bool
    penaltyDifferential: bool
    defActionsPerMinute: bool
    offImpact: bool
    defImpact: bool
    detailedPosition: bool
    positionAbbreviation: bool
    gameImpactScore: bool
    puckManagementRating: bool
    possessionEfficiency: bool
    netDefContribution: bool
    timeAdjustedRating: bool
    shotGenerationRate: bool
    offZonePresence: bool
    twoWayRating: bool
    breakawaySavePct: bool
    breakawaySaves: bool
    breakawayShots: bool
    desperationSaves: bool
    goalsAgainst: bool
    goalsAgainstAverage: bool
    penaltyShotSavePct: bool
    penaltyShotSaves: bool
    penaltyShotsFaced: bool
    goaliePkClearZone: bool
    pokeChecks: bool
    savePct: bool
    totalSaves: bool
    totalShotsFaced: bool
    shutoutPeriods: bool
    goalsSaved: bool
    createdAt: bool
    updatedAt: bool


class PlayerMatchNumberAggregateInput(TypedDict, total=False):
    """PlayerMatch input for aggregating numbers"""
    playerLevel: bool
    posSorted: bool
    playerLevelDisplay: bool
    teamSide: bool
    opponentScore: bool
    score: bool
    ratingDefense: bool
    ratingOffense: bool
    ratingTeamplay: bool
    toi: bool
    toiSeconds: bool
    assists: bool
    blockedShots: bool
    deflections: bool
    faceoffsLost: bool
    faceoffPct: bool
    faceoffsWon: bool
    giveaways: bool
    goals: bool
    gameWinningGoals: bool
    hits: bool
    interceptions: bool
    passAttempts: bool
    passes: bool
    passPct: bool
    penaltiesDrawn: bool
    penaltyMinutes: bool
    skaterPkClearZone: bool
    plusMinus: bool
    possessionSeconds: bool
    powerPlayGoals: bool
    saucerPasses: bool
    shortHandedGoals: bool
    shotAttempts: bool
    shotsOnNetPct: bool
    shootingPct: bool
    shotsOnGoal: bool
    takeaways: bool
    points: bool
    faceoffsTotal: bool
    shotsMissed: bool
    passesMissed: bool
    passingPct: bool
    majorPenalties: bool
    minorPenalties: bool
    totalPenalties: bool
    pointsPer60: bool
    possessionPerMinute: bool
    shotEfficiency: bool
    tkawayGvawayRatio: bool
    penaltyDifferential: bool
    defActionsPerMinute: bool
    offImpact: bool
    defImpact: bool
    gameImpactScore: bool
    puckManagementRating: bool
    possessionEfficiency: bool
    netDefContribution: bool
    timeAdjustedRating: bool
    shotGenerationRate: bool
    offZonePresence: bool
    twoWayRating: bool
    breakawaySavePct: bool
    breakawaySaves: bool
    breakawayShots: bool
    desperationSaves: bool
    goalsAgainst: bool
    goalsAgainstAverage: bool
    penaltyShotSavePct: bool
    penaltyShotSaves: bool
    penaltyShotsFaced: bool
    goaliePkClearZone: bool
    pokeChecks: bool
    savePct: bool
    totalSaves: bool
    totalShotsFaced: bool
    shutoutPeriods: bool
    goalsSaved: bool


PlayerMatchAvgAggregateInput = PlayerMatchNumberAggregateInput
PlayerMatchSumAggregateInput = PlayerMatchNumberAggregateInput


PlayerMatchCountAggregateInput = TypedDict(
    'PlayerMatchCountAggregateInput',
    {
        'id': bool,
        'matchId': bool,
        'playerTeamSeasonId': bool,
        'playerSeasonId': bool,
        'playerLevel': bool,
        'position': bool,
        'posSorted': bool,
        'playerName': bool,
        'clientPlatform': bool,
        'playerLevelDisplay': bool,
        'isGuest': bool,
        'playerDnf': bool,
        'pNhlOnlineGameType': bool,
        'eaTeamId': bool,
        'teamSide': bool,
        'opponentClubId': bool,
        'opponentEaTeamId': bool,
        'opponentScore': bool,
        'score': bool,
        'ratingDefense': bool,
        'ratingOffense': bool,
        'ratingTeamplay': bool,
        'toi': bool,
        'toiSeconds': bool,
        'assists': bool,
        'blockedShots': bool,
        'deflections': bool,
        'faceoffsLost': bool,
        'faceoffPct': bool,
        'faceoffsWon': bool,
        'giveaways': bool,
        'goals': bool,
        'gameWinningGoals': bool,
        'hits': bool,
        'interceptions': bool,
        'passAttempts': bool,
        'passes': bool,
        'passPct': bool,
        'penaltiesDrawn': bool,
        'penaltyMinutes': bool,
        'skaterPkClearZone': bool,
        'plusMinus': bool,
        'possessionSeconds': bool,
        'powerPlayGoals': bool,
        'saucerPasses': bool,
        'shortHandedGoals': bool,
        'shotAttempts': bool,
        'shotsOnNetPct': bool,
        'shootingPct': bool,
        'shotsOnGoal': bool,
        'takeaways': bool,
        'points': bool,
        'faceoffsTotal': bool,
        'shotsMissed': bool,
        'passesMissed': bool,
        'passingPct': bool,
        'majorPenalties': bool,
        'minorPenalties': bool,
        'totalPenalties': bool,
        'pointsPer60': bool,
        'possessionPerMinute': bool,
        'shotEfficiency': bool,
        'tkawayGvawayRatio': bool,
        'penaltyDifferential': bool,
        'defActionsPerMinute': bool,
        'offImpact': bool,
        'defImpact': bool,
        'detailedPosition': bool,
        'positionAbbreviation': bool,
        'gameImpactScore': bool,
        'puckManagementRating': bool,
        'possessionEfficiency': bool,
        'netDefContribution': bool,
        'timeAdjustedRating': bool,
        'shotGenerationRate': bool,
        'offZonePresence': bool,
        'twoWayRating': bool,
        'breakawaySavePct': bool,
        'breakawaySaves': bool,
        'breakawayShots': bool,
        'desperationSaves': bool,
        'goalsAgainst': bool,
        'goalsAgainstAverage': bool,
        'penaltyShotSavePct': bool,
        'penaltyShotSaves': bool,
        'penaltyShotsFaced': bool,
        'goaliePkClearZone': bool,
        'pokeChecks': bool,
        'savePct': bool,
        'totalSaves': bool,
        'totalShotsFaced': bool,
        'shutoutPeriods': bool,
        'goalsSaved': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PlayerMatchCountAggregateOutput = TypedDict(
    'PlayerMatchCountAggregateOutput',
    {
        'id': int,
        'matchId': int,
        'playerTeamSeasonId': int,
        'playerSeasonId': int,
        'playerLevel': int,
        'position': int,
        'posSorted': int,
        'playerName': int,
        'clientPlatform': int,
        'playerLevelDisplay': int,
        'isGuest': int,
        'playerDnf': int,
        'pNhlOnlineGameType': int,
        'eaTeamId': int,
        'teamSide': int,
        'opponentClubId': int,
        'opponentEaTeamId': int,
        'opponentScore': int,
        'score': int,
        'ratingDefense': int,
        'ratingOffense': int,
        'ratingTeamplay': int,
        'toi': int,
        'toiSeconds': int,
        'assists': int,
        'blockedShots': int,
        'deflections': int,
        'faceoffsLost': int,
        'faceoffPct': int,
        'faceoffsWon': int,
        'giveaways': int,
        'goals': int,
        'gameWinningGoals': int,
        'hits': int,
        'interceptions': int,
        'passAttempts': int,
        'passes': int,
        'passPct': int,
        'penaltiesDrawn': int,
        'penaltyMinutes': int,
        'skaterPkClearZone': int,
        'plusMinus': int,
        'possessionSeconds': int,
        'powerPlayGoals': int,
        'saucerPasses': int,
        'shortHandedGoals': int,
        'shotAttempts': int,
        'shotsOnNetPct': int,
        'shootingPct': int,
        'shotsOnGoal': int,
        'takeaways': int,
        'points': int,
        'faceoffsTotal': int,
        'shotsMissed': int,
        'passesMissed': int,
        'passingPct': int,
        'majorPenalties': int,
        'minorPenalties': int,
        'totalPenalties': int,
        'pointsPer60': int,
        'possessionPerMinute': int,
        'shotEfficiency': int,
        'tkawayGvawayRatio': int,
        'penaltyDifferential': int,
        'defActionsPerMinute': int,
        'offImpact': int,
        'defImpact': int,
        'detailedPosition': int,
        'positionAbbreviation': int,
        'gameImpactScore': int,
        'puckManagementRating': int,
        'possessionEfficiency': int,
        'netDefContribution': int,
        'timeAdjustedRating': int,
        'shotGenerationRate': int,
        'offZonePresence': int,
        'twoWayRating': int,
        'breakawaySavePct': int,
        'breakawaySaves': int,
        'breakawayShots': int,
        'desperationSaves': int,
        'goalsAgainst': int,
        'goalsAgainstAverage': int,
        'penaltyShotSavePct': int,
        'penaltyShotSaves': int,
        'penaltyShotsFaced': int,
        'goaliePkClearZone': int,
        'pokeChecks': int,
        'savePct': int,
        'totalSaves': int,
        'totalShotsFaced': int,
        'shutoutPeriods': int,
        'goalsSaved': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PlayerMatchKeys = Literal[
    'id',
    'matchId',
    'playerTeamSeasonId',
    'playerSeasonId',
    'playerLevel',
    'position',
    'posSorted',
    'playerName',
    'clientPlatform',
    'playerLevelDisplay',
    'isGuest',
    'playerDnf',
    'pNhlOnlineGameType',
    'eaTeamId',
    'teamSide',
    'opponentClubId',
    'opponentEaTeamId',
    'opponentScore',
    'score',
    'ratingDefense',
    'ratingOffense',
    'ratingTeamplay',
    'toi',
    'toiSeconds',
    'assists',
    'blockedShots',
    'deflections',
    'faceoffsLost',
    'faceoffPct',
    'faceoffsWon',
    'giveaways',
    'goals',
    'gameWinningGoals',
    'hits',
    'interceptions',
    'passAttempts',
    'passes',
    'passPct',
    'penaltiesDrawn',
    'penaltyMinutes',
    'skaterPkClearZone',
    'plusMinus',
    'possessionSeconds',
    'powerPlayGoals',
    'saucerPasses',
    'shortHandedGoals',
    'shotAttempts',
    'shotsOnNetPct',
    'shootingPct',
    'shotsOnGoal',
    'takeaways',
    'points',
    'faceoffsTotal',
    'shotsMissed',
    'passesMissed',
    'passingPct',
    'majorPenalties',
    'minorPenalties',
    'totalPenalties',
    'pointsPer60',
    'possessionPerMinute',
    'shotEfficiency',
    'tkawayGvawayRatio',
    'penaltyDifferential',
    'defActionsPerMinute',
    'offImpact',
    'defImpact',
    'detailedPosition',
    'positionAbbreviation',
    'gameImpactScore',
    'puckManagementRating',
    'possessionEfficiency',
    'netDefContribution',
    'timeAdjustedRating',
    'shotGenerationRate',
    'offZonePresence',
    'twoWayRating',
    'breakawaySavePct',
    'breakawaySaves',
    'breakawayShots',
    'desperationSaves',
    'goalsAgainst',
    'goalsAgainstAverage',
    'penaltyShotSavePct',
    'penaltyShotSaves',
    'penaltyShotsFaced',
    'goaliePkClearZone',
    'pokeChecks',
    'savePct',
    'totalSaves',
    'totalShotsFaced',
    'shutoutPeriods',
    'goalsSaved',
    'createdAt',
    'updatedAt',
    'match',
    'playerTeamSeason',
    'playerSeason',
]
PlayerMatchScalarFieldKeys = Literal[
    'id',
    'matchId',
    'playerTeamSeasonId',
    'playerSeasonId',
    'playerLevel',
    'position',
    'posSorted',
    'playerName',
    'clientPlatform',
    'playerLevelDisplay',
    'isGuest',
    'playerDnf',
    'pNhlOnlineGameType',
    'eaTeamId',
    'teamSide',
    'opponentClubId',
    'opponentEaTeamId',
    'opponentScore',
    'score',
    'ratingDefense',
    'ratingOffense',
    'ratingTeamplay',
    'toi',
    'toiSeconds',
    'assists',
    'blockedShots',
    'deflections',
    'faceoffsLost',
    'faceoffPct',
    'faceoffsWon',
    'giveaways',
    'goals',
    'gameWinningGoals',
    'hits',
    'interceptions',
    'passAttempts',
    'passes',
    'passPct',
    'penaltiesDrawn',
    'penaltyMinutes',
    'skaterPkClearZone',
    'plusMinus',
    'possessionSeconds',
    'powerPlayGoals',
    'saucerPasses',
    'shortHandedGoals',
    'shotAttempts',
    'shotsOnNetPct',
    'shootingPct',
    'shotsOnGoal',
    'takeaways',
    'points',
    'faceoffsTotal',
    'shotsMissed',
    'passesMissed',
    'passingPct',
    'majorPenalties',
    'minorPenalties',
    'totalPenalties',
    'pointsPer60',
    'possessionPerMinute',
    'shotEfficiency',
    'tkawayGvawayRatio',
    'penaltyDifferential',
    'defActionsPerMinute',
    'offImpact',
    'defImpact',
    'detailedPosition',
    'positionAbbreviation',
    'gameImpactScore',
    'puckManagementRating',
    'possessionEfficiency',
    'netDefContribution',
    'timeAdjustedRating',
    'shotGenerationRate',
    'offZonePresence',
    'twoWayRating',
    'breakawaySavePct',
    'breakawaySaves',
    'breakawayShots',
    'desperationSaves',
    'goalsAgainst',
    'goalsAgainstAverage',
    'penaltyShotSavePct',
    'penaltyShotSaves',
    'penaltyShotsFaced',
    'goaliePkClearZone',
    'pokeChecks',
    'savePct',
    'totalSaves',
    'totalShotsFaced',
    'shutoutPeriods',
    'goalsSaved',
    'createdAt',
    'updatedAt',
]
PlayerMatchScalarFieldKeysT = TypeVar('PlayerMatchScalarFieldKeysT', bound=PlayerMatchScalarFieldKeys)

PlayerMatchRelationalFieldKeys = Literal[
        'match',
        'playerTeamSeason',
        'playerSeason',
    ]

# PlayerSeason types

class PlayerSeasonOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PlayerSeason create method"""
    id: _str
    userId: _str
    seasonId: _str
    contractId: _str
    isInBidding: _bool
    user: 'UserCreateNestedWithoutRelationsInput'
    season: 'SeasonCreateNestedWithoutRelationsInput'
    contract: 'ContractCreateNestedWithoutRelationsInput'
    teamSeasons: 'PlayerTeamSeasonCreateManyNestedWithoutRelationsInput'
    leagueHistory: 'PlayerLeagueHistoryCreateManyNestedWithoutRelationsInput'
    playerMatches: 'PlayerMatchCreateManyNestedWithoutRelationsInput'
    matches: 'MatchCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerSeasonCreateInput(PlayerSeasonOptionalCreateInput):
    """Required arguments to the PlayerSeason create method"""
    primaryPosition: 'enums.PlayerPosition'
    positionGroup: 'enums.PositionGroup'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PlayerSeasonOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PlayerSeason create method, without relations"""
    id: _str
    userId: _str
    seasonId: _str
    contractId: _str
    isInBidding: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerSeasonCreateWithoutRelationsInput(PlayerSeasonOptionalCreateWithoutRelationsInput):
    """Required arguments to the PlayerSeason create method, without relations"""
    primaryPosition: 'enums.PlayerPosition'
    positionGroup: 'enums.PositionGroup'

class PlayerSeasonConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PlayerSeasonCreateWithoutRelationsInput'
    where: 'PlayerSeasonWhereUniqueInput'

class PlayerSeasonCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PlayerSeasonCreateWithoutRelationsInput'
    connect: 'PlayerSeasonWhereUniqueInput'
    connect_or_create: 'PlayerSeasonConnectOrCreateWithoutRelationsInput'


class PlayerSeasonCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PlayerSeasonCreateWithoutRelationsInput', List['PlayerSeasonCreateWithoutRelationsInput']]
    connect: Union['PlayerSeasonWhereUniqueInput', List['PlayerSeasonWhereUniqueInput']]
    connect_or_create: Union['PlayerSeasonConnectOrCreateWithoutRelationsInput', List['PlayerSeasonConnectOrCreateWithoutRelationsInput']]

_PlayerSeasonWhereUnique_id_Input = TypedDict(
    '_PlayerSeasonWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PlayerSeasonWhereUnique_contractId_Input = TypedDict(
    '_PlayerSeasonWhereUnique_contractId_Input',
    {
        'contractId': '_str',
    },
    total=True
)

PlayerSeasonWhereUniqueInput = Union[
    '_PlayerSeasonWhereUnique_id_Input',
    '_PlayerSeasonWhereUnique_contractId_Input',
]


class PlayerSeasonUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    primaryPosition: 'enums.PlayerPosition'
    positionGroup: 'enums.PositionGroup'
    isInBidding: _bool
    user: 'UserUpdateOneWithoutRelationsInput'
    season: 'SeasonUpdateOneWithoutRelationsInput'
    contract: 'ContractUpdateOneWithoutRelationsInput'
    teamSeasons: 'PlayerTeamSeasonUpdateManyWithoutRelationsInput'
    leagueHistory: 'PlayerLeagueHistoryUpdateManyWithoutRelationsInput'
    playerMatches: 'PlayerMatchUpdateManyWithoutRelationsInput'
    matches: 'MatchUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerSeasonUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    primaryPosition: 'enums.PlayerPosition'
    positionGroup: 'enums.PositionGroup'
    isInBidding: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerSeasonUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PlayerSeasonCreateWithoutRelationsInput']
    connect: List['PlayerSeasonWhereUniqueInput']
    connect_or_create: List['PlayerSeasonConnectOrCreateWithoutRelationsInput']
    set: List['PlayerSeasonWhereUniqueInput']
    disconnect: List['PlayerSeasonWhereUniqueInput']
    delete: List['PlayerSeasonWhereUniqueInput']

    # TODO
    # update: List['PlayerSeasonUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PlayerSeasonUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PlayerSeasonScalarWhereInput']
    # upsert: List['PlayerSeasonUpserteWithWhereUniqueWithoutRelationsInput']


class PlayerSeasonUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PlayerSeasonCreateWithoutRelationsInput'
    connect: 'PlayerSeasonWhereUniqueInput'
    connect_or_create: 'PlayerSeasonConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PlayerSeasonUpdateInput'
    # upsert: 'PlayerSeasonUpsertWithoutRelationsInput'


class PlayerSeasonUpsertInput(TypedDict):
    create: 'PlayerSeasonCreateInput'
    update: 'PlayerSeasonUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PlayerSeason_id_OrderByInput = TypedDict(
    '_PlayerSeason_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PlayerSeason_userId_OrderByInput = TypedDict(
    '_PlayerSeason_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_PlayerSeason_seasonId_OrderByInput = TypedDict(
    '_PlayerSeason_seasonId_OrderByInput',
    {
        'seasonId': 'SortOrder',
    },
    total=True
)

_PlayerSeason_contractId_OrderByInput = TypedDict(
    '_PlayerSeason_contractId_OrderByInput',
    {
        'contractId': 'SortOrder',
    },
    total=True
)

_PlayerSeason_primaryPosition_OrderByInput = TypedDict(
    '_PlayerSeason_primaryPosition_OrderByInput',
    {
        'primaryPosition': 'SortOrder',
    },
    total=True
)

_PlayerSeason_positionGroup_OrderByInput = TypedDict(
    '_PlayerSeason_positionGroup_OrderByInput',
    {
        'positionGroup': 'SortOrder',
    },
    total=True
)

_PlayerSeason_isInBidding_OrderByInput = TypedDict(
    '_PlayerSeason_isInBidding_OrderByInput',
    {
        'isInBidding': 'SortOrder',
    },
    total=True
)

_PlayerSeason_createdAt_OrderByInput = TypedDict(
    '_PlayerSeason_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_PlayerSeason_updatedAt_OrderByInput = TypedDict(
    '_PlayerSeason_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_PlayerSeason_RelevanceInner = TypedDict(
    '_PlayerSeason_RelevanceInner',
    {
        'fields': 'List[PlayerSeasonScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_PlayerSeason_RelevanceOrderByInput = TypedDict(
    '_PlayerSeason_RelevanceOrderByInput',
    {
        '_relevance': '_PlayerSeason_RelevanceInner',
    },
    total=True
)

PlayerSeasonOrderByInput = Union[
    '_PlayerSeason_id_OrderByInput',
    '_PlayerSeason_userId_OrderByInput',
    '_PlayerSeason_seasonId_OrderByInput',
    '_PlayerSeason_contractId_OrderByInput',
    '_PlayerSeason_primaryPosition_OrderByInput',
    '_PlayerSeason_positionGroup_OrderByInput',
    '_PlayerSeason_isInBidding_OrderByInput',
    '_PlayerSeason_createdAt_OrderByInput',
    '_PlayerSeason_updatedAt_OrderByInput',
    '_PlayerSeason_RelevanceOrderByInput',
]



# recursive PlayerSeason types
# TODO: cleanup these types



PlayerSeasonRelationFilter = TypedDict(
    'PlayerSeasonRelationFilter',
    {
        'is': 'PlayerSeasonWhereInput',
        'is_not': 'PlayerSeasonWhereInput',
    },
    total=False,
)


class PlayerSeasonListRelationFilter(TypedDict, total=False):
    some: 'PlayerSeasonWhereInput'
    none: 'PlayerSeasonWhereInput'
    every: 'PlayerSeasonWhereInput'


class PlayerSeasonInclude(TypedDict, total=False):
    """PlayerSeason relational arguments"""
    user: Union[bool, 'UserArgsFromPlayerSeason']
    season: Union[bool, 'SeasonArgsFromPlayerSeason']
    contract: Union[bool, 'ContractArgsFromPlayerSeason']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerSeason']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPlayerSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPlayerSeason']
    matches: Union[bool, 'FindManyMatchArgsFromPlayerSeason']


class ForumPostIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    author: Union[bool, 'UserArgsFromPlayerSeason']
    comments: Union[bool, 'FindManyForumCommentArgsFromPlayerSeason']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPlayerSeason']
    followers: Union[bool, 'FindManyForumFollowerArgsFromPlayerSeason']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromPlayerSeason']


class ForumPostArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']
    post: Union[bool, 'ForumPostArgsFromPlayerSeason']
    comment: Union[bool, 'ForumCommentArgsFromPlayerSeason']


class ForumReactionArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']
    post: Union[bool, 'ForumPostArgsFromPlayerSeason']


class ForumFollowerArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']
    post: Union[bool, 'ForumPostArgsFromPlayerSeason']


class ForumPostSubscriptionArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    author: Union[bool, 'UserArgsFromPlayerSeason']
    post: Union[bool, 'ForumPostArgsFromPlayerSeason']
    quotedComment: Union[bool, 'ForumCommentArgsFromPlayerSeason']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromPlayerSeason']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPlayerSeason']


class ForumCommentArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    parentLeague: Union[bool, 'LeagueArgsFromPlayerSeason']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromPlayerSeason']
    conferences: Union[bool, 'FindManyConferenceArgsFromPlayerSeason']
    divisions: Union[bool, 'FindManyDivisionArgsFromPlayerSeason']
    teams: Union[bool, 'FindManyTeamArgsFromPlayerSeason']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromPlayerSeason']


class LeagueArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    league: Union[bool, 'LeagueArgsFromPlayerSeason']
    season: Union[bool, 'SeasonArgsFromPlayerSeason']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPlayerSeason']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromPlayerSeason']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromPlayerSeason']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPlayerSeason']


class LeagueSeasonArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    league: Union[bool, 'LeagueArgsFromPlayerSeason']
    divisions: Union[bool, 'FindManyDivisionArgsFromPlayerSeason']


class ConferenceArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    conference: Union[bool, 'ConferenceArgsFromPlayerSeason']
    league: Union[bool, 'LeagueArgsFromPlayerSeason']
    teams: Union[bool, 'FindManyTeamArgsFromPlayerSeason']


class DivisionArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromPlayerSeason']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerSeason']


class SeasonArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerSeason']


class LeagueCommissionerArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerSeason']


class LeagueBOGArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerSeason']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromPlayerSeason']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromPlayerSeason']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromPlayerSeason']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromPlayerSeason']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerSeason']


class MatchArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPlayerSeason']
    match: Union[bool, 'MatchArgsFromPlayerSeason']


class ClubMatchStatsArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    customKit: Union[bool, 'CustomKitArgsFromPlayerSeason']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromPlayerSeason']


class ClubMatchStatsDetailsArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPlayerSeason']


class CustomKitArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    match: Union[bool, 'MatchArgsFromPlayerSeason']


class ClubAggregateMatchStatsArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    match: Union[bool, 'MatchArgsFromPlayerSeason']


class MatchAnalyticsArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    match: Union[bool, 'MatchArgsFromPlayerSeason']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromPlayerSeason']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerSeason']


class PlayerMatchArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']
    season: Union[bool, 'SeasonArgsFromPlayerSeason']
    contract: Union[bool, 'ContractArgsFromPlayerSeason']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerSeason']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPlayerSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPlayerSeason']
    matches: Union[bool, 'FindManyMatchArgsFromPlayerSeason']


class PlayerSeasonArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerSeason']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromPlayerSeason']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromPlayerSeason']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromPlayerSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPlayerSeason']


class PlayerTeamSeasonArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerSeason']


class PlayerLeagueHistoryArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromPlayerSeason']
    trophySummary: Union[bool, 'PSNTrophyArgsFromPlayerSeason']
    games: Union[bool, 'FindManyPSNGameArgsFromPlayerSeason']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromPlayerSeason']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromPlayerSeason']


class PSNProfileArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerSeason']


class PSNAvatarArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerSeason']


class PSNTrophyArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerSeason']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromPlayerSeason']


class PSNGameArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerSeason']


class PSNSyncLogArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerSeason']
    game: Union[bool, 'PSNGameArgsFromPlayerSeason']


class PSNGameTrophiesArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    league: Union[bool, 'LeagueArgsFromPlayerSeason']
    division: Union[bool, 'DivisionArgsFromPlayerSeason']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromPlayerSeason']
    nhlAffiliate: Union[bool, 'TeamArgsFromPlayerSeason']
    ahlAffiliate: Union[bool, 'TeamArgsFromPlayerSeason']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromPlayerSeason']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromPlayerSeason']


class TeamArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    team: Union[bool, 'TeamArgsFromPlayerSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerSeason']
    matches: Union[bool, 'FindManyMatchArgsFromPlayerSeason']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerSeason']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerSeason']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerSeason']
    bids: Union[bool, 'FindManyBidArgsFromPlayerSeason']
    managers: Union[bool, 'FindManyTeamManagerArgsFromPlayerSeason']


class TeamSeasonArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerSeason']


class TeamManagerArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    contract: Union[bool, 'ContractArgsFromPlayerSeason']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerSeason']


class BidArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerSeason']
    bids: Union[bool, 'FindManyBidArgsFromPlayerSeason']


class ContractArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    notifications: Union[bool, 'FindManyNotificationArgsFromPlayerSeason']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromPlayerSeason']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromPlayerSeason']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromPlayerSeason']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromPlayerSeason']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromPlayerSeason']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromPlayerSeason']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromPlayerSeason']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromPlayerSeason']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPlayerSeason']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromPlayerSeason']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerSeason']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromPlayerSeason']
    psnProfile: Union[bool, 'PSNProfileArgsFromPlayerSeason']


class UserArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']


class EaIdHistoryArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']


class SystemHistoryArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']


class GamertagHistoryArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromPlayerSeason(TypedDict, total=False):
    """Relational arguments for PlayerSeason"""
    user: Union[bool, 'UserArgsFromPlayerSeason']


class NotificationArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromPlayerSeason(TypedDict, total=False):
    """Arguments for PlayerSeason"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyPlayerSeasonArgs = FindManyPlayerSeasonArgsFromPlayerSeason
FindFirstPlayerSeasonArgs = FindManyPlayerSeasonArgsFromPlayerSeason


class PlayerSeasonWhereInput(TypedDict, total=False):
    """PlayerSeason arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    seasonId: Union[_str, 'types.StringFilter']
    contractId: Union[_str, 'types.StringFilter']
    primaryPosition: 'enums.PlayerPosition'
    positionGroup: 'enums.PositionGroup'
    isInBidding: Union[_bool, 'types.BooleanFilter']
    user: 'UserRelationFilter'
    season: 'SeasonRelationFilter'
    contract: 'ContractRelationFilter'
    teamSeasons: 'PlayerTeamSeasonListRelationFilter'
    leagueHistory: 'PlayerLeagueHistoryListRelationFilter'
    playerMatches: 'PlayerMatchListRelationFilter'
    matches: 'MatchListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PlayerSeasonWhereInput', List['PlayerSeasonWhereInput']]
    # but this causes mypy to hang :/
    AND: List['PlayerSeasonWhereInput']
    OR: List['PlayerSeasonWhereInput']
    NOT: List['PlayerSeasonWhereInput']



# aggregate PlayerSeason types


class PlayerSeasonScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PlayerSeason arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    seasonId: Union[_str, 'types.StringWithAggregatesFilter']
    contractId: Union[_str, 'types.StringWithAggregatesFilter']
    primaryPosition: 'enums.PlayerPosition'
    positionGroup: 'enums.PositionGroup'
    isInBidding: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PlayerSeasonScalarWhereWithAggregatesInput']
    OR: List['PlayerSeasonScalarWhereWithAggregatesInput']
    NOT: List['PlayerSeasonScalarWhereWithAggregatesInput']



class PlayerSeasonGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    seasonId: _str
    contractId: _str
    primaryPosition: 'enums.PlayerPosition'
    positionGroup: 'enums.PositionGroup'
    isInBidding: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PlayerSeasonSumAggregateOutput'
    _avg: 'PlayerSeasonAvgAggregateOutput'
    _min: 'PlayerSeasonMinAggregateOutput'
    _max: 'PlayerSeasonMaxAggregateOutput'
    _count: 'PlayerSeasonCountAggregateOutput'


class PlayerSeasonAvgAggregateOutput(TypedDict, total=False):
    """PlayerSeason output for aggregating averages"""


class PlayerSeasonSumAggregateOutput(TypedDict, total=False):
    """PlayerSeason output for aggregating sums"""


class PlayerSeasonScalarAggregateOutput(TypedDict, total=False):
    """PlayerSeason output including scalar fields"""
    id: _str
    userId: _str
    seasonId: _str
    contractId: _str
    primaryPosition: 'enums.PlayerPosition'
    positionGroup: 'enums.PositionGroup'
    isInBidding: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PlayerSeasonMinAggregateOutput = PlayerSeasonScalarAggregateOutput
PlayerSeasonMaxAggregateOutput = PlayerSeasonScalarAggregateOutput


class PlayerSeasonMaxAggregateInput(TypedDict, total=False):
    """PlayerSeason input for aggregating by max"""
    id: bool
    userId: bool
    seasonId: bool
    contractId: bool
    primaryPosition: bool
    positionGroup: bool
    isInBidding: bool
    createdAt: bool
    updatedAt: bool


class PlayerSeasonMinAggregateInput(TypedDict, total=False):
    """PlayerSeason input for aggregating by min"""
    id: bool
    userId: bool
    seasonId: bool
    contractId: bool
    primaryPosition: bool
    positionGroup: bool
    isInBidding: bool
    createdAt: bool
    updatedAt: bool


class PlayerSeasonNumberAggregateInput(TypedDict, total=False):
    """PlayerSeason input for aggregating numbers"""


PlayerSeasonAvgAggregateInput = PlayerSeasonNumberAggregateInput
PlayerSeasonSumAggregateInput = PlayerSeasonNumberAggregateInput


PlayerSeasonCountAggregateInput = TypedDict(
    'PlayerSeasonCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'seasonId': bool,
        'contractId': bool,
        'primaryPosition': bool,
        'positionGroup': bool,
        'isInBidding': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PlayerSeasonCountAggregateOutput = TypedDict(
    'PlayerSeasonCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'seasonId': int,
        'contractId': int,
        'primaryPosition': int,
        'positionGroup': int,
        'isInBidding': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PlayerSeasonKeys = Literal[
    'id',
    'userId',
    'seasonId',
    'contractId',
    'primaryPosition',
    'positionGroup',
    'isInBidding',
    'user',
    'season',
    'contract',
    'teamSeasons',
    'leagueHistory',
    'playerMatches',
    'matches',
    'createdAt',
    'updatedAt',
]
PlayerSeasonScalarFieldKeys = Literal[
    'id',
    'userId',
    'seasonId',
    'contractId',
    'primaryPosition',
    'positionGroup',
    'isInBidding',
    'createdAt',
    'updatedAt',
]
PlayerSeasonScalarFieldKeysT = TypeVar('PlayerSeasonScalarFieldKeysT', bound=PlayerSeasonScalarFieldKeys)

PlayerSeasonRelationalFieldKeys = Literal[
        'user',
        'season',
        'contract',
        'teamSeasons',
        'leagueHistory',
        'playerMatches',
        'matches',
    ]

# PlayerTeamSeason types

class PlayerTeamSeasonOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PlayerTeamSeason create method"""
    id: _str
    playerSeasonId: _str
    rosterTeamId: Optional[_str]
    trainingCampTeamId: Optional[_str]
    inactiveTeamId: Optional[_str]
    isRosterPlayer: _bool
    isTrainingCampPlayer: _bool
    isInactivePlayer: _bool
    playerSeason: 'PlayerSeasonCreateNestedWithoutRelationsInput'
    rosterTeam: 'TeamSeasonCreateNestedWithoutRelationsInput'
    trainingCampTeam: 'TeamSeasonCreateNestedWithoutRelationsInput'
    inactiveTeam: 'TeamSeasonCreateNestedWithoutRelationsInput'
    playerMatches: 'PlayerMatchCreateManyNestedWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerTeamSeasonCreateInput(PlayerTeamSeasonOptionalCreateInput):
    """Required arguments to the PlayerTeamSeason create method"""
    teamSeasonId: _str
    leagueType: 'enums.LeagueType'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PlayerTeamSeasonOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PlayerTeamSeason create method, without relations"""
    id: _str
    playerSeasonId: _str
    rosterTeamId: Optional[_str]
    trainingCampTeamId: Optional[_str]
    inactiveTeamId: Optional[_str]
    isRosterPlayer: _bool
    isTrainingCampPlayer: _bool
    isInactivePlayer: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerTeamSeasonCreateWithoutRelationsInput(PlayerTeamSeasonOptionalCreateWithoutRelationsInput):
    """Required arguments to the PlayerTeamSeason create method, without relations"""
    teamSeasonId: _str
    leagueType: 'enums.LeagueType'

class PlayerTeamSeasonConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PlayerTeamSeasonCreateWithoutRelationsInput'
    where: 'PlayerTeamSeasonWhereUniqueInput'

class PlayerTeamSeasonCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PlayerTeamSeasonCreateWithoutRelationsInput'
    connect: 'PlayerTeamSeasonWhereUniqueInput'
    connect_or_create: 'PlayerTeamSeasonConnectOrCreateWithoutRelationsInput'


class PlayerTeamSeasonCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PlayerTeamSeasonCreateWithoutRelationsInput', List['PlayerTeamSeasonCreateWithoutRelationsInput']]
    connect: Union['PlayerTeamSeasonWhereUniqueInput', List['PlayerTeamSeasonWhereUniqueInput']]
    connect_or_create: Union['PlayerTeamSeasonConnectOrCreateWithoutRelationsInput', List['PlayerTeamSeasonConnectOrCreateWithoutRelationsInput']]

_PlayerTeamSeasonWhereUnique_id_Input = TypedDict(
    '_PlayerTeamSeasonWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

PlayerTeamSeasonWhereUniqueInput = _PlayerTeamSeasonWhereUnique_id_Input


class PlayerTeamSeasonUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    teamSeasonId: _str
    leagueType: 'enums.LeagueType'
    isRosterPlayer: _bool
    isTrainingCampPlayer: _bool
    isInactivePlayer: _bool
    playerSeason: 'PlayerSeasonUpdateOneWithoutRelationsInput'
    rosterTeam: 'TeamSeasonUpdateOneWithoutRelationsInput'
    trainingCampTeam: 'TeamSeasonUpdateOneWithoutRelationsInput'
    inactiveTeam: 'TeamSeasonUpdateOneWithoutRelationsInput'
    playerMatches: 'PlayerMatchUpdateManyWithoutRelationsInput'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerTeamSeasonUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    teamSeasonId: _str
    leagueType: 'enums.LeagueType'
    isRosterPlayer: _bool
    isTrainingCampPlayer: _bool
    isInactivePlayer: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerTeamSeasonUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PlayerTeamSeasonCreateWithoutRelationsInput']
    connect: List['PlayerTeamSeasonWhereUniqueInput']
    connect_or_create: List['PlayerTeamSeasonConnectOrCreateWithoutRelationsInput']
    set: List['PlayerTeamSeasonWhereUniqueInput']
    disconnect: List['PlayerTeamSeasonWhereUniqueInput']
    delete: List['PlayerTeamSeasonWhereUniqueInput']

    # TODO
    # update: List['PlayerTeamSeasonUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PlayerTeamSeasonUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PlayerTeamSeasonScalarWhereInput']
    # upsert: List['PlayerTeamSeasonUpserteWithWhereUniqueWithoutRelationsInput']


class PlayerTeamSeasonUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PlayerTeamSeasonCreateWithoutRelationsInput'
    connect: 'PlayerTeamSeasonWhereUniqueInput'
    connect_or_create: 'PlayerTeamSeasonConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PlayerTeamSeasonUpdateInput'
    # upsert: 'PlayerTeamSeasonUpsertWithoutRelationsInput'


class PlayerTeamSeasonUpsertInput(TypedDict):
    create: 'PlayerTeamSeasonCreateInput'
    update: 'PlayerTeamSeasonUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PlayerTeamSeason_id_OrderByInput = TypedDict(
    '_PlayerTeamSeason_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_playerSeasonId_OrderByInput = TypedDict(
    '_PlayerTeamSeason_playerSeasonId_OrderByInput',
    {
        'playerSeasonId': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_teamSeasonId_OrderByInput = TypedDict(
    '_PlayerTeamSeason_teamSeasonId_OrderByInput',
    {
        'teamSeasonId': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_leagueType_OrderByInput = TypedDict(
    '_PlayerTeamSeason_leagueType_OrderByInput',
    {
        'leagueType': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_rosterTeamId_OrderByInput = TypedDict(
    '_PlayerTeamSeason_rosterTeamId_OrderByInput',
    {
        'rosterTeamId': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_trainingCampTeamId_OrderByInput = TypedDict(
    '_PlayerTeamSeason_trainingCampTeamId_OrderByInput',
    {
        'trainingCampTeamId': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_inactiveTeamId_OrderByInput = TypedDict(
    '_PlayerTeamSeason_inactiveTeamId_OrderByInput',
    {
        'inactiveTeamId': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_isRosterPlayer_OrderByInput = TypedDict(
    '_PlayerTeamSeason_isRosterPlayer_OrderByInput',
    {
        'isRosterPlayer': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_isTrainingCampPlayer_OrderByInput = TypedDict(
    '_PlayerTeamSeason_isTrainingCampPlayer_OrderByInput',
    {
        'isTrainingCampPlayer': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_isInactivePlayer_OrderByInput = TypedDict(
    '_PlayerTeamSeason_isInactivePlayer_OrderByInput',
    {
        'isInactivePlayer': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_createdAt_OrderByInput = TypedDict(
    '_PlayerTeamSeason_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_updatedAt_OrderByInput = TypedDict(
    '_PlayerTeamSeason_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_RelevanceInner = TypedDict(
    '_PlayerTeamSeason_RelevanceInner',
    {
        'fields': 'List[PlayerTeamSeasonScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_PlayerTeamSeason_RelevanceOrderByInput = TypedDict(
    '_PlayerTeamSeason_RelevanceOrderByInput',
    {
        '_relevance': '_PlayerTeamSeason_RelevanceInner',
    },
    total=True
)

PlayerTeamSeasonOrderByInput = Union[
    '_PlayerTeamSeason_id_OrderByInput',
    '_PlayerTeamSeason_playerSeasonId_OrderByInput',
    '_PlayerTeamSeason_teamSeasonId_OrderByInput',
    '_PlayerTeamSeason_leagueType_OrderByInput',
    '_PlayerTeamSeason_rosterTeamId_OrderByInput',
    '_PlayerTeamSeason_trainingCampTeamId_OrderByInput',
    '_PlayerTeamSeason_inactiveTeamId_OrderByInput',
    '_PlayerTeamSeason_isRosterPlayer_OrderByInput',
    '_PlayerTeamSeason_isTrainingCampPlayer_OrderByInput',
    '_PlayerTeamSeason_isInactivePlayer_OrderByInput',
    '_PlayerTeamSeason_createdAt_OrderByInput',
    '_PlayerTeamSeason_updatedAt_OrderByInput',
    '_PlayerTeamSeason_RelevanceOrderByInput',
]



# recursive PlayerTeamSeason types
# TODO: cleanup these types



PlayerTeamSeasonRelationFilter = TypedDict(
    'PlayerTeamSeasonRelationFilter',
    {
        'is': 'PlayerTeamSeasonWhereInput',
        'is_not': 'PlayerTeamSeasonWhereInput',
    },
    total=False,
)


class PlayerTeamSeasonListRelationFilter(TypedDict, total=False):
    some: 'PlayerTeamSeasonWhereInput'
    none: 'PlayerTeamSeasonWhereInput'
    every: 'PlayerTeamSeasonWhereInput'


class PlayerTeamSeasonInclude(TypedDict, total=False):
    """PlayerTeamSeason relational arguments"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerTeamSeason']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromPlayerTeamSeason']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromPlayerTeamSeason']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromPlayerTeamSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPlayerTeamSeason']


class ForumPostIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    author: Union[bool, 'UserArgsFromPlayerTeamSeason']
    comments: Union[bool, 'FindManyForumCommentArgsFromPlayerTeamSeason']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPlayerTeamSeason']
    followers: Union[bool, 'FindManyForumFollowerArgsFromPlayerTeamSeason']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromPlayerTeamSeason']


class ForumPostArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']
    post: Union[bool, 'ForumPostArgsFromPlayerTeamSeason']
    comment: Union[bool, 'ForumCommentArgsFromPlayerTeamSeason']


class ForumReactionArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']
    post: Union[bool, 'ForumPostArgsFromPlayerTeamSeason']


class ForumFollowerArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']
    post: Union[bool, 'ForumPostArgsFromPlayerTeamSeason']


class ForumPostSubscriptionArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    author: Union[bool, 'UserArgsFromPlayerTeamSeason']
    post: Union[bool, 'ForumPostArgsFromPlayerTeamSeason']
    quotedComment: Union[bool, 'ForumCommentArgsFromPlayerTeamSeason']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromPlayerTeamSeason']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPlayerTeamSeason']


class ForumCommentArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    parentLeague: Union[bool, 'LeagueArgsFromPlayerTeamSeason']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromPlayerTeamSeason']
    conferences: Union[bool, 'FindManyConferenceArgsFromPlayerTeamSeason']
    divisions: Union[bool, 'FindManyDivisionArgsFromPlayerTeamSeason']
    teams: Union[bool, 'FindManyTeamArgsFromPlayerTeamSeason']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromPlayerTeamSeason']


class LeagueArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    league: Union[bool, 'LeagueArgsFromPlayerTeamSeason']
    season: Union[bool, 'SeasonArgsFromPlayerTeamSeason']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPlayerTeamSeason']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromPlayerTeamSeason']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromPlayerTeamSeason']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPlayerTeamSeason']


class LeagueSeasonArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    league: Union[bool, 'LeagueArgsFromPlayerTeamSeason']
    divisions: Union[bool, 'FindManyDivisionArgsFromPlayerTeamSeason']


class ConferenceArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    conference: Union[bool, 'ConferenceArgsFromPlayerTeamSeason']
    league: Union[bool, 'LeagueArgsFromPlayerTeamSeason']
    teams: Union[bool, 'FindManyTeamArgsFromPlayerTeamSeason']


class DivisionArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromPlayerTeamSeason']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerTeamSeason']


class SeasonArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerTeamSeason']


class LeagueCommissionerArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerTeamSeason']


class LeagueBOGArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerTeamSeason']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromPlayerTeamSeason']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromPlayerTeamSeason']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromPlayerTeamSeason']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromPlayerTeamSeason']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerTeamSeason']


class MatchArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPlayerTeamSeason']
    match: Union[bool, 'MatchArgsFromPlayerTeamSeason']


class ClubMatchStatsArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    customKit: Union[bool, 'CustomKitArgsFromPlayerTeamSeason']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromPlayerTeamSeason']


class ClubMatchStatsDetailsArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPlayerTeamSeason']


class CustomKitArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    match: Union[bool, 'MatchArgsFromPlayerTeamSeason']


class ClubAggregateMatchStatsArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    match: Union[bool, 'MatchArgsFromPlayerTeamSeason']


class MatchAnalyticsArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    match: Union[bool, 'MatchArgsFromPlayerTeamSeason']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromPlayerTeamSeason']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerTeamSeason']


class PlayerMatchArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']
    season: Union[bool, 'SeasonArgsFromPlayerTeamSeason']
    contract: Union[bool, 'ContractArgsFromPlayerTeamSeason']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerTeamSeason']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPlayerTeamSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPlayerTeamSeason']
    matches: Union[bool, 'FindManyMatchArgsFromPlayerTeamSeason']


class PlayerSeasonArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerTeamSeason']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromPlayerTeamSeason']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromPlayerTeamSeason']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromPlayerTeamSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPlayerTeamSeason']


class PlayerTeamSeasonArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerTeamSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerTeamSeason']


class PlayerLeagueHistoryArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromPlayerTeamSeason']
    trophySummary: Union[bool, 'PSNTrophyArgsFromPlayerTeamSeason']
    games: Union[bool, 'FindManyPSNGameArgsFromPlayerTeamSeason']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromPlayerTeamSeason']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromPlayerTeamSeason']


class PSNProfileArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerTeamSeason']


class PSNAvatarArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerTeamSeason']


class PSNTrophyArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerTeamSeason']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromPlayerTeamSeason']


class PSNGameArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerTeamSeason']


class PSNSyncLogArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerTeamSeason']
    game: Union[bool, 'PSNGameArgsFromPlayerTeamSeason']


class PSNGameTrophiesArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    league: Union[bool, 'LeagueArgsFromPlayerTeamSeason']
    division: Union[bool, 'DivisionArgsFromPlayerTeamSeason']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromPlayerTeamSeason']
    nhlAffiliate: Union[bool, 'TeamArgsFromPlayerTeamSeason']
    ahlAffiliate: Union[bool, 'TeamArgsFromPlayerTeamSeason']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromPlayerTeamSeason']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromPlayerTeamSeason']


class TeamArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    team: Union[bool, 'TeamArgsFromPlayerTeamSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerTeamSeason']
    matches: Union[bool, 'FindManyMatchArgsFromPlayerTeamSeason']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerTeamSeason']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerTeamSeason']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerTeamSeason']
    bids: Union[bool, 'FindManyBidArgsFromPlayerTeamSeason']
    managers: Union[bool, 'FindManyTeamManagerArgsFromPlayerTeamSeason']


class TeamSeasonArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerTeamSeason']


class TeamManagerArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    contract: Union[bool, 'ContractArgsFromPlayerTeamSeason']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerTeamSeason']


class BidArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerTeamSeason']
    bids: Union[bool, 'FindManyBidArgsFromPlayerTeamSeason']


class ContractArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    notifications: Union[bool, 'FindManyNotificationArgsFromPlayerTeamSeason']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromPlayerTeamSeason']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromPlayerTeamSeason']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromPlayerTeamSeason']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromPlayerTeamSeason']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromPlayerTeamSeason']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromPlayerTeamSeason']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromPlayerTeamSeason']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromPlayerTeamSeason']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPlayerTeamSeason']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromPlayerTeamSeason']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerTeamSeason']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromPlayerTeamSeason']
    psnProfile: Union[bool, 'PSNProfileArgsFromPlayerTeamSeason']


class UserArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']


class EaIdHistoryArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']


class SystemHistoryArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']


class GamertagHistoryArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromPlayerTeamSeason(TypedDict, total=False):
    """Relational arguments for PlayerTeamSeason"""
    user: Union[bool, 'UserArgsFromPlayerTeamSeason']


class NotificationArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromPlayerTeamSeason(TypedDict, total=False):
    """Arguments for PlayerTeamSeason"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyPlayerTeamSeasonArgs = FindManyPlayerTeamSeasonArgsFromPlayerTeamSeason
FindFirstPlayerTeamSeasonArgs = FindManyPlayerTeamSeasonArgsFromPlayerTeamSeason


class PlayerTeamSeasonWhereInput(TypedDict, total=False):
    """PlayerTeamSeason arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    playerSeasonId: Union[_str, 'types.StringFilter']
    teamSeasonId: Union[_str, 'types.StringFilter']
    leagueType: 'enums.LeagueType'
    rosterTeamId: Union[None, _str, 'types.StringFilter']
    trainingCampTeamId: Union[None, _str, 'types.StringFilter']
    inactiveTeamId: Union[None, _str, 'types.StringFilter']
    isRosterPlayer: Union[_bool, 'types.BooleanFilter']
    isTrainingCampPlayer: Union[_bool, 'types.BooleanFilter']
    isInactivePlayer: Union[_bool, 'types.BooleanFilter']
    playerSeason: 'PlayerSeasonRelationFilter'
    rosterTeam: 'TeamSeasonRelationFilter'
    trainingCampTeam: 'TeamSeasonRelationFilter'
    inactiveTeam: 'TeamSeasonRelationFilter'
    playerMatches: 'PlayerMatchListRelationFilter'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['PlayerTeamSeasonWhereInput', List['PlayerTeamSeasonWhereInput']]
    # but this causes mypy to hang :/
    AND: List['PlayerTeamSeasonWhereInput']
    OR: List['PlayerTeamSeasonWhereInput']
    NOT: List['PlayerTeamSeasonWhereInput']



# aggregate PlayerTeamSeason types


class PlayerTeamSeasonScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PlayerTeamSeason arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    playerSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    teamSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    leagueType: 'enums.LeagueType'
    rosterTeamId: Union[_str, 'types.StringWithAggregatesFilter']
    trainingCampTeamId: Union[_str, 'types.StringWithAggregatesFilter']
    inactiveTeamId: Union[_str, 'types.StringWithAggregatesFilter']
    isRosterPlayer: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isTrainingCampPlayer: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isInactivePlayer: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PlayerTeamSeasonScalarWhereWithAggregatesInput']
    OR: List['PlayerTeamSeasonScalarWhereWithAggregatesInput']
    NOT: List['PlayerTeamSeasonScalarWhereWithAggregatesInput']



class PlayerTeamSeasonGroupByOutput(TypedDict, total=False):
    id: _str
    playerSeasonId: _str
    teamSeasonId: _str
    leagueType: 'enums.LeagueType'
    rosterTeamId: _str
    trainingCampTeamId: _str
    inactiveTeamId: _str
    isRosterPlayer: _bool
    isTrainingCampPlayer: _bool
    isInactivePlayer: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PlayerTeamSeasonSumAggregateOutput'
    _avg: 'PlayerTeamSeasonAvgAggregateOutput'
    _min: 'PlayerTeamSeasonMinAggregateOutput'
    _max: 'PlayerTeamSeasonMaxAggregateOutput'
    _count: 'PlayerTeamSeasonCountAggregateOutput'


class PlayerTeamSeasonAvgAggregateOutput(TypedDict, total=False):
    """PlayerTeamSeason output for aggregating averages"""


class PlayerTeamSeasonSumAggregateOutput(TypedDict, total=False):
    """PlayerTeamSeason output for aggregating sums"""


class PlayerTeamSeasonScalarAggregateOutput(TypedDict, total=False):
    """PlayerTeamSeason output including scalar fields"""
    id: _str
    playerSeasonId: _str
    teamSeasonId: _str
    leagueType: 'enums.LeagueType'
    rosterTeamId: _str
    trainingCampTeamId: _str
    inactiveTeamId: _str
    isRosterPlayer: _bool
    isTrainingCampPlayer: _bool
    isInactivePlayer: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PlayerTeamSeasonMinAggregateOutput = PlayerTeamSeasonScalarAggregateOutput
PlayerTeamSeasonMaxAggregateOutput = PlayerTeamSeasonScalarAggregateOutput


class PlayerTeamSeasonMaxAggregateInput(TypedDict, total=False):
    """PlayerTeamSeason input for aggregating by max"""
    id: bool
    playerSeasonId: bool
    teamSeasonId: bool
    leagueType: bool
    rosterTeamId: bool
    trainingCampTeamId: bool
    inactiveTeamId: bool
    isRosterPlayer: bool
    isTrainingCampPlayer: bool
    isInactivePlayer: bool
    createdAt: bool
    updatedAt: bool


class PlayerTeamSeasonMinAggregateInput(TypedDict, total=False):
    """PlayerTeamSeason input for aggregating by min"""
    id: bool
    playerSeasonId: bool
    teamSeasonId: bool
    leagueType: bool
    rosterTeamId: bool
    trainingCampTeamId: bool
    inactiveTeamId: bool
    isRosterPlayer: bool
    isTrainingCampPlayer: bool
    isInactivePlayer: bool
    createdAt: bool
    updatedAt: bool


class PlayerTeamSeasonNumberAggregateInput(TypedDict, total=False):
    """PlayerTeamSeason input for aggregating numbers"""


PlayerTeamSeasonAvgAggregateInput = PlayerTeamSeasonNumberAggregateInput
PlayerTeamSeasonSumAggregateInput = PlayerTeamSeasonNumberAggregateInput


PlayerTeamSeasonCountAggregateInput = TypedDict(
    'PlayerTeamSeasonCountAggregateInput',
    {
        'id': bool,
        'playerSeasonId': bool,
        'teamSeasonId': bool,
        'leagueType': bool,
        'rosterTeamId': bool,
        'trainingCampTeamId': bool,
        'inactiveTeamId': bool,
        'isRosterPlayer': bool,
        'isTrainingCampPlayer': bool,
        'isInactivePlayer': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PlayerTeamSeasonCountAggregateOutput = TypedDict(
    'PlayerTeamSeasonCountAggregateOutput',
    {
        'id': int,
        'playerSeasonId': int,
        'teamSeasonId': int,
        'leagueType': int,
        'rosterTeamId': int,
        'trainingCampTeamId': int,
        'inactiveTeamId': int,
        'isRosterPlayer': int,
        'isTrainingCampPlayer': int,
        'isInactivePlayer': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PlayerTeamSeasonKeys = Literal[
    'id',
    'playerSeasonId',
    'teamSeasonId',
    'leagueType',
    'rosterTeamId',
    'trainingCampTeamId',
    'inactiveTeamId',
    'isRosterPlayer',
    'isTrainingCampPlayer',
    'isInactivePlayer',
    'playerSeason',
    'rosterTeam',
    'trainingCampTeam',
    'inactiveTeam',
    'playerMatches',
    'createdAt',
    'updatedAt',
]
PlayerTeamSeasonScalarFieldKeys = Literal[
    'id',
    'playerSeasonId',
    'teamSeasonId',
    'leagueType',
    'rosterTeamId',
    'trainingCampTeamId',
    'inactiveTeamId',
    'isRosterPlayer',
    'isTrainingCampPlayer',
    'isInactivePlayer',
    'createdAt',
    'updatedAt',
]
PlayerTeamSeasonScalarFieldKeysT = TypeVar('PlayerTeamSeasonScalarFieldKeysT', bound=PlayerTeamSeasonScalarFieldKeys)

PlayerTeamSeasonRelationalFieldKeys = Literal[
        'playerSeason',
        'rosterTeam',
        'trainingCampTeam',
        'inactiveTeam',
        'playerMatches',
    ]

# PlayerLeagueHistory types

class PlayerLeagueHistoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PlayerLeagueHistory create method"""
    id: _str
    playerSeasonId: _str
    leagueSeasonId: _str
    startDate: datetime.datetime
    endDate: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    playerSeason: 'PlayerSeasonCreateNestedWithoutRelationsInput'
    leagueSeason: 'LeagueSeasonCreateNestedWithoutRelationsInput'


class PlayerLeagueHistoryCreateInput(PlayerLeagueHistoryOptionalCreateInput):
    """Required arguments to the PlayerLeagueHistory create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PlayerLeagueHistoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PlayerLeagueHistory create method, without relations"""
    id: _str
    playerSeasonId: _str
    leagueSeasonId: _str
    startDate: datetime.datetime
    endDate: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerLeagueHistoryCreateWithoutRelationsInput(PlayerLeagueHistoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the PlayerLeagueHistory create method, without relations"""

class PlayerLeagueHistoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PlayerLeagueHistoryCreateWithoutRelationsInput'
    where: 'PlayerLeagueHistoryWhereUniqueInput'

class PlayerLeagueHistoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PlayerLeagueHistoryCreateWithoutRelationsInput'
    connect: 'PlayerLeagueHistoryWhereUniqueInput'
    connect_or_create: 'PlayerLeagueHistoryConnectOrCreateWithoutRelationsInput'


class PlayerLeagueHistoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PlayerLeagueHistoryCreateWithoutRelationsInput', List['PlayerLeagueHistoryCreateWithoutRelationsInput']]
    connect: Union['PlayerLeagueHistoryWhereUniqueInput', List['PlayerLeagueHistoryWhereUniqueInput']]
    connect_or_create: Union['PlayerLeagueHistoryConnectOrCreateWithoutRelationsInput', List['PlayerLeagueHistoryConnectOrCreateWithoutRelationsInput']]

_PlayerLeagueHistoryWhereUnique_id_Input = TypedDict(
    '_PlayerLeagueHistoryWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

PlayerLeagueHistoryWhereUniqueInput = _PlayerLeagueHistoryWhereUnique_id_Input


class PlayerLeagueHistoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    startDate: datetime.datetime
    endDate: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    playerSeason: 'PlayerSeasonUpdateOneWithoutRelationsInput'
    leagueSeason: 'LeagueSeasonUpdateOneWithoutRelationsInput'


class PlayerLeagueHistoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    startDate: datetime.datetime
    endDate: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PlayerLeagueHistoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PlayerLeagueHistoryCreateWithoutRelationsInput']
    connect: List['PlayerLeagueHistoryWhereUniqueInput']
    connect_or_create: List['PlayerLeagueHistoryConnectOrCreateWithoutRelationsInput']
    set: List['PlayerLeagueHistoryWhereUniqueInput']
    disconnect: List['PlayerLeagueHistoryWhereUniqueInput']
    delete: List['PlayerLeagueHistoryWhereUniqueInput']

    # TODO
    # update: List['PlayerLeagueHistoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PlayerLeagueHistoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PlayerLeagueHistoryScalarWhereInput']
    # upsert: List['PlayerLeagueHistoryUpserteWithWhereUniqueWithoutRelationsInput']


class PlayerLeagueHistoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PlayerLeagueHistoryCreateWithoutRelationsInput'
    connect: 'PlayerLeagueHistoryWhereUniqueInput'
    connect_or_create: 'PlayerLeagueHistoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PlayerLeagueHistoryUpdateInput'
    # upsert: 'PlayerLeagueHistoryUpsertWithoutRelationsInput'


class PlayerLeagueHistoryUpsertInput(TypedDict):
    create: 'PlayerLeagueHistoryCreateInput'
    update: 'PlayerLeagueHistoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PlayerLeagueHistory_id_OrderByInput = TypedDict(
    '_PlayerLeagueHistory_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PlayerLeagueHistory_playerSeasonId_OrderByInput = TypedDict(
    '_PlayerLeagueHistory_playerSeasonId_OrderByInput',
    {
        'playerSeasonId': 'SortOrder',
    },
    total=True
)

_PlayerLeagueHistory_leagueSeasonId_OrderByInput = TypedDict(
    '_PlayerLeagueHistory_leagueSeasonId_OrderByInput',
    {
        'leagueSeasonId': 'SortOrder',
    },
    total=True
)

_PlayerLeagueHistory_startDate_OrderByInput = TypedDict(
    '_PlayerLeagueHistory_startDate_OrderByInput',
    {
        'startDate': 'SortOrder',
    },
    total=True
)

_PlayerLeagueHistory_endDate_OrderByInput = TypedDict(
    '_PlayerLeagueHistory_endDate_OrderByInput',
    {
        'endDate': 'SortOrder',
    },
    total=True
)

_PlayerLeagueHistory_createdAt_OrderByInput = TypedDict(
    '_PlayerLeagueHistory_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_PlayerLeagueHistory_updatedAt_OrderByInput = TypedDict(
    '_PlayerLeagueHistory_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_PlayerLeagueHistory_RelevanceInner = TypedDict(
    '_PlayerLeagueHistory_RelevanceInner',
    {
        'fields': 'List[PlayerLeagueHistoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_PlayerLeagueHistory_RelevanceOrderByInput = TypedDict(
    '_PlayerLeagueHistory_RelevanceOrderByInput',
    {
        '_relevance': '_PlayerLeagueHistory_RelevanceInner',
    },
    total=True
)

PlayerLeagueHistoryOrderByInput = Union[
    '_PlayerLeagueHistory_id_OrderByInput',
    '_PlayerLeagueHistory_playerSeasonId_OrderByInput',
    '_PlayerLeagueHistory_leagueSeasonId_OrderByInput',
    '_PlayerLeagueHistory_startDate_OrderByInput',
    '_PlayerLeagueHistory_endDate_OrderByInput',
    '_PlayerLeagueHistory_createdAt_OrderByInput',
    '_PlayerLeagueHistory_updatedAt_OrderByInput',
    '_PlayerLeagueHistory_RelevanceOrderByInput',
]



# recursive PlayerLeagueHistory types
# TODO: cleanup these types



PlayerLeagueHistoryRelationFilter = TypedDict(
    'PlayerLeagueHistoryRelationFilter',
    {
        'is': 'PlayerLeagueHistoryWhereInput',
        'is_not': 'PlayerLeagueHistoryWhereInput',
    },
    total=False,
)


class PlayerLeagueHistoryListRelationFilter(TypedDict, total=False):
    some: 'PlayerLeagueHistoryWhereInput'
    none: 'PlayerLeagueHistoryWhereInput'
    every: 'PlayerLeagueHistoryWhereInput'


class PlayerLeagueHistoryInclude(TypedDict, total=False):
    """PlayerLeagueHistory relational arguments"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerLeagueHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerLeagueHistory']


class ForumPostIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    author: Union[bool, 'UserArgsFromPlayerLeagueHistory']
    comments: Union[bool, 'FindManyForumCommentArgsFromPlayerLeagueHistory']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPlayerLeagueHistory']
    followers: Union[bool, 'FindManyForumFollowerArgsFromPlayerLeagueHistory']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromPlayerLeagueHistory']


class ForumPostArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']
    post: Union[bool, 'ForumPostArgsFromPlayerLeagueHistory']
    comment: Union[bool, 'ForumCommentArgsFromPlayerLeagueHistory']


class ForumReactionArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']
    post: Union[bool, 'ForumPostArgsFromPlayerLeagueHistory']


class ForumFollowerArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']
    post: Union[bool, 'ForumPostArgsFromPlayerLeagueHistory']


class ForumPostSubscriptionArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    author: Union[bool, 'UserArgsFromPlayerLeagueHistory']
    post: Union[bool, 'ForumPostArgsFromPlayerLeagueHistory']
    quotedComment: Union[bool, 'ForumCommentArgsFromPlayerLeagueHistory']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromPlayerLeagueHistory']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPlayerLeagueHistory']


class ForumCommentArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    parentLeague: Union[bool, 'LeagueArgsFromPlayerLeagueHistory']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromPlayerLeagueHistory']
    conferences: Union[bool, 'FindManyConferenceArgsFromPlayerLeagueHistory']
    divisions: Union[bool, 'FindManyDivisionArgsFromPlayerLeagueHistory']
    teams: Union[bool, 'FindManyTeamArgsFromPlayerLeagueHistory']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromPlayerLeagueHistory']


class LeagueArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    league: Union[bool, 'LeagueArgsFromPlayerLeagueHistory']
    season: Union[bool, 'SeasonArgsFromPlayerLeagueHistory']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPlayerLeagueHistory']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromPlayerLeagueHistory']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromPlayerLeagueHistory']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPlayerLeagueHistory']


class LeagueSeasonArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    league: Union[bool, 'LeagueArgsFromPlayerLeagueHistory']
    divisions: Union[bool, 'FindManyDivisionArgsFromPlayerLeagueHistory']


class ConferenceArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    conference: Union[bool, 'ConferenceArgsFromPlayerLeagueHistory']
    league: Union[bool, 'LeagueArgsFromPlayerLeagueHistory']
    teams: Union[bool, 'FindManyTeamArgsFromPlayerLeagueHistory']


class DivisionArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromPlayerLeagueHistory']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerLeagueHistory']


class SeasonArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerLeagueHistory']


class LeagueCommissionerArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerLeagueHistory']


class LeagueBOGArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerLeagueHistory']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromPlayerLeagueHistory']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromPlayerLeagueHistory']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromPlayerLeagueHistory']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromPlayerLeagueHistory']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerLeagueHistory']


class MatchArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPlayerLeagueHistory']
    match: Union[bool, 'MatchArgsFromPlayerLeagueHistory']


class ClubMatchStatsArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    customKit: Union[bool, 'CustomKitArgsFromPlayerLeagueHistory']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromPlayerLeagueHistory']


class ClubMatchStatsDetailsArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPlayerLeagueHistory']


class CustomKitArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    match: Union[bool, 'MatchArgsFromPlayerLeagueHistory']


class ClubAggregateMatchStatsArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    match: Union[bool, 'MatchArgsFromPlayerLeagueHistory']


class MatchAnalyticsArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    match: Union[bool, 'MatchArgsFromPlayerLeagueHistory']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromPlayerLeagueHistory']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerLeagueHistory']


class PlayerMatchArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']
    season: Union[bool, 'SeasonArgsFromPlayerLeagueHistory']
    contract: Union[bool, 'ContractArgsFromPlayerLeagueHistory']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerLeagueHistory']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPlayerLeagueHistory']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPlayerLeagueHistory']
    matches: Union[bool, 'FindManyMatchArgsFromPlayerLeagueHistory']


class PlayerSeasonArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerLeagueHistory']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromPlayerLeagueHistory']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromPlayerLeagueHistory']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromPlayerLeagueHistory']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPlayerLeagueHistory']


class PlayerTeamSeasonArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerLeagueHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerLeagueHistory']


class PlayerLeagueHistoryArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromPlayerLeagueHistory']
    trophySummary: Union[bool, 'PSNTrophyArgsFromPlayerLeagueHistory']
    games: Union[bool, 'FindManyPSNGameArgsFromPlayerLeagueHistory']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromPlayerLeagueHistory']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromPlayerLeagueHistory']


class PSNProfileArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerLeagueHistory']


class PSNAvatarArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerLeagueHistory']


class PSNTrophyArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerLeagueHistory']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromPlayerLeagueHistory']


class PSNGameArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerLeagueHistory']


class PSNSyncLogArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    profile: Union[bool, 'PSNProfileArgsFromPlayerLeagueHistory']
    game: Union[bool, 'PSNGameArgsFromPlayerLeagueHistory']


class PSNGameTrophiesArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    league: Union[bool, 'LeagueArgsFromPlayerLeagueHistory']
    division: Union[bool, 'DivisionArgsFromPlayerLeagueHistory']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromPlayerLeagueHistory']
    nhlAffiliate: Union[bool, 'TeamArgsFromPlayerLeagueHistory']
    ahlAffiliate: Union[bool, 'TeamArgsFromPlayerLeagueHistory']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromPlayerLeagueHistory']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromPlayerLeagueHistory']


class TeamArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    team: Union[bool, 'TeamArgsFromPlayerLeagueHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPlayerLeagueHistory']
    matches: Union[bool, 'FindManyMatchArgsFromPlayerLeagueHistory']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerLeagueHistory']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerLeagueHistory']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPlayerLeagueHistory']
    bids: Union[bool, 'FindManyBidArgsFromPlayerLeagueHistory']
    managers: Union[bool, 'FindManyTeamManagerArgsFromPlayerLeagueHistory']


class TeamSeasonArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerLeagueHistory']


class TeamManagerArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    contract: Union[bool, 'ContractArgsFromPlayerLeagueHistory']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPlayerLeagueHistory']


class BidArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPlayerLeagueHistory']
    bids: Union[bool, 'FindManyBidArgsFromPlayerLeagueHistory']


class ContractArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    notifications: Union[bool, 'FindManyNotificationArgsFromPlayerLeagueHistory']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromPlayerLeagueHistory']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromPlayerLeagueHistory']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromPlayerLeagueHistory']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromPlayerLeagueHistory']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromPlayerLeagueHistory']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromPlayerLeagueHistory']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromPlayerLeagueHistory']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromPlayerLeagueHistory']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPlayerLeagueHistory']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromPlayerLeagueHistory']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPlayerLeagueHistory']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromPlayerLeagueHistory']
    psnProfile: Union[bool, 'PSNProfileArgsFromPlayerLeagueHistory']


class UserArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']


class EaIdHistoryArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']


class SystemHistoryArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']


class GamertagHistoryArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromPlayerLeagueHistory(TypedDict, total=False):
    """Relational arguments for PlayerLeagueHistory"""
    user: Union[bool, 'UserArgsFromPlayerLeagueHistory']


class NotificationArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromPlayerLeagueHistory(TypedDict, total=False):
    """Arguments for PlayerLeagueHistory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyPlayerLeagueHistoryArgs = FindManyPlayerLeagueHistoryArgsFromPlayerLeagueHistory
FindFirstPlayerLeagueHistoryArgs = FindManyPlayerLeagueHistoryArgsFromPlayerLeagueHistory


class PlayerLeagueHistoryWhereInput(TypedDict, total=False):
    """PlayerLeagueHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    playerSeasonId: Union[_str, 'types.StringFilter']
    leagueSeasonId: Union[_str, 'types.StringFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeFilter']
    endDate: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    playerSeason: 'PlayerSeasonRelationFilter'
    leagueSeason: 'LeagueSeasonRelationFilter'

    # should be noted that AND and NOT should be Union['PlayerLeagueHistoryWhereInput', List['PlayerLeagueHistoryWhereInput']]
    # but this causes mypy to hang :/
    AND: List['PlayerLeagueHistoryWhereInput']
    OR: List['PlayerLeagueHistoryWhereInput']
    NOT: List['PlayerLeagueHistoryWhereInput']



# aggregate PlayerLeagueHistory types


class PlayerLeagueHistoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PlayerLeagueHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    playerSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    leagueSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    startDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    endDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PlayerLeagueHistoryScalarWhereWithAggregatesInput']
    OR: List['PlayerLeagueHistoryScalarWhereWithAggregatesInput']
    NOT: List['PlayerLeagueHistoryScalarWhereWithAggregatesInput']



class PlayerLeagueHistoryGroupByOutput(TypedDict, total=False):
    id: _str
    playerSeasonId: _str
    leagueSeasonId: _str
    startDate: datetime.datetime
    endDate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PlayerLeagueHistorySumAggregateOutput'
    _avg: 'PlayerLeagueHistoryAvgAggregateOutput'
    _min: 'PlayerLeagueHistoryMinAggregateOutput'
    _max: 'PlayerLeagueHistoryMaxAggregateOutput'
    _count: 'PlayerLeagueHistoryCountAggregateOutput'


class PlayerLeagueHistoryAvgAggregateOutput(TypedDict, total=False):
    """PlayerLeagueHistory output for aggregating averages"""


class PlayerLeagueHistorySumAggregateOutput(TypedDict, total=False):
    """PlayerLeagueHistory output for aggregating sums"""


class PlayerLeagueHistoryScalarAggregateOutput(TypedDict, total=False):
    """PlayerLeagueHistory output including scalar fields"""
    id: _str
    playerSeasonId: _str
    leagueSeasonId: _str
    startDate: datetime.datetime
    endDate: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PlayerLeagueHistoryMinAggregateOutput = PlayerLeagueHistoryScalarAggregateOutput
PlayerLeagueHistoryMaxAggregateOutput = PlayerLeagueHistoryScalarAggregateOutput


class PlayerLeagueHistoryMaxAggregateInput(TypedDict, total=False):
    """PlayerLeagueHistory input for aggregating by max"""
    id: bool
    playerSeasonId: bool
    leagueSeasonId: bool
    startDate: bool
    endDate: bool
    createdAt: bool
    updatedAt: bool


class PlayerLeagueHistoryMinAggregateInput(TypedDict, total=False):
    """PlayerLeagueHistory input for aggregating by min"""
    id: bool
    playerSeasonId: bool
    leagueSeasonId: bool
    startDate: bool
    endDate: bool
    createdAt: bool
    updatedAt: bool


class PlayerLeagueHistoryNumberAggregateInput(TypedDict, total=False):
    """PlayerLeagueHistory input for aggregating numbers"""


PlayerLeagueHistoryAvgAggregateInput = PlayerLeagueHistoryNumberAggregateInput
PlayerLeagueHistorySumAggregateInput = PlayerLeagueHistoryNumberAggregateInput


PlayerLeagueHistoryCountAggregateInput = TypedDict(
    'PlayerLeagueHistoryCountAggregateInput',
    {
        'id': bool,
        'playerSeasonId': bool,
        'leagueSeasonId': bool,
        'startDate': bool,
        'endDate': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PlayerLeagueHistoryCountAggregateOutput = TypedDict(
    'PlayerLeagueHistoryCountAggregateOutput',
    {
        'id': int,
        'playerSeasonId': int,
        'leagueSeasonId': int,
        'startDate': int,
        'endDate': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PlayerLeagueHistoryKeys = Literal[
    'id',
    'playerSeasonId',
    'leagueSeasonId',
    'startDate',
    'endDate',
    'createdAt',
    'updatedAt',
    'playerSeason',
    'leagueSeason',
]
PlayerLeagueHistoryScalarFieldKeys = Literal[
    'id',
    'playerSeasonId',
    'leagueSeasonId',
    'startDate',
    'endDate',
    'createdAt',
    'updatedAt',
]
PlayerLeagueHistoryScalarFieldKeysT = TypeVar('PlayerLeagueHistoryScalarFieldKeysT', bound=PlayerLeagueHistoryScalarFieldKeys)

PlayerLeagueHistoryRelationalFieldKeys = Literal[
        'playerSeason',
        'leagueSeason',
    ]

# PSNProfile types

class PSNProfileOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PSNProfile create method"""
    id: _str
    userId: _str
    accountId: Optional[_str]
    aboutMe: Optional[_str]
    languages: List[_str]
    isPlus: Optional[_bool]
    isOfficiallyVerified: Optional[_bool]
    friendsCount: Optional[_int]
    mutualFriendsCount: Optional[_int]
    friendRelation: Optional[_str]
    isBlocking: Optional[_bool]
    onlineStatus: Optional[_str]
    platform: Optional[_str]
    lastOnline: Optional[datetime.datetime]
    availability: Optional[_str]
    lastProfileSync: Optional[datetime.datetime]
    lastTrophySync: Optional[datetime.datetime]
    lastGameSync: Optional[datetime.datetime]
    syncEnabled: _bool
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    avatars: 'PSNAvatarCreateManyNestedWithoutRelationsInput'
    trophySummary: 'PSNTrophyCreateNestedWithoutRelationsInput'
    games: 'PSNGameCreateManyNestedWithoutRelationsInput'
    syncLogs: 'PSNSyncLogCreateManyNestedWithoutRelationsInput'
    gameTrophies: 'PSNGameTrophiesCreateManyNestedWithoutRelationsInput'


class PSNProfileCreateInput(PSNProfileOptionalCreateInput):
    """Required arguments to the PSNProfile create method"""
    onlineId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PSNProfileOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PSNProfile create method, without relations"""
    id: _str
    userId: _str
    accountId: Optional[_str]
    aboutMe: Optional[_str]
    languages: List[_str]
    isPlus: Optional[_bool]
    isOfficiallyVerified: Optional[_bool]
    friendsCount: Optional[_int]
    mutualFriendsCount: Optional[_int]
    friendRelation: Optional[_str]
    isBlocking: Optional[_bool]
    onlineStatus: Optional[_str]
    platform: Optional[_str]
    lastOnline: Optional[datetime.datetime]
    availability: Optional[_str]
    lastProfileSync: Optional[datetime.datetime]
    lastTrophySync: Optional[datetime.datetime]
    lastGameSync: Optional[datetime.datetime]
    syncEnabled: _bool
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PSNProfileCreateWithoutRelationsInput(PSNProfileOptionalCreateWithoutRelationsInput):
    """Required arguments to the PSNProfile create method, without relations"""
    onlineId: _str

class PSNProfileConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PSNProfileCreateWithoutRelationsInput'
    where: 'PSNProfileWhereUniqueInput'

class PSNProfileCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNProfileCreateWithoutRelationsInput'
    connect: 'PSNProfileWhereUniqueInput'
    connect_or_create: 'PSNProfileConnectOrCreateWithoutRelationsInput'


class PSNProfileCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PSNProfileCreateWithoutRelationsInput', List['PSNProfileCreateWithoutRelationsInput']]
    connect: Union['PSNProfileWhereUniqueInput', List['PSNProfileWhereUniqueInput']]
    connect_or_create: Union['PSNProfileConnectOrCreateWithoutRelationsInput', List['PSNProfileConnectOrCreateWithoutRelationsInput']]

_PSNProfileWhereUnique_id_Input = TypedDict(
    '_PSNProfileWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PSNProfileWhereUnique_userId_Input = TypedDict(
    '_PSNProfileWhereUnique_userId_Input',
    {
        'userId': '_str',
    },
    total=True
)

_PSNProfileWhereUnique_onlineId_Input = TypedDict(
    '_PSNProfileWhereUnique_onlineId_Input',
    {
        'onlineId': '_str',
    },
    total=True
)

PSNProfileWhereUniqueInput = Union[
    '_PSNProfileWhereUnique_id_Input',
    '_PSNProfileWhereUnique_userId_Input',
    '_PSNProfileWhereUnique_onlineId_Input',
]


class PSNProfileUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    onlineId: _str
    accountId: Optional[_str]
    aboutMe: Optional[_str]
    languages: 'types.StringListUpdate'
    isPlus: Optional[_bool]
    isOfficiallyVerified: Optional[_bool]
    friendsCount: Optional[Union[AtomicIntInput, _int]]
    mutualFriendsCount: Optional[Union[AtomicIntInput, _int]]
    friendRelation: Optional[_str]
    isBlocking: Optional[_bool]
    onlineStatus: Optional[_str]
    platform: Optional[_str]
    lastOnline: Optional[datetime.datetime]
    availability: Optional[_str]
    lastProfileSync: Optional[datetime.datetime]
    lastTrophySync: Optional[datetime.datetime]
    lastGameSync: Optional[datetime.datetime]
    syncEnabled: _bool
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    avatars: 'PSNAvatarUpdateManyWithoutRelationsInput'
    trophySummary: 'PSNTrophyUpdateOneWithoutRelationsInput'
    games: 'PSNGameUpdateManyWithoutRelationsInput'
    syncLogs: 'PSNSyncLogUpdateManyWithoutRelationsInput'
    gameTrophies: 'PSNGameTrophiesUpdateManyWithoutRelationsInput'


class PSNProfileUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    onlineId: _str
    accountId: Optional[_str]
    aboutMe: Optional[_str]
    languages: 'types.StringListUpdate'
    isPlus: Optional[_bool]
    isOfficiallyVerified: Optional[_bool]
    friendsCount: Optional[Union[AtomicIntInput, _int]]
    mutualFriendsCount: Optional[Union[AtomicIntInput, _int]]
    friendRelation: Optional[_str]
    isBlocking: Optional[_bool]
    onlineStatus: Optional[_str]
    platform: Optional[_str]
    lastOnline: Optional[datetime.datetime]
    availability: Optional[_str]
    lastProfileSync: Optional[datetime.datetime]
    lastTrophySync: Optional[datetime.datetime]
    lastGameSync: Optional[datetime.datetime]
    syncEnabled: _bool
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PSNProfileUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PSNProfileCreateWithoutRelationsInput']
    connect: List['PSNProfileWhereUniqueInput']
    connect_or_create: List['PSNProfileConnectOrCreateWithoutRelationsInput']
    set: List['PSNProfileWhereUniqueInput']
    disconnect: List['PSNProfileWhereUniqueInput']
    delete: List['PSNProfileWhereUniqueInput']

    # TODO
    # update: List['PSNProfileUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PSNProfileUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PSNProfileScalarWhereInput']
    # upsert: List['PSNProfileUpserteWithWhereUniqueWithoutRelationsInput']


class PSNProfileUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNProfileCreateWithoutRelationsInput'
    connect: 'PSNProfileWhereUniqueInput'
    connect_or_create: 'PSNProfileConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PSNProfileUpdateInput'
    # upsert: 'PSNProfileUpsertWithoutRelationsInput'


class PSNProfileUpsertInput(TypedDict):
    create: 'PSNProfileCreateInput'
    update: 'PSNProfileUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PSNProfile_id_OrderByInput = TypedDict(
    '_PSNProfile_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PSNProfile_userId_OrderByInput = TypedDict(
    '_PSNProfile_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_PSNProfile_onlineId_OrderByInput = TypedDict(
    '_PSNProfile_onlineId_OrderByInput',
    {
        'onlineId': 'SortOrder',
    },
    total=True
)

_PSNProfile_accountId_OrderByInput = TypedDict(
    '_PSNProfile_accountId_OrderByInput',
    {
        'accountId': 'SortOrder',
    },
    total=True
)

_PSNProfile_aboutMe_OrderByInput = TypedDict(
    '_PSNProfile_aboutMe_OrderByInput',
    {
        'aboutMe': 'SortOrder',
    },
    total=True
)

_PSNProfile_languages_OrderByInput = TypedDict(
    '_PSNProfile_languages_OrderByInput',
    {
        'languages': 'SortOrder',
    },
    total=True
)

_PSNProfile_isPlus_OrderByInput = TypedDict(
    '_PSNProfile_isPlus_OrderByInput',
    {
        'isPlus': 'SortOrder',
    },
    total=True
)

_PSNProfile_isOfficiallyVerified_OrderByInput = TypedDict(
    '_PSNProfile_isOfficiallyVerified_OrderByInput',
    {
        'isOfficiallyVerified': 'SortOrder',
    },
    total=True
)

_PSNProfile_friendsCount_OrderByInput = TypedDict(
    '_PSNProfile_friendsCount_OrderByInput',
    {
        'friendsCount': 'SortOrder',
    },
    total=True
)

_PSNProfile_mutualFriendsCount_OrderByInput = TypedDict(
    '_PSNProfile_mutualFriendsCount_OrderByInput',
    {
        'mutualFriendsCount': 'SortOrder',
    },
    total=True
)

_PSNProfile_friendRelation_OrderByInput = TypedDict(
    '_PSNProfile_friendRelation_OrderByInput',
    {
        'friendRelation': 'SortOrder',
    },
    total=True
)

_PSNProfile_isBlocking_OrderByInput = TypedDict(
    '_PSNProfile_isBlocking_OrderByInput',
    {
        'isBlocking': 'SortOrder',
    },
    total=True
)

_PSNProfile_onlineStatus_OrderByInput = TypedDict(
    '_PSNProfile_onlineStatus_OrderByInput',
    {
        'onlineStatus': 'SortOrder',
    },
    total=True
)

_PSNProfile_platform_OrderByInput = TypedDict(
    '_PSNProfile_platform_OrderByInput',
    {
        'platform': 'SortOrder',
    },
    total=True
)

_PSNProfile_lastOnline_OrderByInput = TypedDict(
    '_PSNProfile_lastOnline_OrderByInput',
    {
        'lastOnline': 'SortOrder',
    },
    total=True
)

_PSNProfile_availability_OrderByInput = TypedDict(
    '_PSNProfile_availability_OrderByInput',
    {
        'availability': 'SortOrder',
    },
    total=True
)

_PSNProfile_lastProfileSync_OrderByInput = TypedDict(
    '_PSNProfile_lastProfileSync_OrderByInput',
    {
        'lastProfileSync': 'SortOrder',
    },
    total=True
)

_PSNProfile_lastTrophySync_OrderByInput = TypedDict(
    '_PSNProfile_lastTrophySync_OrderByInput',
    {
        'lastTrophySync': 'SortOrder',
    },
    total=True
)

_PSNProfile_lastGameSync_OrderByInput = TypedDict(
    '_PSNProfile_lastGameSync_OrderByInput',
    {
        'lastGameSync': 'SortOrder',
    },
    total=True
)

_PSNProfile_syncEnabled_OrderByInput = TypedDict(
    '_PSNProfile_syncEnabled_OrderByInput',
    {
        'syncEnabled': 'SortOrder',
    },
    total=True
)

_PSNProfile_lastUpdated_OrderByInput = TypedDict(
    '_PSNProfile_lastUpdated_OrderByInput',
    {
        'lastUpdated': 'SortOrder',
    },
    total=True
)

_PSNProfile_createdAt_OrderByInput = TypedDict(
    '_PSNProfile_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_PSNProfile_updatedAt_OrderByInput = TypedDict(
    '_PSNProfile_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_PSNProfile_RelevanceInner = TypedDict(
    '_PSNProfile_RelevanceInner',
    {
        'fields': 'List[PSNProfileScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_PSNProfile_RelevanceOrderByInput = TypedDict(
    '_PSNProfile_RelevanceOrderByInput',
    {
        '_relevance': '_PSNProfile_RelevanceInner',
    },
    total=True
)

PSNProfileOrderByInput = Union[
    '_PSNProfile_id_OrderByInput',
    '_PSNProfile_userId_OrderByInput',
    '_PSNProfile_onlineId_OrderByInput',
    '_PSNProfile_accountId_OrderByInput',
    '_PSNProfile_aboutMe_OrderByInput',
    '_PSNProfile_languages_OrderByInput',
    '_PSNProfile_isPlus_OrderByInput',
    '_PSNProfile_isOfficiallyVerified_OrderByInput',
    '_PSNProfile_friendsCount_OrderByInput',
    '_PSNProfile_mutualFriendsCount_OrderByInput',
    '_PSNProfile_friendRelation_OrderByInput',
    '_PSNProfile_isBlocking_OrderByInput',
    '_PSNProfile_onlineStatus_OrderByInput',
    '_PSNProfile_platform_OrderByInput',
    '_PSNProfile_lastOnline_OrderByInput',
    '_PSNProfile_availability_OrderByInput',
    '_PSNProfile_lastProfileSync_OrderByInput',
    '_PSNProfile_lastTrophySync_OrderByInput',
    '_PSNProfile_lastGameSync_OrderByInput',
    '_PSNProfile_syncEnabled_OrderByInput',
    '_PSNProfile_lastUpdated_OrderByInput',
    '_PSNProfile_createdAt_OrderByInput',
    '_PSNProfile_updatedAt_OrderByInput',
    '_PSNProfile_RelevanceOrderByInput',
]



# recursive PSNProfile types
# TODO: cleanup these types



PSNProfileRelationFilter = TypedDict(
    'PSNProfileRelationFilter',
    {
        'is': 'PSNProfileWhereInput',
        'is_not': 'PSNProfileWhereInput',
    },
    total=False,
)


class PSNProfileListRelationFilter(TypedDict, total=False):
    some: 'PSNProfileWhereInput'
    none: 'PSNProfileWhereInput'
    every: 'PSNProfileWhereInput'


class PSNProfileInclude(TypedDict, total=False):
    """PSNProfile relational arguments"""
    user: Union[bool, 'UserArgsFromPSNProfile']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromPSNProfile']
    trophySummary: Union[bool, 'PSNTrophyArgsFromPSNProfile']
    games: Union[bool, 'FindManyPSNGameArgsFromPSNProfile']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromPSNProfile']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromPSNProfile']


class ForumPostIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    author: Union[bool, 'UserArgsFromPSNProfile']
    comments: Union[bool, 'FindManyForumCommentArgsFromPSNProfile']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNProfile']
    followers: Union[bool, 'FindManyForumFollowerArgsFromPSNProfile']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNProfile']


class ForumPostArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']
    post: Union[bool, 'ForumPostArgsFromPSNProfile']
    comment: Union[bool, 'ForumCommentArgsFromPSNProfile']


class ForumReactionArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']
    post: Union[bool, 'ForumPostArgsFromPSNProfile']


class ForumFollowerArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']
    post: Union[bool, 'ForumPostArgsFromPSNProfile']


class ForumPostSubscriptionArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    author: Union[bool, 'UserArgsFromPSNProfile']
    post: Union[bool, 'ForumPostArgsFromPSNProfile']
    quotedComment: Union[bool, 'ForumCommentArgsFromPSNProfile']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromPSNProfile']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNProfile']


class ForumCommentArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    parentLeague: Union[bool, 'LeagueArgsFromPSNProfile']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromPSNProfile']
    conferences: Union[bool, 'FindManyConferenceArgsFromPSNProfile']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNProfile']
    teams: Union[bool, 'FindManyTeamArgsFromPSNProfile']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNProfile']


class LeagueArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    league: Union[bool, 'LeagueArgsFromPSNProfile']
    season: Union[bool, 'SeasonArgsFromPSNProfile']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNProfile']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNProfile']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromPSNProfile']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNProfile']


class LeagueSeasonArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    league: Union[bool, 'LeagueArgsFromPSNProfile']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNProfile']


class ConferenceArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    conference: Union[bool, 'ConferenceArgsFromPSNProfile']
    league: Union[bool, 'LeagueArgsFromPSNProfile']
    teams: Union[bool, 'FindManyTeamArgsFromPSNProfile']


class DivisionArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNProfile']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromPSNProfile']


class SeasonArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNProfile']


class LeagueCommissionerArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNProfile']


class LeagueBOGArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNProfile']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromPSNProfile']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromPSNProfile']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromPSNProfile']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromPSNProfile']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNProfile']


class MatchArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNProfile']
    match: Union[bool, 'MatchArgsFromPSNProfile']


class ClubMatchStatsArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    customKit: Union[bool, 'CustomKitArgsFromPSNProfile']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromPSNProfile']


class ClubMatchStatsDetailsArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNProfile']


class CustomKitArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    match: Union[bool, 'MatchArgsFromPSNProfile']


class ClubAggregateMatchStatsArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    match: Union[bool, 'MatchArgsFromPSNProfile']


class MatchAnalyticsArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    match: Union[bool, 'MatchArgsFromPSNProfile']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromPSNProfile']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNProfile']


class PlayerMatchArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']
    season: Union[bool, 'SeasonArgsFromPSNProfile']
    contract: Union[bool, 'ContractArgsFromPSNProfile']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNProfile']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNProfile']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNProfile']
    matches: Union[bool, 'FindManyMatchArgsFromPSNProfile']


class PlayerSeasonArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNProfile']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromPSNProfile']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromPSNProfile']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromPSNProfile']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNProfile']


class PlayerTeamSeasonArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNProfile']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNProfile']


class PlayerLeagueHistoryArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromPSNProfile']
    trophySummary: Union[bool, 'PSNTrophyArgsFromPSNProfile']
    games: Union[bool, 'FindManyPSNGameArgsFromPSNProfile']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromPSNProfile']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromPSNProfile']


class PSNProfileArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    profile: Union[bool, 'PSNProfileArgsFromPSNProfile']


class PSNAvatarArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    profile: Union[bool, 'PSNProfileArgsFromPSNProfile']


class PSNTrophyArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    profile: Union[bool, 'PSNProfileArgsFromPSNProfile']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromPSNProfile']


class PSNGameArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    profile: Union[bool, 'PSNProfileArgsFromPSNProfile']


class PSNSyncLogArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    profile: Union[bool, 'PSNProfileArgsFromPSNProfile']
    game: Union[bool, 'PSNGameArgsFromPSNProfile']


class PSNGameTrophiesArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    league: Union[bool, 'LeagueArgsFromPSNProfile']
    division: Union[bool, 'DivisionArgsFromPSNProfile']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromPSNProfile']
    nhlAffiliate: Union[bool, 'TeamArgsFromPSNProfile']
    ahlAffiliate: Union[bool, 'TeamArgsFromPSNProfile']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNProfile']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNProfile']


class TeamArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    team: Union[bool, 'TeamArgsFromPSNProfile']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNProfile']
    matches: Union[bool, 'FindManyMatchArgsFromPSNProfile']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNProfile']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNProfile']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNProfile']
    bids: Union[bool, 'FindManyBidArgsFromPSNProfile']
    managers: Union[bool, 'FindManyTeamManagerArgsFromPSNProfile']


class TeamSeasonArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNProfile']


class TeamManagerArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    contract: Union[bool, 'ContractArgsFromPSNProfile']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNProfile']


class BidArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNProfile']
    bids: Union[bool, 'FindManyBidArgsFromPSNProfile']


class ContractArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    notifications: Union[bool, 'FindManyNotificationArgsFromPSNProfile']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromPSNProfile']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromPSNProfile']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromPSNProfile']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromPSNProfile']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNProfile']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromPSNProfile']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromPSNProfile']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromPSNProfile']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNProfile']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNProfile']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNProfile']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromPSNProfile']
    psnProfile: Union[bool, 'PSNProfileArgsFromPSNProfile']


class UserArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']


class EaIdHistoryArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']


class SystemHistoryArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']


class GamertagHistoryArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromPSNProfile(TypedDict, total=False):
    """Relational arguments for PSNProfile"""
    user: Union[bool, 'UserArgsFromPSNProfile']


class NotificationArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromPSNProfile(TypedDict, total=False):
    """Arguments for PSNProfile"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyPSNProfileArgs = FindManyPSNProfileArgsFromPSNProfile
FindFirstPSNProfileArgs = FindManyPSNProfileArgsFromPSNProfile


class PSNProfileWhereInput(TypedDict, total=False):
    """PSNProfile arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    onlineId: Union[_str, 'types.StringFilter']
    accountId: Union[None, _str, 'types.StringFilter']
    aboutMe: Union[None, _str, 'types.StringFilter']
    languages: 'types.StringListFilter'
    isPlus: Union[None, _bool, 'types.BooleanFilter']
    isOfficiallyVerified: Union[None, _bool, 'types.BooleanFilter']
    friendsCount: Union[None, _int, 'types.IntFilter']
    mutualFriendsCount: Union[None, _int, 'types.IntFilter']
    friendRelation: Union[None, _str, 'types.StringFilter']
    isBlocking: Union[None, _bool, 'types.BooleanFilter']
    onlineStatus: Union[None, _str, 'types.StringFilter']
    platform: Union[None, _str, 'types.StringFilter']
    lastOnline: Union[None, datetime.datetime, 'types.DateTimeFilter']
    availability: Union[None, _str, 'types.StringFilter']
    lastProfileSync: Union[None, datetime.datetime, 'types.DateTimeFilter']
    lastTrophySync: Union[None, datetime.datetime, 'types.DateTimeFilter']
    lastGameSync: Union[None, datetime.datetime, 'types.DateTimeFilter']
    syncEnabled: Union[_bool, 'types.BooleanFilter']
    lastUpdated: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    avatars: 'PSNAvatarListRelationFilter'
    trophySummary: 'PSNTrophyRelationFilter'
    games: 'PSNGameListRelationFilter'
    syncLogs: 'PSNSyncLogListRelationFilter'
    gameTrophies: 'PSNGameTrophiesListRelationFilter'

    # should be noted that AND and NOT should be Union['PSNProfileWhereInput', List['PSNProfileWhereInput']]
    # but this causes mypy to hang :/
    AND: List['PSNProfileWhereInput']
    OR: List['PSNProfileWhereInput']
    NOT: List['PSNProfileWhereInput']



# aggregate PSNProfile types


class PSNProfileScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PSNProfile arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    onlineId: Union[_str, 'types.StringWithAggregatesFilter']
    accountId: Union[_str, 'types.StringWithAggregatesFilter']
    aboutMe: Union[_str, 'types.StringWithAggregatesFilter']
    languages: Union[_str, 'types.StringWithAggregatesFilter']
    isPlus: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isOfficiallyVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    friendsCount: Union[_int, 'types.IntWithAggregatesFilter']
    mutualFriendsCount: Union[_int, 'types.IntWithAggregatesFilter']
    friendRelation: Union[_str, 'types.StringWithAggregatesFilter']
    isBlocking: Union[_bool, 'types.BooleanWithAggregatesFilter']
    onlineStatus: Union[_str, 'types.StringWithAggregatesFilter']
    platform: Union[_str, 'types.StringWithAggregatesFilter']
    lastOnline: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    availability: Union[_str, 'types.StringWithAggregatesFilter']
    lastProfileSync: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastTrophySync: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastGameSync: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    syncEnabled: Union[_bool, 'types.BooleanWithAggregatesFilter']
    lastUpdated: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PSNProfileScalarWhereWithAggregatesInput']
    OR: List['PSNProfileScalarWhereWithAggregatesInput']
    NOT: List['PSNProfileScalarWhereWithAggregatesInput']



class PSNProfileGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    onlineId: _str
    accountId: _str
    aboutMe: _str
    languages: List[_str]
    isPlus: _bool
    isOfficiallyVerified: _bool
    friendsCount: _int
    mutualFriendsCount: _int
    friendRelation: _str
    isBlocking: _bool
    onlineStatus: _str
    platform: _str
    lastOnline: datetime.datetime
    availability: _str
    lastProfileSync: datetime.datetime
    lastTrophySync: datetime.datetime
    lastGameSync: datetime.datetime
    syncEnabled: _bool
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PSNProfileSumAggregateOutput'
    _avg: 'PSNProfileAvgAggregateOutput'
    _min: 'PSNProfileMinAggregateOutput'
    _max: 'PSNProfileMaxAggregateOutput'
    _count: 'PSNProfileCountAggregateOutput'


class PSNProfileAvgAggregateOutput(TypedDict, total=False):
    """PSNProfile output for aggregating averages"""
    friendsCount: float
    mutualFriendsCount: float


class PSNProfileSumAggregateOutput(TypedDict, total=False):
    """PSNProfile output for aggregating sums"""
    friendsCount: _int
    mutualFriendsCount: _int


class PSNProfileScalarAggregateOutput(TypedDict, total=False):
    """PSNProfile output including scalar fields"""
    id: _str
    userId: _str
    onlineId: _str
    accountId: _str
    aboutMe: _str
    languages: List[_str]
    isPlus: _bool
    isOfficiallyVerified: _bool
    friendsCount: _int
    mutualFriendsCount: _int
    friendRelation: _str
    isBlocking: _bool
    onlineStatus: _str
    platform: _str
    lastOnline: datetime.datetime
    availability: _str
    lastProfileSync: datetime.datetime
    lastTrophySync: datetime.datetime
    lastGameSync: datetime.datetime
    syncEnabled: _bool
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PSNProfileMinAggregateOutput = PSNProfileScalarAggregateOutput
PSNProfileMaxAggregateOutput = PSNProfileScalarAggregateOutput


class PSNProfileMaxAggregateInput(TypedDict, total=False):
    """PSNProfile input for aggregating by max"""
    id: bool
    userId: bool
    onlineId: bool
    accountId: bool
    aboutMe: bool
    languages: bool
    isPlus: bool
    isOfficiallyVerified: bool
    friendsCount: bool
    mutualFriendsCount: bool
    friendRelation: bool
    isBlocking: bool
    onlineStatus: bool
    platform: bool
    lastOnline: bool
    availability: bool
    lastProfileSync: bool
    lastTrophySync: bool
    lastGameSync: bool
    syncEnabled: bool
    lastUpdated: bool
    createdAt: bool
    updatedAt: bool


class PSNProfileMinAggregateInput(TypedDict, total=False):
    """PSNProfile input for aggregating by min"""
    id: bool
    userId: bool
    onlineId: bool
    accountId: bool
    aboutMe: bool
    languages: bool
    isPlus: bool
    isOfficiallyVerified: bool
    friendsCount: bool
    mutualFriendsCount: bool
    friendRelation: bool
    isBlocking: bool
    onlineStatus: bool
    platform: bool
    lastOnline: bool
    availability: bool
    lastProfileSync: bool
    lastTrophySync: bool
    lastGameSync: bool
    syncEnabled: bool
    lastUpdated: bool
    createdAt: bool
    updatedAt: bool


class PSNProfileNumberAggregateInput(TypedDict, total=False):
    """PSNProfile input for aggregating numbers"""
    friendsCount: bool
    mutualFriendsCount: bool


PSNProfileAvgAggregateInput = PSNProfileNumberAggregateInput
PSNProfileSumAggregateInput = PSNProfileNumberAggregateInput


PSNProfileCountAggregateInput = TypedDict(
    'PSNProfileCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'onlineId': bool,
        'accountId': bool,
        'aboutMe': bool,
        'languages': bool,
        'isPlus': bool,
        'isOfficiallyVerified': bool,
        'friendsCount': bool,
        'mutualFriendsCount': bool,
        'friendRelation': bool,
        'isBlocking': bool,
        'onlineStatus': bool,
        'platform': bool,
        'lastOnline': bool,
        'availability': bool,
        'lastProfileSync': bool,
        'lastTrophySync': bool,
        'lastGameSync': bool,
        'syncEnabled': bool,
        'lastUpdated': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PSNProfileCountAggregateOutput = TypedDict(
    'PSNProfileCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'onlineId': int,
        'accountId': int,
        'aboutMe': int,
        'languages': int,
        'isPlus': int,
        'isOfficiallyVerified': int,
        'friendsCount': int,
        'mutualFriendsCount': int,
        'friendRelation': int,
        'isBlocking': int,
        'onlineStatus': int,
        'platform': int,
        'lastOnline': int,
        'availability': int,
        'lastProfileSync': int,
        'lastTrophySync': int,
        'lastGameSync': int,
        'syncEnabled': int,
        'lastUpdated': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PSNProfileKeys = Literal[
    'id',
    'userId',
    'onlineId',
    'accountId',
    'aboutMe',
    'languages',
    'isPlus',
    'isOfficiallyVerified',
    'friendsCount',
    'mutualFriendsCount',
    'friendRelation',
    'isBlocking',
    'onlineStatus',
    'platform',
    'lastOnline',
    'availability',
    'lastProfileSync',
    'lastTrophySync',
    'lastGameSync',
    'syncEnabled',
    'lastUpdated',
    'createdAt',
    'updatedAt',
    'user',
    'avatars',
    'trophySummary',
    'games',
    'syncLogs',
    'gameTrophies',
]
PSNProfileScalarFieldKeys = Literal[
    'id',
    'userId',
    'onlineId',
    'accountId',
    'aboutMe',
    'languages',
    'isPlus',
    'isOfficiallyVerified',
    'friendsCount',
    'mutualFriendsCount',
    'friendRelation',
    'isBlocking',
    'onlineStatus',
    'platform',
    'lastOnline',
    'availability',
    'lastProfileSync',
    'lastTrophySync',
    'lastGameSync',
    'syncEnabled',
    'lastUpdated',
    'createdAt',
    'updatedAt',
]
PSNProfileScalarFieldKeysT = TypeVar('PSNProfileScalarFieldKeysT', bound=PSNProfileScalarFieldKeys)

PSNProfileRelationalFieldKeys = Literal[
        'user',
        'avatars',
        'trophySummary',
        'games',
        'syncLogs',
        'gameTrophies',
    ]

# PSNAvatar types

class PSNAvatarOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PSNAvatar create method"""
    id: _str
    profileId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    profile: 'PSNProfileCreateNestedWithoutRelationsInput'


class PSNAvatarCreateInput(PSNAvatarOptionalCreateInput):
    """Required arguments to the PSNAvatar create method"""
    size: _str
    url: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PSNAvatarOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PSNAvatar create method, without relations"""
    id: _str
    profileId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PSNAvatarCreateWithoutRelationsInput(PSNAvatarOptionalCreateWithoutRelationsInput):
    """Required arguments to the PSNAvatar create method, without relations"""
    size: _str
    url: _str

class PSNAvatarConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PSNAvatarCreateWithoutRelationsInput'
    where: 'PSNAvatarWhereUniqueInput'

class PSNAvatarCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNAvatarCreateWithoutRelationsInput'
    connect: 'PSNAvatarWhereUniqueInput'
    connect_or_create: 'PSNAvatarConnectOrCreateWithoutRelationsInput'


class PSNAvatarCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PSNAvatarCreateWithoutRelationsInput', List['PSNAvatarCreateWithoutRelationsInput']]
    connect: Union['PSNAvatarWhereUniqueInput', List['PSNAvatarWhereUniqueInput']]
    connect_or_create: Union['PSNAvatarConnectOrCreateWithoutRelationsInput', List['PSNAvatarConnectOrCreateWithoutRelationsInput']]

_PSNAvatarWhereUnique_id_Input = TypedDict(
    '_PSNAvatarWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PSNAvatarCompoundprofileId_sizeKeyInner = TypedDict(
    '_PSNAvatarCompoundprofileId_sizeKeyInner',
    {
        'profileId': '_str',
        'size': '_str',
    },
    total=True
)

_PSNAvatarCompoundprofileId_sizeKey = TypedDict(
    '_PSNAvatarCompoundprofileId_sizeKey',
    {
        'profileId_size': '_PSNAvatarCompoundprofileId_sizeKeyInner',
    },
    total=True
)

PSNAvatarWhereUniqueInput = Union[
    '_PSNAvatarWhereUnique_id_Input',
    '_PSNAvatarCompoundprofileId_sizeKey',
]


class PSNAvatarUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    size: _str
    url: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    profile: 'PSNProfileUpdateOneWithoutRelationsInput'


class PSNAvatarUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    size: _str
    url: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PSNAvatarUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PSNAvatarCreateWithoutRelationsInput']
    connect: List['PSNAvatarWhereUniqueInput']
    connect_or_create: List['PSNAvatarConnectOrCreateWithoutRelationsInput']
    set: List['PSNAvatarWhereUniqueInput']
    disconnect: List['PSNAvatarWhereUniqueInput']
    delete: List['PSNAvatarWhereUniqueInput']

    # TODO
    # update: List['PSNAvatarUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PSNAvatarUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PSNAvatarScalarWhereInput']
    # upsert: List['PSNAvatarUpserteWithWhereUniqueWithoutRelationsInput']


class PSNAvatarUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNAvatarCreateWithoutRelationsInput'
    connect: 'PSNAvatarWhereUniqueInput'
    connect_or_create: 'PSNAvatarConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PSNAvatarUpdateInput'
    # upsert: 'PSNAvatarUpsertWithoutRelationsInput'


class PSNAvatarUpsertInput(TypedDict):
    create: 'PSNAvatarCreateInput'
    update: 'PSNAvatarUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PSNAvatar_id_OrderByInput = TypedDict(
    '_PSNAvatar_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PSNAvatar_profileId_OrderByInput = TypedDict(
    '_PSNAvatar_profileId_OrderByInput',
    {
        'profileId': 'SortOrder',
    },
    total=True
)

_PSNAvatar_size_OrderByInput = TypedDict(
    '_PSNAvatar_size_OrderByInput',
    {
        'size': 'SortOrder',
    },
    total=True
)

_PSNAvatar_url_OrderByInput = TypedDict(
    '_PSNAvatar_url_OrderByInput',
    {
        'url': 'SortOrder',
    },
    total=True
)

_PSNAvatar_createdAt_OrderByInput = TypedDict(
    '_PSNAvatar_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_PSNAvatar_updatedAt_OrderByInput = TypedDict(
    '_PSNAvatar_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_PSNAvatar_RelevanceInner = TypedDict(
    '_PSNAvatar_RelevanceInner',
    {
        'fields': 'List[PSNAvatarScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_PSNAvatar_RelevanceOrderByInput = TypedDict(
    '_PSNAvatar_RelevanceOrderByInput',
    {
        '_relevance': '_PSNAvatar_RelevanceInner',
    },
    total=True
)

PSNAvatarOrderByInput = Union[
    '_PSNAvatar_id_OrderByInput',
    '_PSNAvatar_profileId_OrderByInput',
    '_PSNAvatar_size_OrderByInput',
    '_PSNAvatar_url_OrderByInput',
    '_PSNAvatar_createdAt_OrderByInput',
    '_PSNAvatar_updatedAt_OrderByInput',
    '_PSNAvatar_RelevanceOrderByInput',
]



# recursive PSNAvatar types
# TODO: cleanup these types



PSNAvatarRelationFilter = TypedDict(
    'PSNAvatarRelationFilter',
    {
        'is': 'PSNAvatarWhereInput',
        'is_not': 'PSNAvatarWhereInput',
    },
    total=False,
)


class PSNAvatarListRelationFilter(TypedDict, total=False):
    some: 'PSNAvatarWhereInput'
    none: 'PSNAvatarWhereInput'
    every: 'PSNAvatarWhereInput'


class PSNAvatarInclude(TypedDict, total=False):
    """PSNAvatar relational arguments"""
    profile: Union[bool, 'PSNProfileArgsFromPSNAvatar']


class ForumPostIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    author: Union[bool, 'UserArgsFromPSNAvatar']
    comments: Union[bool, 'FindManyForumCommentArgsFromPSNAvatar']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNAvatar']
    followers: Union[bool, 'FindManyForumFollowerArgsFromPSNAvatar']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNAvatar']


class ForumPostArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']
    post: Union[bool, 'ForumPostArgsFromPSNAvatar']
    comment: Union[bool, 'ForumCommentArgsFromPSNAvatar']


class ForumReactionArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']
    post: Union[bool, 'ForumPostArgsFromPSNAvatar']


class ForumFollowerArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']
    post: Union[bool, 'ForumPostArgsFromPSNAvatar']


class ForumPostSubscriptionArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    author: Union[bool, 'UserArgsFromPSNAvatar']
    post: Union[bool, 'ForumPostArgsFromPSNAvatar']
    quotedComment: Union[bool, 'ForumCommentArgsFromPSNAvatar']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromPSNAvatar']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNAvatar']


class ForumCommentArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    parentLeague: Union[bool, 'LeagueArgsFromPSNAvatar']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromPSNAvatar']
    conferences: Union[bool, 'FindManyConferenceArgsFromPSNAvatar']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNAvatar']
    teams: Union[bool, 'FindManyTeamArgsFromPSNAvatar']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNAvatar']


class LeagueArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    league: Union[bool, 'LeagueArgsFromPSNAvatar']
    season: Union[bool, 'SeasonArgsFromPSNAvatar']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNAvatar']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNAvatar']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromPSNAvatar']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNAvatar']


class LeagueSeasonArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    league: Union[bool, 'LeagueArgsFromPSNAvatar']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNAvatar']


class ConferenceArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    conference: Union[bool, 'ConferenceArgsFromPSNAvatar']
    league: Union[bool, 'LeagueArgsFromPSNAvatar']
    teams: Union[bool, 'FindManyTeamArgsFromPSNAvatar']


class DivisionArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNAvatar']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromPSNAvatar']


class SeasonArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNAvatar']


class LeagueCommissionerArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNAvatar']


class LeagueBOGArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNAvatar']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromPSNAvatar']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromPSNAvatar']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromPSNAvatar']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromPSNAvatar']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNAvatar']


class MatchArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNAvatar']
    match: Union[bool, 'MatchArgsFromPSNAvatar']


class ClubMatchStatsArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    customKit: Union[bool, 'CustomKitArgsFromPSNAvatar']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromPSNAvatar']


class ClubMatchStatsDetailsArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNAvatar']


class CustomKitArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    match: Union[bool, 'MatchArgsFromPSNAvatar']


class ClubAggregateMatchStatsArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    match: Union[bool, 'MatchArgsFromPSNAvatar']


class MatchAnalyticsArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    match: Union[bool, 'MatchArgsFromPSNAvatar']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromPSNAvatar']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNAvatar']


class PlayerMatchArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']
    season: Union[bool, 'SeasonArgsFromPSNAvatar']
    contract: Union[bool, 'ContractArgsFromPSNAvatar']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNAvatar']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNAvatar']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNAvatar']
    matches: Union[bool, 'FindManyMatchArgsFromPSNAvatar']


class PlayerSeasonArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNAvatar']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromPSNAvatar']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromPSNAvatar']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromPSNAvatar']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNAvatar']


class PlayerTeamSeasonArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNAvatar']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNAvatar']


class PlayerLeagueHistoryArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromPSNAvatar']
    trophySummary: Union[bool, 'PSNTrophyArgsFromPSNAvatar']
    games: Union[bool, 'FindManyPSNGameArgsFromPSNAvatar']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromPSNAvatar']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromPSNAvatar']


class PSNProfileArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    profile: Union[bool, 'PSNProfileArgsFromPSNAvatar']


class PSNAvatarArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    profile: Union[bool, 'PSNProfileArgsFromPSNAvatar']


class PSNTrophyArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    profile: Union[bool, 'PSNProfileArgsFromPSNAvatar']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromPSNAvatar']


class PSNGameArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    profile: Union[bool, 'PSNProfileArgsFromPSNAvatar']


class PSNSyncLogArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    profile: Union[bool, 'PSNProfileArgsFromPSNAvatar']
    game: Union[bool, 'PSNGameArgsFromPSNAvatar']


class PSNGameTrophiesArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    league: Union[bool, 'LeagueArgsFromPSNAvatar']
    division: Union[bool, 'DivisionArgsFromPSNAvatar']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromPSNAvatar']
    nhlAffiliate: Union[bool, 'TeamArgsFromPSNAvatar']
    ahlAffiliate: Union[bool, 'TeamArgsFromPSNAvatar']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNAvatar']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNAvatar']


class TeamArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    team: Union[bool, 'TeamArgsFromPSNAvatar']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNAvatar']
    matches: Union[bool, 'FindManyMatchArgsFromPSNAvatar']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNAvatar']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNAvatar']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNAvatar']
    bids: Union[bool, 'FindManyBidArgsFromPSNAvatar']
    managers: Union[bool, 'FindManyTeamManagerArgsFromPSNAvatar']


class TeamSeasonArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNAvatar']


class TeamManagerArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    contract: Union[bool, 'ContractArgsFromPSNAvatar']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNAvatar']


class BidArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNAvatar']
    bids: Union[bool, 'FindManyBidArgsFromPSNAvatar']


class ContractArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    notifications: Union[bool, 'FindManyNotificationArgsFromPSNAvatar']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromPSNAvatar']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromPSNAvatar']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromPSNAvatar']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromPSNAvatar']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNAvatar']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromPSNAvatar']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromPSNAvatar']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromPSNAvatar']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNAvatar']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNAvatar']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNAvatar']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromPSNAvatar']
    psnProfile: Union[bool, 'PSNProfileArgsFromPSNAvatar']


class UserArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']


class EaIdHistoryArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']


class SystemHistoryArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']


class GamertagHistoryArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromPSNAvatar(TypedDict, total=False):
    """Relational arguments for PSNAvatar"""
    user: Union[bool, 'UserArgsFromPSNAvatar']


class NotificationArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromPSNAvatar(TypedDict, total=False):
    """Arguments for PSNAvatar"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyPSNAvatarArgs = FindManyPSNAvatarArgsFromPSNAvatar
FindFirstPSNAvatarArgs = FindManyPSNAvatarArgsFromPSNAvatar


class PSNAvatarWhereInput(TypedDict, total=False):
    """PSNAvatar arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    profileId: Union[_str, 'types.StringFilter']
    size: Union[_str, 'types.StringFilter']
    url: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    profile: 'PSNProfileRelationFilter'

    # should be noted that AND and NOT should be Union['PSNAvatarWhereInput', List['PSNAvatarWhereInput']]
    # but this causes mypy to hang :/
    AND: List['PSNAvatarWhereInput']
    OR: List['PSNAvatarWhereInput']
    NOT: List['PSNAvatarWhereInput']



# aggregate PSNAvatar types


class PSNAvatarScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PSNAvatar arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    profileId: Union[_str, 'types.StringWithAggregatesFilter']
    size: Union[_str, 'types.StringWithAggregatesFilter']
    url: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PSNAvatarScalarWhereWithAggregatesInput']
    OR: List['PSNAvatarScalarWhereWithAggregatesInput']
    NOT: List['PSNAvatarScalarWhereWithAggregatesInput']



class PSNAvatarGroupByOutput(TypedDict, total=False):
    id: _str
    profileId: _str
    size: _str
    url: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PSNAvatarSumAggregateOutput'
    _avg: 'PSNAvatarAvgAggregateOutput'
    _min: 'PSNAvatarMinAggregateOutput'
    _max: 'PSNAvatarMaxAggregateOutput'
    _count: 'PSNAvatarCountAggregateOutput'


class PSNAvatarAvgAggregateOutput(TypedDict, total=False):
    """PSNAvatar output for aggregating averages"""


class PSNAvatarSumAggregateOutput(TypedDict, total=False):
    """PSNAvatar output for aggregating sums"""


class PSNAvatarScalarAggregateOutput(TypedDict, total=False):
    """PSNAvatar output including scalar fields"""
    id: _str
    profileId: _str
    size: _str
    url: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PSNAvatarMinAggregateOutput = PSNAvatarScalarAggregateOutput
PSNAvatarMaxAggregateOutput = PSNAvatarScalarAggregateOutput


class PSNAvatarMaxAggregateInput(TypedDict, total=False):
    """PSNAvatar input for aggregating by max"""
    id: bool
    profileId: bool
    size: bool
    url: bool
    createdAt: bool
    updatedAt: bool


class PSNAvatarMinAggregateInput(TypedDict, total=False):
    """PSNAvatar input for aggregating by min"""
    id: bool
    profileId: bool
    size: bool
    url: bool
    createdAt: bool
    updatedAt: bool


class PSNAvatarNumberAggregateInput(TypedDict, total=False):
    """PSNAvatar input for aggregating numbers"""


PSNAvatarAvgAggregateInput = PSNAvatarNumberAggregateInput
PSNAvatarSumAggregateInput = PSNAvatarNumberAggregateInput


PSNAvatarCountAggregateInput = TypedDict(
    'PSNAvatarCountAggregateInput',
    {
        'id': bool,
        'profileId': bool,
        'size': bool,
        'url': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PSNAvatarCountAggregateOutput = TypedDict(
    'PSNAvatarCountAggregateOutput',
    {
        'id': int,
        'profileId': int,
        'size': int,
        'url': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PSNAvatarKeys = Literal[
    'id',
    'profileId',
    'size',
    'url',
    'createdAt',
    'updatedAt',
    'profile',
]
PSNAvatarScalarFieldKeys = Literal[
    'id',
    'profileId',
    'size',
    'url',
    'createdAt',
    'updatedAt',
]
PSNAvatarScalarFieldKeysT = TypeVar('PSNAvatarScalarFieldKeysT', bound=PSNAvatarScalarFieldKeys)

PSNAvatarRelationalFieldKeys = Literal[
        'profile',
    ]

# PSNTrophy types

class PSNTrophyOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PSNTrophy create method"""
    id: _str
    profileId: _str
    trophyLevel: Optional[_int]
    progress: Optional[_int]
    tier: Optional[_int]
    platinumCount: Optional[_int]
    goldCount: Optional[_int]
    silverCount: Optional[_int]
    bronzeCount: Optional[_int]
    totalTrophies: Optional[_int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    profile: 'PSNProfileCreateNestedWithoutRelationsInput'


class PSNTrophyCreateInput(PSNTrophyOptionalCreateInput):
    """Required arguments to the PSNTrophy create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PSNTrophyOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PSNTrophy create method, without relations"""
    id: _str
    profileId: _str
    trophyLevel: Optional[_int]
    progress: Optional[_int]
    tier: Optional[_int]
    platinumCount: Optional[_int]
    goldCount: Optional[_int]
    silverCount: Optional[_int]
    bronzeCount: Optional[_int]
    totalTrophies: Optional[_int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PSNTrophyCreateWithoutRelationsInput(PSNTrophyOptionalCreateWithoutRelationsInput):
    """Required arguments to the PSNTrophy create method, without relations"""

class PSNTrophyConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PSNTrophyCreateWithoutRelationsInput'
    where: 'PSNTrophyWhereUniqueInput'

class PSNTrophyCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNTrophyCreateWithoutRelationsInput'
    connect: 'PSNTrophyWhereUniqueInput'
    connect_or_create: 'PSNTrophyConnectOrCreateWithoutRelationsInput'


class PSNTrophyCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PSNTrophyCreateWithoutRelationsInput', List['PSNTrophyCreateWithoutRelationsInput']]
    connect: Union['PSNTrophyWhereUniqueInput', List['PSNTrophyWhereUniqueInput']]
    connect_or_create: Union['PSNTrophyConnectOrCreateWithoutRelationsInput', List['PSNTrophyConnectOrCreateWithoutRelationsInput']]

_PSNTrophyWhereUnique_id_Input = TypedDict(
    '_PSNTrophyWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PSNTrophyWhereUnique_profileId_Input = TypedDict(
    '_PSNTrophyWhereUnique_profileId_Input',
    {
        'profileId': '_str',
    },
    total=True
)

PSNTrophyWhereUniqueInput = Union[
    '_PSNTrophyWhereUnique_id_Input',
    '_PSNTrophyWhereUnique_profileId_Input',
]


class PSNTrophyUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    trophyLevel: Optional[Union[AtomicIntInput, _int]]
    progress: Optional[Union[AtomicIntInput, _int]]
    tier: Optional[Union[AtomicIntInput, _int]]
    platinumCount: Optional[Union[AtomicIntInput, _int]]
    goldCount: Optional[Union[AtomicIntInput, _int]]
    silverCount: Optional[Union[AtomicIntInput, _int]]
    bronzeCount: Optional[Union[AtomicIntInput, _int]]
    totalTrophies: Optional[Union[AtomicIntInput, _int]]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    profile: 'PSNProfileUpdateOneWithoutRelationsInput'


class PSNTrophyUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    trophyLevel: Optional[Union[AtomicIntInput, _int]]
    progress: Optional[Union[AtomicIntInput, _int]]
    tier: Optional[Union[AtomicIntInput, _int]]
    platinumCount: Optional[Union[AtomicIntInput, _int]]
    goldCount: Optional[Union[AtomicIntInput, _int]]
    silverCount: Optional[Union[AtomicIntInput, _int]]
    bronzeCount: Optional[Union[AtomicIntInput, _int]]
    totalTrophies: Optional[Union[AtomicIntInput, _int]]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PSNTrophyUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PSNTrophyCreateWithoutRelationsInput']
    connect: List['PSNTrophyWhereUniqueInput']
    connect_or_create: List['PSNTrophyConnectOrCreateWithoutRelationsInput']
    set: List['PSNTrophyWhereUniqueInput']
    disconnect: List['PSNTrophyWhereUniqueInput']
    delete: List['PSNTrophyWhereUniqueInput']

    # TODO
    # update: List['PSNTrophyUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PSNTrophyUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PSNTrophyScalarWhereInput']
    # upsert: List['PSNTrophyUpserteWithWhereUniqueWithoutRelationsInput']


class PSNTrophyUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNTrophyCreateWithoutRelationsInput'
    connect: 'PSNTrophyWhereUniqueInput'
    connect_or_create: 'PSNTrophyConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PSNTrophyUpdateInput'
    # upsert: 'PSNTrophyUpsertWithoutRelationsInput'


class PSNTrophyUpsertInput(TypedDict):
    create: 'PSNTrophyCreateInput'
    update: 'PSNTrophyUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PSNTrophy_id_OrderByInput = TypedDict(
    '_PSNTrophy_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PSNTrophy_profileId_OrderByInput = TypedDict(
    '_PSNTrophy_profileId_OrderByInput',
    {
        'profileId': 'SortOrder',
    },
    total=True
)

_PSNTrophy_trophyLevel_OrderByInput = TypedDict(
    '_PSNTrophy_trophyLevel_OrderByInput',
    {
        'trophyLevel': 'SortOrder',
    },
    total=True
)

_PSNTrophy_progress_OrderByInput = TypedDict(
    '_PSNTrophy_progress_OrderByInput',
    {
        'progress': 'SortOrder',
    },
    total=True
)

_PSNTrophy_tier_OrderByInput = TypedDict(
    '_PSNTrophy_tier_OrderByInput',
    {
        'tier': 'SortOrder',
    },
    total=True
)

_PSNTrophy_platinumCount_OrderByInput = TypedDict(
    '_PSNTrophy_platinumCount_OrderByInput',
    {
        'platinumCount': 'SortOrder',
    },
    total=True
)

_PSNTrophy_goldCount_OrderByInput = TypedDict(
    '_PSNTrophy_goldCount_OrderByInput',
    {
        'goldCount': 'SortOrder',
    },
    total=True
)

_PSNTrophy_silverCount_OrderByInput = TypedDict(
    '_PSNTrophy_silverCount_OrderByInput',
    {
        'silverCount': 'SortOrder',
    },
    total=True
)

_PSNTrophy_bronzeCount_OrderByInput = TypedDict(
    '_PSNTrophy_bronzeCount_OrderByInput',
    {
        'bronzeCount': 'SortOrder',
    },
    total=True
)

_PSNTrophy_totalTrophies_OrderByInput = TypedDict(
    '_PSNTrophy_totalTrophies_OrderByInput',
    {
        'totalTrophies': 'SortOrder',
    },
    total=True
)

_PSNTrophy_createdAt_OrderByInput = TypedDict(
    '_PSNTrophy_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_PSNTrophy_updatedAt_OrderByInput = TypedDict(
    '_PSNTrophy_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_PSNTrophy_RelevanceInner = TypedDict(
    '_PSNTrophy_RelevanceInner',
    {
        'fields': 'List[PSNTrophyScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_PSNTrophy_RelevanceOrderByInput = TypedDict(
    '_PSNTrophy_RelevanceOrderByInput',
    {
        '_relevance': '_PSNTrophy_RelevanceInner',
    },
    total=True
)

PSNTrophyOrderByInput = Union[
    '_PSNTrophy_id_OrderByInput',
    '_PSNTrophy_profileId_OrderByInput',
    '_PSNTrophy_trophyLevel_OrderByInput',
    '_PSNTrophy_progress_OrderByInput',
    '_PSNTrophy_tier_OrderByInput',
    '_PSNTrophy_platinumCount_OrderByInput',
    '_PSNTrophy_goldCount_OrderByInput',
    '_PSNTrophy_silverCount_OrderByInput',
    '_PSNTrophy_bronzeCount_OrderByInput',
    '_PSNTrophy_totalTrophies_OrderByInput',
    '_PSNTrophy_createdAt_OrderByInput',
    '_PSNTrophy_updatedAt_OrderByInput',
    '_PSNTrophy_RelevanceOrderByInput',
]



# recursive PSNTrophy types
# TODO: cleanup these types



PSNTrophyRelationFilter = TypedDict(
    'PSNTrophyRelationFilter',
    {
        'is': 'PSNTrophyWhereInput',
        'is_not': 'PSNTrophyWhereInput',
    },
    total=False,
)


class PSNTrophyListRelationFilter(TypedDict, total=False):
    some: 'PSNTrophyWhereInput'
    none: 'PSNTrophyWhereInput'
    every: 'PSNTrophyWhereInput'


class PSNTrophyInclude(TypedDict, total=False):
    """PSNTrophy relational arguments"""
    profile: Union[bool, 'PSNProfileArgsFromPSNTrophy']


class ForumPostIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    author: Union[bool, 'UserArgsFromPSNTrophy']
    comments: Union[bool, 'FindManyForumCommentArgsFromPSNTrophy']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNTrophy']
    followers: Union[bool, 'FindManyForumFollowerArgsFromPSNTrophy']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNTrophy']


class ForumPostArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']
    post: Union[bool, 'ForumPostArgsFromPSNTrophy']
    comment: Union[bool, 'ForumCommentArgsFromPSNTrophy']


class ForumReactionArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']
    post: Union[bool, 'ForumPostArgsFromPSNTrophy']


class ForumFollowerArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']
    post: Union[bool, 'ForumPostArgsFromPSNTrophy']


class ForumPostSubscriptionArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    author: Union[bool, 'UserArgsFromPSNTrophy']
    post: Union[bool, 'ForumPostArgsFromPSNTrophy']
    quotedComment: Union[bool, 'ForumCommentArgsFromPSNTrophy']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromPSNTrophy']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNTrophy']


class ForumCommentArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    parentLeague: Union[bool, 'LeagueArgsFromPSNTrophy']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromPSNTrophy']
    conferences: Union[bool, 'FindManyConferenceArgsFromPSNTrophy']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNTrophy']
    teams: Union[bool, 'FindManyTeamArgsFromPSNTrophy']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNTrophy']


class LeagueArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    league: Union[bool, 'LeagueArgsFromPSNTrophy']
    season: Union[bool, 'SeasonArgsFromPSNTrophy']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNTrophy']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNTrophy']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromPSNTrophy']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNTrophy']


class LeagueSeasonArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    league: Union[bool, 'LeagueArgsFromPSNTrophy']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNTrophy']


class ConferenceArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    conference: Union[bool, 'ConferenceArgsFromPSNTrophy']
    league: Union[bool, 'LeagueArgsFromPSNTrophy']
    teams: Union[bool, 'FindManyTeamArgsFromPSNTrophy']


class DivisionArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNTrophy']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromPSNTrophy']


class SeasonArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNTrophy']


class LeagueCommissionerArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNTrophy']


class LeagueBOGArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNTrophy']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromPSNTrophy']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromPSNTrophy']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromPSNTrophy']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromPSNTrophy']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNTrophy']


class MatchArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNTrophy']
    match: Union[bool, 'MatchArgsFromPSNTrophy']


class ClubMatchStatsArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    customKit: Union[bool, 'CustomKitArgsFromPSNTrophy']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromPSNTrophy']


class ClubMatchStatsDetailsArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNTrophy']


class CustomKitArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    match: Union[bool, 'MatchArgsFromPSNTrophy']


class ClubAggregateMatchStatsArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    match: Union[bool, 'MatchArgsFromPSNTrophy']


class MatchAnalyticsArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    match: Union[bool, 'MatchArgsFromPSNTrophy']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromPSNTrophy']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNTrophy']


class PlayerMatchArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']
    season: Union[bool, 'SeasonArgsFromPSNTrophy']
    contract: Union[bool, 'ContractArgsFromPSNTrophy']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNTrophy']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNTrophy']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNTrophy']
    matches: Union[bool, 'FindManyMatchArgsFromPSNTrophy']


class PlayerSeasonArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNTrophy']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromPSNTrophy']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromPSNTrophy']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromPSNTrophy']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNTrophy']


class PlayerTeamSeasonArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNTrophy']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNTrophy']


class PlayerLeagueHistoryArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromPSNTrophy']
    trophySummary: Union[bool, 'PSNTrophyArgsFromPSNTrophy']
    games: Union[bool, 'FindManyPSNGameArgsFromPSNTrophy']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromPSNTrophy']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromPSNTrophy']


class PSNProfileArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    profile: Union[bool, 'PSNProfileArgsFromPSNTrophy']


class PSNAvatarArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    profile: Union[bool, 'PSNProfileArgsFromPSNTrophy']


class PSNTrophyArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    profile: Union[bool, 'PSNProfileArgsFromPSNTrophy']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromPSNTrophy']


class PSNGameArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    profile: Union[bool, 'PSNProfileArgsFromPSNTrophy']


class PSNSyncLogArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    profile: Union[bool, 'PSNProfileArgsFromPSNTrophy']
    game: Union[bool, 'PSNGameArgsFromPSNTrophy']


class PSNGameTrophiesArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    league: Union[bool, 'LeagueArgsFromPSNTrophy']
    division: Union[bool, 'DivisionArgsFromPSNTrophy']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromPSNTrophy']
    nhlAffiliate: Union[bool, 'TeamArgsFromPSNTrophy']
    ahlAffiliate: Union[bool, 'TeamArgsFromPSNTrophy']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNTrophy']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNTrophy']


class TeamArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    team: Union[bool, 'TeamArgsFromPSNTrophy']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNTrophy']
    matches: Union[bool, 'FindManyMatchArgsFromPSNTrophy']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNTrophy']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNTrophy']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNTrophy']
    bids: Union[bool, 'FindManyBidArgsFromPSNTrophy']
    managers: Union[bool, 'FindManyTeamManagerArgsFromPSNTrophy']


class TeamSeasonArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNTrophy']


class TeamManagerArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    contract: Union[bool, 'ContractArgsFromPSNTrophy']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNTrophy']


class BidArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNTrophy']
    bids: Union[bool, 'FindManyBidArgsFromPSNTrophy']


class ContractArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    notifications: Union[bool, 'FindManyNotificationArgsFromPSNTrophy']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromPSNTrophy']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromPSNTrophy']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromPSNTrophy']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromPSNTrophy']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNTrophy']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromPSNTrophy']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromPSNTrophy']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromPSNTrophy']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNTrophy']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNTrophy']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNTrophy']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromPSNTrophy']
    psnProfile: Union[bool, 'PSNProfileArgsFromPSNTrophy']


class UserArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']


class EaIdHistoryArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']


class SystemHistoryArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']


class GamertagHistoryArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromPSNTrophy(TypedDict, total=False):
    """Relational arguments for PSNTrophy"""
    user: Union[bool, 'UserArgsFromPSNTrophy']


class NotificationArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromPSNTrophy(TypedDict, total=False):
    """Arguments for PSNTrophy"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyPSNTrophyArgs = FindManyPSNTrophyArgsFromPSNTrophy
FindFirstPSNTrophyArgs = FindManyPSNTrophyArgsFromPSNTrophy


class PSNTrophyWhereInput(TypedDict, total=False):
    """PSNTrophy arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    profileId: Union[_str, 'types.StringFilter']
    trophyLevel: Union[None, _int, 'types.IntFilter']
    progress: Union[None, _int, 'types.IntFilter']
    tier: Union[None, _int, 'types.IntFilter']
    platinumCount: Union[None, _int, 'types.IntFilter']
    goldCount: Union[None, _int, 'types.IntFilter']
    silverCount: Union[None, _int, 'types.IntFilter']
    bronzeCount: Union[None, _int, 'types.IntFilter']
    totalTrophies: Union[None, _int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    profile: 'PSNProfileRelationFilter'

    # should be noted that AND and NOT should be Union['PSNTrophyWhereInput', List['PSNTrophyWhereInput']]
    # but this causes mypy to hang :/
    AND: List['PSNTrophyWhereInput']
    OR: List['PSNTrophyWhereInput']
    NOT: List['PSNTrophyWhereInput']



# aggregate PSNTrophy types


class PSNTrophyScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PSNTrophy arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    profileId: Union[_str, 'types.StringWithAggregatesFilter']
    trophyLevel: Union[_int, 'types.IntWithAggregatesFilter']
    progress: Union[_int, 'types.IntWithAggregatesFilter']
    tier: Union[_int, 'types.IntWithAggregatesFilter']
    platinumCount: Union[_int, 'types.IntWithAggregatesFilter']
    goldCount: Union[_int, 'types.IntWithAggregatesFilter']
    silverCount: Union[_int, 'types.IntWithAggregatesFilter']
    bronzeCount: Union[_int, 'types.IntWithAggregatesFilter']
    totalTrophies: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PSNTrophyScalarWhereWithAggregatesInput']
    OR: List['PSNTrophyScalarWhereWithAggregatesInput']
    NOT: List['PSNTrophyScalarWhereWithAggregatesInput']



class PSNTrophyGroupByOutput(TypedDict, total=False):
    id: _str
    profileId: _str
    trophyLevel: _int
    progress: _int
    tier: _int
    platinumCount: _int
    goldCount: _int
    silverCount: _int
    bronzeCount: _int
    totalTrophies: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PSNTrophySumAggregateOutput'
    _avg: 'PSNTrophyAvgAggregateOutput'
    _min: 'PSNTrophyMinAggregateOutput'
    _max: 'PSNTrophyMaxAggregateOutput'
    _count: 'PSNTrophyCountAggregateOutput'


class PSNTrophyAvgAggregateOutput(TypedDict, total=False):
    """PSNTrophy output for aggregating averages"""
    trophyLevel: float
    progress: float
    tier: float
    platinumCount: float
    goldCount: float
    silverCount: float
    bronzeCount: float
    totalTrophies: float


class PSNTrophySumAggregateOutput(TypedDict, total=False):
    """PSNTrophy output for aggregating sums"""
    trophyLevel: _int
    progress: _int
    tier: _int
    platinumCount: _int
    goldCount: _int
    silverCount: _int
    bronzeCount: _int
    totalTrophies: _int


class PSNTrophyScalarAggregateOutput(TypedDict, total=False):
    """PSNTrophy output including scalar fields"""
    id: _str
    profileId: _str
    trophyLevel: _int
    progress: _int
    tier: _int
    platinumCount: _int
    goldCount: _int
    silverCount: _int
    bronzeCount: _int
    totalTrophies: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PSNTrophyMinAggregateOutput = PSNTrophyScalarAggregateOutput
PSNTrophyMaxAggregateOutput = PSNTrophyScalarAggregateOutput


class PSNTrophyMaxAggregateInput(TypedDict, total=False):
    """PSNTrophy input for aggregating by max"""
    id: bool
    profileId: bool
    trophyLevel: bool
    progress: bool
    tier: bool
    platinumCount: bool
    goldCount: bool
    silverCount: bool
    bronzeCount: bool
    totalTrophies: bool
    createdAt: bool
    updatedAt: bool


class PSNTrophyMinAggregateInput(TypedDict, total=False):
    """PSNTrophy input for aggregating by min"""
    id: bool
    profileId: bool
    trophyLevel: bool
    progress: bool
    tier: bool
    platinumCount: bool
    goldCount: bool
    silverCount: bool
    bronzeCount: bool
    totalTrophies: bool
    createdAt: bool
    updatedAt: bool


class PSNTrophyNumberAggregateInput(TypedDict, total=False):
    """PSNTrophy input for aggregating numbers"""
    trophyLevel: bool
    progress: bool
    tier: bool
    platinumCount: bool
    goldCount: bool
    silverCount: bool
    bronzeCount: bool
    totalTrophies: bool


PSNTrophyAvgAggregateInput = PSNTrophyNumberAggregateInput
PSNTrophySumAggregateInput = PSNTrophyNumberAggregateInput


PSNTrophyCountAggregateInput = TypedDict(
    'PSNTrophyCountAggregateInput',
    {
        'id': bool,
        'profileId': bool,
        'trophyLevel': bool,
        'progress': bool,
        'tier': bool,
        'platinumCount': bool,
        'goldCount': bool,
        'silverCount': bool,
        'bronzeCount': bool,
        'totalTrophies': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PSNTrophyCountAggregateOutput = TypedDict(
    'PSNTrophyCountAggregateOutput',
    {
        'id': int,
        'profileId': int,
        'trophyLevel': int,
        'progress': int,
        'tier': int,
        'platinumCount': int,
        'goldCount': int,
        'silverCount': int,
        'bronzeCount': int,
        'totalTrophies': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PSNTrophyKeys = Literal[
    'id',
    'profileId',
    'trophyLevel',
    'progress',
    'tier',
    'platinumCount',
    'goldCount',
    'silverCount',
    'bronzeCount',
    'totalTrophies',
    'createdAt',
    'updatedAt',
    'profile',
]
PSNTrophyScalarFieldKeys = Literal[
    'id',
    'profileId',
    'trophyLevel',
    'progress',
    'tier',
    'platinumCount',
    'goldCount',
    'silverCount',
    'bronzeCount',
    'totalTrophies',
    'createdAt',
    'updatedAt',
]
PSNTrophyScalarFieldKeysT = TypeVar('PSNTrophyScalarFieldKeysT', bound=PSNTrophyScalarFieldKeys)

PSNTrophyRelationalFieldKeys = Literal[
        'profile',
    ]

# PSNGame types

class PSNGameOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PSNGame create method"""
    id: _str
    profileId: _str
    imageUrl: Optional[_str]
    playCount: Optional[_int]
    firstPlayed: Optional[datetime.datetime]
    lastPlayed: Optional[datetime.datetime]
    playDuration: Optional[_str]
    playTimeMinutes: Optional[_int]
    isCurrentlyPlaying: Optional[_bool]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    profile: 'PSNProfileCreateNestedWithoutRelationsInput'
    trophyInfo: 'PSNGameTrophiesCreateNestedWithoutRelationsInput'


class PSNGameCreateInput(PSNGameOptionalCreateInput):
    """Required arguments to the PSNGame create method"""
    name: _str
    titleId: _str
    platform: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PSNGameOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PSNGame create method, without relations"""
    id: _str
    profileId: _str
    imageUrl: Optional[_str]
    playCount: Optional[_int]
    firstPlayed: Optional[datetime.datetime]
    lastPlayed: Optional[datetime.datetime]
    playDuration: Optional[_str]
    playTimeMinutes: Optional[_int]
    isCurrentlyPlaying: Optional[_bool]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PSNGameCreateWithoutRelationsInput(PSNGameOptionalCreateWithoutRelationsInput):
    """Required arguments to the PSNGame create method, without relations"""
    name: _str
    titleId: _str
    platform: _str

class PSNGameConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PSNGameCreateWithoutRelationsInput'
    where: 'PSNGameWhereUniqueInput'

class PSNGameCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNGameCreateWithoutRelationsInput'
    connect: 'PSNGameWhereUniqueInput'
    connect_or_create: 'PSNGameConnectOrCreateWithoutRelationsInput'


class PSNGameCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PSNGameCreateWithoutRelationsInput', List['PSNGameCreateWithoutRelationsInput']]
    connect: Union['PSNGameWhereUniqueInput', List['PSNGameWhereUniqueInput']]
    connect_or_create: Union['PSNGameConnectOrCreateWithoutRelationsInput', List['PSNGameConnectOrCreateWithoutRelationsInput']]

_PSNGameWhereUnique_id_Input = TypedDict(
    '_PSNGameWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PSNGameCompoundprofileId_titleId_platformKeyInner = TypedDict(
    '_PSNGameCompoundprofileId_titleId_platformKeyInner',
    {
        'profileId': '_str',
        'titleId': '_str',
        'platform': '_str',
    },
    total=True
)

_PSNGameCompoundprofileId_titleId_platformKey = TypedDict(
    '_PSNGameCompoundprofileId_titleId_platformKey',
    {
        'profileId_titleId_platform': '_PSNGameCompoundprofileId_titleId_platformKeyInner',
    },
    total=True
)

PSNGameWhereUniqueInput = Union[
    '_PSNGameWhereUnique_id_Input',
    '_PSNGameCompoundprofileId_titleId_platformKey',
]


class PSNGameUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    name: _str
    titleId: _str
    platform: _str
    imageUrl: Optional[_str]
    playCount: Optional[Union[AtomicIntInput, _int]]
    firstPlayed: Optional[datetime.datetime]
    lastPlayed: Optional[datetime.datetime]
    playDuration: Optional[_str]
    playTimeMinutes: Optional[Union[AtomicIntInput, _int]]
    isCurrentlyPlaying: Optional[_bool]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    profile: 'PSNProfileUpdateOneWithoutRelationsInput'
    trophyInfo: 'PSNGameTrophiesUpdateOneWithoutRelationsInput'


class PSNGameUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    name: _str
    titleId: _str
    platform: _str
    imageUrl: Optional[_str]
    playCount: Optional[Union[AtomicIntInput, _int]]
    firstPlayed: Optional[datetime.datetime]
    lastPlayed: Optional[datetime.datetime]
    playDuration: Optional[_str]
    playTimeMinutes: Optional[Union[AtomicIntInput, _int]]
    isCurrentlyPlaying: Optional[_bool]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PSNGameUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PSNGameCreateWithoutRelationsInput']
    connect: List['PSNGameWhereUniqueInput']
    connect_or_create: List['PSNGameConnectOrCreateWithoutRelationsInput']
    set: List['PSNGameWhereUniqueInput']
    disconnect: List['PSNGameWhereUniqueInput']
    delete: List['PSNGameWhereUniqueInput']

    # TODO
    # update: List['PSNGameUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PSNGameUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PSNGameScalarWhereInput']
    # upsert: List['PSNGameUpserteWithWhereUniqueWithoutRelationsInput']


class PSNGameUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNGameCreateWithoutRelationsInput'
    connect: 'PSNGameWhereUniqueInput'
    connect_or_create: 'PSNGameConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PSNGameUpdateInput'
    # upsert: 'PSNGameUpsertWithoutRelationsInput'


class PSNGameUpsertInput(TypedDict):
    create: 'PSNGameCreateInput'
    update: 'PSNGameUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PSNGame_id_OrderByInput = TypedDict(
    '_PSNGame_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PSNGame_profileId_OrderByInput = TypedDict(
    '_PSNGame_profileId_OrderByInput',
    {
        'profileId': 'SortOrder',
    },
    total=True
)

_PSNGame_name_OrderByInput = TypedDict(
    '_PSNGame_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_PSNGame_titleId_OrderByInput = TypedDict(
    '_PSNGame_titleId_OrderByInput',
    {
        'titleId': 'SortOrder',
    },
    total=True
)

_PSNGame_platform_OrderByInput = TypedDict(
    '_PSNGame_platform_OrderByInput',
    {
        'platform': 'SortOrder',
    },
    total=True
)

_PSNGame_imageUrl_OrderByInput = TypedDict(
    '_PSNGame_imageUrl_OrderByInput',
    {
        'imageUrl': 'SortOrder',
    },
    total=True
)

_PSNGame_playCount_OrderByInput = TypedDict(
    '_PSNGame_playCount_OrderByInput',
    {
        'playCount': 'SortOrder',
    },
    total=True
)

_PSNGame_firstPlayed_OrderByInput = TypedDict(
    '_PSNGame_firstPlayed_OrderByInput',
    {
        'firstPlayed': 'SortOrder',
    },
    total=True
)

_PSNGame_lastPlayed_OrderByInput = TypedDict(
    '_PSNGame_lastPlayed_OrderByInput',
    {
        'lastPlayed': 'SortOrder',
    },
    total=True
)

_PSNGame_playDuration_OrderByInput = TypedDict(
    '_PSNGame_playDuration_OrderByInput',
    {
        'playDuration': 'SortOrder',
    },
    total=True
)

_PSNGame_playTimeMinutes_OrderByInput = TypedDict(
    '_PSNGame_playTimeMinutes_OrderByInput',
    {
        'playTimeMinutes': 'SortOrder',
    },
    total=True
)

_PSNGame_isCurrentlyPlaying_OrderByInput = TypedDict(
    '_PSNGame_isCurrentlyPlaying_OrderByInput',
    {
        'isCurrentlyPlaying': 'SortOrder',
    },
    total=True
)

_PSNGame_createdAt_OrderByInput = TypedDict(
    '_PSNGame_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_PSNGame_updatedAt_OrderByInput = TypedDict(
    '_PSNGame_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_PSNGame_RelevanceInner = TypedDict(
    '_PSNGame_RelevanceInner',
    {
        'fields': 'List[PSNGameScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_PSNGame_RelevanceOrderByInput = TypedDict(
    '_PSNGame_RelevanceOrderByInput',
    {
        '_relevance': '_PSNGame_RelevanceInner',
    },
    total=True
)

PSNGameOrderByInput = Union[
    '_PSNGame_id_OrderByInput',
    '_PSNGame_profileId_OrderByInput',
    '_PSNGame_name_OrderByInput',
    '_PSNGame_titleId_OrderByInput',
    '_PSNGame_platform_OrderByInput',
    '_PSNGame_imageUrl_OrderByInput',
    '_PSNGame_playCount_OrderByInput',
    '_PSNGame_firstPlayed_OrderByInput',
    '_PSNGame_lastPlayed_OrderByInput',
    '_PSNGame_playDuration_OrderByInput',
    '_PSNGame_playTimeMinutes_OrderByInput',
    '_PSNGame_isCurrentlyPlaying_OrderByInput',
    '_PSNGame_createdAt_OrderByInput',
    '_PSNGame_updatedAt_OrderByInput',
    '_PSNGame_RelevanceOrderByInput',
]



# recursive PSNGame types
# TODO: cleanup these types



PSNGameRelationFilter = TypedDict(
    'PSNGameRelationFilter',
    {
        'is': 'PSNGameWhereInput',
        'is_not': 'PSNGameWhereInput',
    },
    total=False,
)


class PSNGameListRelationFilter(TypedDict, total=False):
    some: 'PSNGameWhereInput'
    none: 'PSNGameWhereInput'
    every: 'PSNGameWhereInput'


class PSNGameInclude(TypedDict, total=False):
    """PSNGame relational arguments"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGame']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromPSNGame']


class ForumPostIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    author: Union[bool, 'UserArgsFromPSNGame']
    comments: Union[bool, 'FindManyForumCommentArgsFromPSNGame']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNGame']
    followers: Union[bool, 'FindManyForumFollowerArgsFromPSNGame']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNGame']


class ForumPostArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']
    post: Union[bool, 'ForumPostArgsFromPSNGame']
    comment: Union[bool, 'ForumCommentArgsFromPSNGame']


class ForumReactionArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']
    post: Union[bool, 'ForumPostArgsFromPSNGame']


class ForumFollowerArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']
    post: Union[bool, 'ForumPostArgsFromPSNGame']


class ForumPostSubscriptionArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    author: Union[bool, 'UserArgsFromPSNGame']
    post: Union[bool, 'ForumPostArgsFromPSNGame']
    quotedComment: Union[bool, 'ForumCommentArgsFromPSNGame']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromPSNGame']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNGame']


class ForumCommentArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    parentLeague: Union[bool, 'LeagueArgsFromPSNGame']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromPSNGame']
    conferences: Union[bool, 'FindManyConferenceArgsFromPSNGame']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNGame']
    teams: Union[bool, 'FindManyTeamArgsFromPSNGame']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNGame']


class LeagueArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    league: Union[bool, 'LeagueArgsFromPSNGame']
    season: Union[bool, 'SeasonArgsFromPSNGame']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNGame']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNGame']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromPSNGame']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNGame']


class LeagueSeasonArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    league: Union[bool, 'LeagueArgsFromPSNGame']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNGame']


class ConferenceArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    conference: Union[bool, 'ConferenceArgsFromPSNGame']
    league: Union[bool, 'LeagueArgsFromPSNGame']
    teams: Union[bool, 'FindManyTeamArgsFromPSNGame']


class DivisionArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNGame']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromPSNGame']


class SeasonArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNGame']


class LeagueCommissionerArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNGame']


class LeagueBOGArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNGame']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromPSNGame']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromPSNGame']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromPSNGame']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromPSNGame']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNGame']


class MatchArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNGame']
    match: Union[bool, 'MatchArgsFromPSNGame']


class ClubMatchStatsArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    customKit: Union[bool, 'CustomKitArgsFromPSNGame']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromPSNGame']


class ClubMatchStatsDetailsArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNGame']


class CustomKitArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    match: Union[bool, 'MatchArgsFromPSNGame']


class ClubAggregateMatchStatsArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    match: Union[bool, 'MatchArgsFromPSNGame']


class MatchAnalyticsArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    match: Union[bool, 'MatchArgsFromPSNGame']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromPSNGame']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNGame']


class PlayerMatchArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']
    season: Union[bool, 'SeasonArgsFromPSNGame']
    contract: Union[bool, 'ContractArgsFromPSNGame']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNGame']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNGame']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNGame']
    matches: Union[bool, 'FindManyMatchArgsFromPSNGame']


class PlayerSeasonArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNGame']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromPSNGame']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromPSNGame']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromPSNGame']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNGame']


class PlayerTeamSeasonArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNGame']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNGame']


class PlayerLeagueHistoryArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromPSNGame']
    trophySummary: Union[bool, 'PSNTrophyArgsFromPSNGame']
    games: Union[bool, 'FindManyPSNGameArgsFromPSNGame']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromPSNGame']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromPSNGame']


class PSNProfileArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGame']


class PSNAvatarArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGame']


class PSNTrophyArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGame']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromPSNGame']


class PSNGameArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGame']


class PSNSyncLogArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGame']
    game: Union[bool, 'PSNGameArgsFromPSNGame']


class PSNGameTrophiesArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    league: Union[bool, 'LeagueArgsFromPSNGame']
    division: Union[bool, 'DivisionArgsFromPSNGame']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromPSNGame']
    nhlAffiliate: Union[bool, 'TeamArgsFromPSNGame']
    ahlAffiliate: Union[bool, 'TeamArgsFromPSNGame']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNGame']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNGame']


class TeamArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    team: Union[bool, 'TeamArgsFromPSNGame']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNGame']
    matches: Union[bool, 'FindManyMatchArgsFromPSNGame']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNGame']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNGame']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNGame']
    bids: Union[bool, 'FindManyBidArgsFromPSNGame']
    managers: Union[bool, 'FindManyTeamManagerArgsFromPSNGame']


class TeamSeasonArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNGame']


class TeamManagerArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    contract: Union[bool, 'ContractArgsFromPSNGame']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNGame']


class BidArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNGame']
    bids: Union[bool, 'FindManyBidArgsFromPSNGame']


class ContractArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    notifications: Union[bool, 'FindManyNotificationArgsFromPSNGame']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromPSNGame']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromPSNGame']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromPSNGame']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromPSNGame']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNGame']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromPSNGame']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromPSNGame']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromPSNGame']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNGame']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNGame']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNGame']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromPSNGame']
    psnProfile: Union[bool, 'PSNProfileArgsFromPSNGame']


class UserArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']


class EaIdHistoryArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']


class SystemHistoryArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']


class GamertagHistoryArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromPSNGame(TypedDict, total=False):
    """Relational arguments for PSNGame"""
    user: Union[bool, 'UserArgsFromPSNGame']


class NotificationArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromPSNGame(TypedDict, total=False):
    """Arguments for PSNGame"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyPSNGameArgs = FindManyPSNGameArgsFromPSNGame
FindFirstPSNGameArgs = FindManyPSNGameArgsFromPSNGame


class PSNGameWhereInput(TypedDict, total=False):
    """PSNGame arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    profileId: Union[_str, 'types.StringFilter']
    name: Union[_str, 'types.StringFilter']
    titleId: Union[_str, 'types.StringFilter']
    platform: Union[_str, 'types.StringFilter']
    imageUrl: Union[None, _str, 'types.StringFilter']
    playCount: Union[None, _int, 'types.IntFilter']
    firstPlayed: Union[None, datetime.datetime, 'types.DateTimeFilter']
    lastPlayed: Union[None, datetime.datetime, 'types.DateTimeFilter']
    playDuration: Union[None, _str, 'types.StringFilter']
    playTimeMinutes: Union[None, _int, 'types.IntFilter']
    isCurrentlyPlaying: Union[None, _bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    profile: 'PSNProfileRelationFilter'
    trophyInfo: 'PSNGameTrophiesRelationFilter'

    # should be noted that AND and NOT should be Union['PSNGameWhereInput', List['PSNGameWhereInput']]
    # but this causes mypy to hang :/
    AND: List['PSNGameWhereInput']
    OR: List['PSNGameWhereInput']
    NOT: List['PSNGameWhereInput']



# aggregate PSNGame types


class PSNGameScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PSNGame arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    profileId: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    titleId: Union[_str, 'types.StringWithAggregatesFilter']
    platform: Union[_str, 'types.StringWithAggregatesFilter']
    imageUrl: Union[_str, 'types.StringWithAggregatesFilter']
    playCount: Union[_int, 'types.IntWithAggregatesFilter']
    firstPlayed: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    lastPlayed: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    playDuration: Union[_str, 'types.StringWithAggregatesFilter']
    playTimeMinutes: Union[_int, 'types.IntWithAggregatesFilter']
    isCurrentlyPlaying: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PSNGameScalarWhereWithAggregatesInput']
    OR: List['PSNGameScalarWhereWithAggregatesInput']
    NOT: List['PSNGameScalarWhereWithAggregatesInput']



class PSNGameGroupByOutput(TypedDict, total=False):
    id: _str
    profileId: _str
    name: _str
    titleId: _str
    platform: _str
    imageUrl: _str
    playCount: _int
    firstPlayed: datetime.datetime
    lastPlayed: datetime.datetime
    playDuration: _str
    playTimeMinutes: _int
    isCurrentlyPlaying: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PSNGameSumAggregateOutput'
    _avg: 'PSNGameAvgAggregateOutput'
    _min: 'PSNGameMinAggregateOutput'
    _max: 'PSNGameMaxAggregateOutput'
    _count: 'PSNGameCountAggregateOutput'


class PSNGameAvgAggregateOutput(TypedDict, total=False):
    """PSNGame output for aggregating averages"""
    playCount: float
    playTimeMinutes: float


class PSNGameSumAggregateOutput(TypedDict, total=False):
    """PSNGame output for aggregating sums"""
    playCount: _int
    playTimeMinutes: _int


class PSNGameScalarAggregateOutput(TypedDict, total=False):
    """PSNGame output including scalar fields"""
    id: _str
    profileId: _str
    name: _str
    titleId: _str
    platform: _str
    imageUrl: _str
    playCount: _int
    firstPlayed: datetime.datetime
    lastPlayed: datetime.datetime
    playDuration: _str
    playTimeMinutes: _int
    isCurrentlyPlaying: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PSNGameMinAggregateOutput = PSNGameScalarAggregateOutput
PSNGameMaxAggregateOutput = PSNGameScalarAggregateOutput


class PSNGameMaxAggregateInput(TypedDict, total=False):
    """PSNGame input for aggregating by max"""
    id: bool
    profileId: bool
    name: bool
    titleId: bool
    platform: bool
    imageUrl: bool
    playCount: bool
    firstPlayed: bool
    lastPlayed: bool
    playDuration: bool
    playTimeMinutes: bool
    isCurrentlyPlaying: bool
    createdAt: bool
    updatedAt: bool


class PSNGameMinAggregateInput(TypedDict, total=False):
    """PSNGame input for aggregating by min"""
    id: bool
    profileId: bool
    name: bool
    titleId: bool
    platform: bool
    imageUrl: bool
    playCount: bool
    firstPlayed: bool
    lastPlayed: bool
    playDuration: bool
    playTimeMinutes: bool
    isCurrentlyPlaying: bool
    createdAt: bool
    updatedAt: bool


class PSNGameNumberAggregateInput(TypedDict, total=False):
    """PSNGame input for aggregating numbers"""
    playCount: bool
    playTimeMinutes: bool


PSNGameAvgAggregateInput = PSNGameNumberAggregateInput
PSNGameSumAggregateInput = PSNGameNumberAggregateInput


PSNGameCountAggregateInput = TypedDict(
    'PSNGameCountAggregateInput',
    {
        'id': bool,
        'profileId': bool,
        'name': bool,
        'titleId': bool,
        'platform': bool,
        'imageUrl': bool,
        'playCount': bool,
        'firstPlayed': bool,
        'lastPlayed': bool,
        'playDuration': bool,
        'playTimeMinutes': bool,
        'isCurrentlyPlaying': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PSNGameCountAggregateOutput = TypedDict(
    'PSNGameCountAggregateOutput',
    {
        'id': int,
        'profileId': int,
        'name': int,
        'titleId': int,
        'platform': int,
        'imageUrl': int,
        'playCount': int,
        'firstPlayed': int,
        'lastPlayed': int,
        'playDuration': int,
        'playTimeMinutes': int,
        'isCurrentlyPlaying': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PSNGameKeys = Literal[
    'id',
    'profileId',
    'name',
    'titleId',
    'platform',
    'imageUrl',
    'playCount',
    'firstPlayed',
    'lastPlayed',
    'playDuration',
    'playTimeMinutes',
    'isCurrentlyPlaying',
    'createdAt',
    'updatedAt',
    'profile',
    'trophyInfo',
]
PSNGameScalarFieldKeys = Literal[
    'id',
    'profileId',
    'name',
    'titleId',
    'platform',
    'imageUrl',
    'playCount',
    'firstPlayed',
    'lastPlayed',
    'playDuration',
    'playTimeMinutes',
    'isCurrentlyPlaying',
    'createdAt',
    'updatedAt',
]
PSNGameScalarFieldKeysT = TypeVar('PSNGameScalarFieldKeysT', bound=PSNGameScalarFieldKeys)

PSNGameRelationalFieldKeys = Literal[
        'profile',
        'trophyInfo',
    ]

# PSNSyncLog types

class PSNSyncLogOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PSNSyncLog create method"""
    id: _str
    profileId: _str
    status: 'enums.PSNSyncStatus'
    startedAt: datetime.datetime
    completedAt: Optional[datetime.datetime]
    errorMessage: Optional[_str]
    recordsUpdated: Optional[_int]
    profile: 'PSNProfileCreateNestedWithoutRelationsInput'


class PSNSyncLogCreateInput(PSNSyncLogOptionalCreateInput):
    """Required arguments to the PSNSyncLog create method"""
    syncType: 'enums.PSNSyncType'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PSNSyncLogOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PSNSyncLog create method, without relations"""
    id: _str
    profileId: _str
    status: 'enums.PSNSyncStatus'
    startedAt: datetime.datetime
    completedAt: Optional[datetime.datetime]
    errorMessage: Optional[_str]
    recordsUpdated: Optional[_int]


class PSNSyncLogCreateWithoutRelationsInput(PSNSyncLogOptionalCreateWithoutRelationsInput):
    """Required arguments to the PSNSyncLog create method, without relations"""
    syncType: 'enums.PSNSyncType'

class PSNSyncLogConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PSNSyncLogCreateWithoutRelationsInput'
    where: 'PSNSyncLogWhereUniqueInput'

class PSNSyncLogCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNSyncLogCreateWithoutRelationsInput'
    connect: 'PSNSyncLogWhereUniqueInput'
    connect_or_create: 'PSNSyncLogConnectOrCreateWithoutRelationsInput'


class PSNSyncLogCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PSNSyncLogCreateWithoutRelationsInput', List['PSNSyncLogCreateWithoutRelationsInput']]
    connect: Union['PSNSyncLogWhereUniqueInput', List['PSNSyncLogWhereUniqueInput']]
    connect_or_create: Union['PSNSyncLogConnectOrCreateWithoutRelationsInput', List['PSNSyncLogConnectOrCreateWithoutRelationsInput']]

_PSNSyncLogWhereUnique_id_Input = TypedDict(
    '_PSNSyncLogWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

PSNSyncLogWhereUniqueInput = _PSNSyncLogWhereUnique_id_Input


class PSNSyncLogUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    syncType: 'enums.PSNSyncType'
    status: 'enums.PSNSyncStatus'
    startedAt: datetime.datetime
    completedAt: Optional[datetime.datetime]
    errorMessage: Optional[_str]
    recordsUpdated: Optional[Union[AtomicIntInput, _int]]
    profile: 'PSNProfileUpdateOneWithoutRelationsInput'


class PSNSyncLogUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    syncType: 'enums.PSNSyncType'
    status: 'enums.PSNSyncStatus'
    startedAt: datetime.datetime
    completedAt: Optional[datetime.datetime]
    errorMessage: Optional[_str]
    recordsUpdated: Optional[Union[AtomicIntInput, _int]]


class PSNSyncLogUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PSNSyncLogCreateWithoutRelationsInput']
    connect: List['PSNSyncLogWhereUniqueInput']
    connect_or_create: List['PSNSyncLogConnectOrCreateWithoutRelationsInput']
    set: List['PSNSyncLogWhereUniqueInput']
    disconnect: List['PSNSyncLogWhereUniqueInput']
    delete: List['PSNSyncLogWhereUniqueInput']

    # TODO
    # update: List['PSNSyncLogUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PSNSyncLogUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PSNSyncLogScalarWhereInput']
    # upsert: List['PSNSyncLogUpserteWithWhereUniqueWithoutRelationsInput']


class PSNSyncLogUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNSyncLogCreateWithoutRelationsInput'
    connect: 'PSNSyncLogWhereUniqueInput'
    connect_or_create: 'PSNSyncLogConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PSNSyncLogUpdateInput'
    # upsert: 'PSNSyncLogUpsertWithoutRelationsInput'


class PSNSyncLogUpsertInput(TypedDict):
    create: 'PSNSyncLogCreateInput'
    update: 'PSNSyncLogUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PSNSyncLog_id_OrderByInput = TypedDict(
    '_PSNSyncLog_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PSNSyncLog_profileId_OrderByInput = TypedDict(
    '_PSNSyncLog_profileId_OrderByInput',
    {
        'profileId': 'SortOrder',
    },
    total=True
)

_PSNSyncLog_syncType_OrderByInput = TypedDict(
    '_PSNSyncLog_syncType_OrderByInput',
    {
        'syncType': 'SortOrder',
    },
    total=True
)

_PSNSyncLog_status_OrderByInput = TypedDict(
    '_PSNSyncLog_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_PSNSyncLog_startedAt_OrderByInput = TypedDict(
    '_PSNSyncLog_startedAt_OrderByInput',
    {
        'startedAt': 'SortOrder',
    },
    total=True
)

_PSNSyncLog_completedAt_OrderByInput = TypedDict(
    '_PSNSyncLog_completedAt_OrderByInput',
    {
        'completedAt': 'SortOrder',
    },
    total=True
)

_PSNSyncLog_errorMessage_OrderByInput = TypedDict(
    '_PSNSyncLog_errorMessage_OrderByInput',
    {
        'errorMessage': 'SortOrder',
    },
    total=True
)

_PSNSyncLog_recordsUpdated_OrderByInput = TypedDict(
    '_PSNSyncLog_recordsUpdated_OrderByInput',
    {
        'recordsUpdated': 'SortOrder',
    },
    total=True
)

_PSNSyncLog_RelevanceInner = TypedDict(
    '_PSNSyncLog_RelevanceInner',
    {
        'fields': 'List[PSNSyncLogScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_PSNSyncLog_RelevanceOrderByInput = TypedDict(
    '_PSNSyncLog_RelevanceOrderByInput',
    {
        '_relevance': '_PSNSyncLog_RelevanceInner',
    },
    total=True
)

PSNSyncLogOrderByInput = Union[
    '_PSNSyncLog_id_OrderByInput',
    '_PSNSyncLog_profileId_OrderByInput',
    '_PSNSyncLog_syncType_OrderByInput',
    '_PSNSyncLog_status_OrderByInput',
    '_PSNSyncLog_startedAt_OrderByInput',
    '_PSNSyncLog_completedAt_OrderByInput',
    '_PSNSyncLog_errorMessage_OrderByInput',
    '_PSNSyncLog_recordsUpdated_OrderByInput',
    '_PSNSyncLog_RelevanceOrderByInput',
]



# recursive PSNSyncLog types
# TODO: cleanup these types



PSNSyncLogRelationFilter = TypedDict(
    'PSNSyncLogRelationFilter',
    {
        'is': 'PSNSyncLogWhereInput',
        'is_not': 'PSNSyncLogWhereInput',
    },
    total=False,
)


class PSNSyncLogListRelationFilter(TypedDict, total=False):
    some: 'PSNSyncLogWhereInput'
    none: 'PSNSyncLogWhereInput'
    every: 'PSNSyncLogWhereInput'


class PSNSyncLogInclude(TypedDict, total=False):
    """PSNSyncLog relational arguments"""
    profile: Union[bool, 'PSNProfileArgsFromPSNSyncLog']


class ForumPostIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    author: Union[bool, 'UserArgsFromPSNSyncLog']
    comments: Union[bool, 'FindManyForumCommentArgsFromPSNSyncLog']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNSyncLog']
    followers: Union[bool, 'FindManyForumFollowerArgsFromPSNSyncLog']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNSyncLog']


class ForumPostArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']
    post: Union[bool, 'ForumPostArgsFromPSNSyncLog']
    comment: Union[bool, 'ForumCommentArgsFromPSNSyncLog']


class ForumReactionArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']
    post: Union[bool, 'ForumPostArgsFromPSNSyncLog']


class ForumFollowerArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']
    post: Union[bool, 'ForumPostArgsFromPSNSyncLog']


class ForumPostSubscriptionArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    author: Union[bool, 'UserArgsFromPSNSyncLog']
    post: Union[bool, 'ForumPostArgsFromPSNSyncLog']
    quotedComment: Union[bool, 'ForumCommentArgsFromPSNSyncLog']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromPSNSyncLog']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNSyncLog']


class ForumCommentArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    parentLeague: Union[bool, 'LeagueArgsFromPSNSyncLog']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromPSNSyncLog']
    conferences: Union[bool, 'FindManyConferenceArgsFromPSNSyncLog']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNSyncLog']
    teams: Union[bool, 'FindManyTeamArgsFromPSNSyncLog']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNSyncLog']


class LeagueArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    league: Union[bool, 'LeagueArgsFromPSNSyncLog']
    season: Union[bool, 'SeasonArgsFromPSNSyncLog']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNSyncLog']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNSyncLog']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromPSNSyncLog']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNSyncLog']


class LeagueSeasonArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    league: Union[bool, 'LeagueArgsFromPSNSyncLog']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNSyncLog']


class ConferenceArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    conference: Union[bool, 'ConferenceArgsFromPSNSyncLog']
    league: Union[bool, 'LeagueArgsFromPSNSyncLog']
    teams: Union[bool, 'FindManyTeamArgsFromPSNSyncLog']


class DivisionArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNSyncLog']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromPSNSyncLog']


class SeasonArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNSyncLog']


class LeagueCommissionerArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNSyncLog']


class LeagueBOGArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNSyncLog']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromPSNSyncLog']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromPSNSyncLog']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromPSNSyncLog']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromPSNSyncLog']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNSyncLog']


class MatchArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNSyncLog']
    match: Union[bool, 'MatchArgsFromPSNSyncLog']


class ClubMatchStatsArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    customKit: Union[bool, 'CustomKitArgsFromPSNSyncLog']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromPSNSyncLog']


class ClubMatchStatsDetailsArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNSyncLog']


class CustomKitArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    match: Union[bool, 'MatchArgsFromPSNSyncLog']


class ClubAggregateMatchStatsArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    match: Union[bool, 'MatchArgsFromPSNSyncLog']


class MatchAnalyticsArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    match: Union[bool, 'MatchArgsFromPSNSyncLog']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromPSNSyncLog']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNSyncLog']


class PlayerMatchArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']
    season: Union[bool, 'SeasonArgsFromPSNSyncLog']
    contract: Union[bool, 'ContractArgsFromPSNSyncLog']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNSyncLog']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNSyncLog']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNSyncLog']
    matches: Union[bool, 'FindManyMatchArgsFromPSNSyncLog']


class PlayerSeasonArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNSyncLog']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromPSNSyncLog']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromPSNSyncLog']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromPSNSyncLog']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNSyncLog']


class PlayerTeamSeasonArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNSyncLog']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNSyncLog']


class PlayerLeagueHistoryArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromPSNSyncLog']
    trophySummary: Union[bool, 'PSNTrophyArgsFromPSNSyncLog']
    games: Union[bool, 'FindManyPSNGameArgsFromPSNSyncLog']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromPSNSyncLog']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromPSNSyncLog']


class PSNProfileArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    profile: Union[bool, 'PSNProfileArgsFromPSNSyncLog']


class PSNAvatarArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    profile: Union[bool, 'PSNProfileArgsFromPSNSyncLog']


class PSNTrophyArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    profile: Union[bool, 'PSNProfileArgsFromPSNSyncLog']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromPSNSyncLog']


class PSNGameArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    profile: Union[bool, 'PSNProfileArgsFromPSNSyncLog']


class PSNSyncLogArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    profile: Union[bool, 'PSNProfileArgsFromPSNSyncLog']
    game: Union[bool, 'PSNGameArgsFromPSNSyncLog']


class PSNGameTrophiesArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    league: Union[bool, 'LeagueArgsFromPSNSyncLog']
    division: Union[bool, 'DivisionArgsFromPSNSyncLog']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromPSNSyncLog']
    nhlAffiliate: Union[bool, 'TeamArgsFromPSNSyncLog']
    ahlAffiliate: Union[bool, 'TeamArgsFromPSNSyncLog']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNSyncLog']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNSyncLog']


class TeamArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    team: Union[bool, 'TeamArgsFromPSNSyncLog']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNSyncLog']
    matches: Union[bool, 'FindManyMatchArgsFromPSNSyncLog']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNSyncLog']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNSyncLog']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNSyncLog']
    bids: Union[bool, 'FindManyBidArgsFromPSNSyncLog']
    managers: Union[bool, 'FindManyTeamManagerArgsFromPSNSyncLog']


class TeamSeasonArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNSyncLog']


class TeamManagerArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    contract: Union[bool, 'ContractArgsFromPSNSyncLog']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNSyncLog']


class BidArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNSyncLog']
    bids: Union[bool, 'FindManyBidArgsFromPSNSyncLog']


class ContractArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    notifications: Union[bool, 'FindManyNotificationArgsFromPSNSyncLog']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromPSNSyncLog']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromPSNSyncLog']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromPSNSyncLog']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromPSNSyncLog']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNSyncLog']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromPSNSyncLog']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromPSNSyncLog']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromPSNSyncLog']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNSyncLog']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNSyncLog']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNSyncLog']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromPSNSyncLog']
    psnProfile: Union[bool, 'PSNProfileArgsFromPSNSyncLog']


class UserArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']


class EaIdHistoryArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']


class SystemHistoryArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']


class GamertagHistoryArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromPSNSyncLog(TypedDict, total=False):
    """Relational arguments for PSNSyncLog"""
    user: Union[bool, 'UserArgsFromPSNSyncLog']


class NotificationArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromPSNSyncLog(TypedDict, total=False):
    """Arguments for PSNSyncLog"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyPSNSyncLogArgs = FindManyPSNSyncLogArgsFromPSNSyncLog
FindFirstPSNSyncLogArgs = FindManyPSNSyncLogArgsFromPSNSyncLog


class PSNSyncLogWhereInput(TypedDict, total=False):
    """PSNSyncLog arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    profileId: Union[_str, 'types.StringFilter']
    syncType: 'enums.PSNSyncType'
    status: 'enums.PSNSyncStatus'
    startedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    completedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    errorMessage: Union[None, _str, 'types.StringFilter']
    recordsUpdated: Union[None, _int, 'types.IntFilter']
    profile: 'PSNProfileRelationFilter'

    # should be noted that AND and NOT should be Union['PSNSyncLogWhereInput', List['PSNSyncLogWhereInput']]
    # but this causes mypy to hang :/
    AND: List['PSNSyncLogWhereInput']
    OR: List['PSNSyncLogWhereInput']
    NOT: List['PSNSyncLogWhereInput']



# aggregate PSNSyncLog types


class PSNSyncLogScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PSNSyncLog arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    profileId: Union[_str, 'types.StringWithAggregatesFilter']
    syncType: 'enums.PSNSyncType'
    status: 'enums.PSNSyncStatus'
    startedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    completedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    errorMessage: Union[_str, 'types.StringWithAggregatesFilter']
    recordsUpdated: Union[_int, 'types.IntWithAggregatesFilter']

    AND: List['PSNSyncLogScalarWhereWithAggregatesInput']
    OR: List['PSNSyncLogScalarWhereWithAggregatesInput']
    NOT: List['PSNSyncLogScalarWhereWithAggregatesInput']



class PSNSyncLogGroupByOutput(TypedDict, total=False):
    id: _str
    profileId: _str
    syncType: 'enums.PSNSyncType'
    status: 'enums.PSNSyncStatus'
    startedAt: datetime.datetime
    completedAt: datetime.datetime
    errorMessage: _str
    recordsUpdated: _int
    _sum: 'PSNSyncLogSumAggregateOutput'
    _avg: 'PSNSyncLogAvgAggregateOutput'
    _min: 'PSNSyncLogMinAggregateOutput'
    _max: 'PSNSyncLogMaxAggregateOutput'
    _count: 'PSNSyncLogCountAggregateOutput'


class PSNSyncLogAvgAggregateOutput(TypedDict, total=False):
    """PSNSyncLog output for aggregating averages"""
    recordsUpdated: float


class PSNSyncLogSumAggregateOutput(TypedDict, total=False):
    """PSNSyncLog output for aggregating sums"""
    recordsUpdated: _int


class PSNSyncLogScalarAggregateOutput(TypedDict, total=False):
    """PSNSyncLog output including scalar fields"""
    id: _str
    profileId: _str
    syncType: 'enums.PSNSyncType'
    status: 'enums.PSNSyncStatus'
    startedAt: datetime.datetime
    completedAt: datetime.datetime
    errorMessage: _str
    recordsUpdated: _int


PSNSyncLogMinAggregateOutput = PSNSyncLogScalarAggregateOutput
PSNSyncLogMaxAggregateOutput = PSNSyncLogScalarAggregateOutput


class PSNSyncLogMaxAggregateInput(TypedDict, total=False):
    """PSNSyncLog input for aggregating by max"""
    id: bool
    profileId: bool
    syncType: bool
    status: bool
    startedAt: bool
    completedAt: bool
    errorMessage: bool
    recordsUpdated: bool


class PSNSyncLogMinAggregateInput(TypedDict, total=False):
    """PSNSyncLog input for aggregating by min"""
    id: bool
    profileId: bool
    syncType: bool
    status: bool
    startedAt: bool
    completedAt: bool
    errorMessage: bool
    recordsUpdated: bool


class PSNSyncLogNumberAggregateInput(TypedDict, total=False):
    """PSNSyncLog input for aggregating numbers"""
    recordsUpdated: bool


PSNSyncLogAvgAggregateInput = PSNSyncLogNumberAggregateInput
PSNSyncLogSumAggregateInput = PSNSyncLogNumberAggregateInput


PSNSyncLogCountAggregateInput = TypedDict(
    'PSNSyncLogCountAggregateInput',
    {
        'id': bool,
        'profileId': bool,
        'syncType': bool,
        'status': bool,
        'startedAt': bool,
        'completedAt': bool,
        'errorMessage': bool,
        'recordsUpdated': bool,
        '_all': bool,
    },
    total=False,
)

PSNSyncLogCountAggregateOutput = TypedDict(
    'PSNSyncLogCountAggregateOutput',
    {
        'id': int,
        'profileId': int,
        'syncType': int,
        'status': int,
        'startedAt': int,
        'completedAt': int,
        'errorMessage': int,
        'recordsUpdated': int,
        '_all': int,
    },
    total=False,
)


PSNSyncLogKeys = Literal[
    'id',
    'profileId',
    'syncType',
    'status',
    'startedAt',
    'completedAt',
    'errorMessage',
    'recordsUpdated',
    'profile',
]
PSNSyncLogScalarFieldKeys = Literal[
    'id',
    'profileId',
    'syncType',
    'status',
    'startedAt',
    'completedAt',
    'errorMessage',
    'recordsUpdated',
]
PSNSyncLogScalarFieldKeysT = TypeVar('PSNSyncLogScalarFieldKeysT', bound=PSNSyncLogScalarFieldKeys)

PSNSyncLogRelationalFieldKeys = Literal[
        'profile',
    ]

# PSNGameTrophies types

class PSNGameTrophiesOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the PSNGameTrophies create method"""
    id: _str
    profileId: _str
    gameId: _str
    trophiesEarned: _int
    trophiesTotal: _int
    progress: Optional[_int]
    platinumEarned: Optional[_int]
    goldEarned: Optional[_int]
    silverEarned: Optional[_int]
    bronzeEarned: Optional[_int]
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    profile: 'PSNProfileCreateNestedWithoutRelationsInput'
    game: 'PSNGameCreateNestedWithoutRelationsInput'


class PSNGameTrophiesCreateInput(PSNGameTrophiesOptionalCreateInput):
    """Required arguments to the PSNGameTrophies create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class PSNGameTrophiesOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the PSNGameTrophies create method, without relations"""
    id: _str
    profileId: _str
    gameId: _str
    trophiesEarned: _int
    trophiesTotal: _int
    progress: Optional[_int]
    platinumEarned: Optional[_int]
    goldEarned: Optional[_int]
    silverEarned: Optional[_int]
    bronzeEarned: Optional[_int]
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PSNGameTrophiesCreateWithoutRelationsInput(PSNGameTrophiesOptionalCreateWithoutRelationsInput):
    """Required arguments to the PSNGameTrophies create method, without relations"""

class PSNGameTrophiesConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'PSNGameTrophiesCreateWithoutRelationsInput'
    where: 'PSNGameTrophiesWhereUniqueInput'

class PSNGameTrophiesCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNGameTrophiesCreateWithoutRelationsInput'
    connect: 'PSNGameTrophiesWhereUniqueInput'
    connect_or_create: 'PSNGameTrophiesConnectOrCreateWithoutRelationsInput'


class PSNGameTrophiesCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['PSNGameTrophiesCreateWithoutRelationsInput', List['PSNGameTrophiesCreateWithoutRelationsInput']]
    connect: Union['PSNGameTrophiesWhereUniqueInput', List['PSNGameTrophiesWhereUniqueInput']]
    connect_or_create: Union['PSNGameTrophiesConnectOrCreateWithoutRelationsInput', List['PSNGameTrophiesConnectOrCreateWithoutRelationsInput']]

_PSNGameTrophiesWhereUnique_id_Input = TypedDict(
    '_PSNGameTrophiesWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_PSNGameTrophiesWhereUnique_gameId_Input = TypedDict(
    '_PSNGameTrophiesWhereUnique_gameId_Input',
    {
        'gameId': '_str',
    },
    total=True
)

PSNGameTrophiesWhereUniqueInput = Union[
    '_PSNGameTrophiesWhereUnique_id_Input',
    '_PSNGameTrophiesWhereUnique_gameId_Input',
]


class PSNGameTrophiesUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    trophiesEarned: Union[AtomicIntInput, _int]
    trophiesTotal: Union[AtomicIntInput, _int]
    progress: Optional[Union[AtomicIntInput, _int]]
    platinumEarned: Optional[Union[AtomicIntInput, _int]]
    goldEarned: Optional[Union[AtomicIntInput, _int]]
    silverEarned: Optional[Union[AtomicIntInput, _int]]
    bronzeEarned: Optional[Union[AtomicIntInput, _int]]
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    profile: 'PSNProfileUpdateOneWithoutRelationsInput'
    game: 'PSNGameUpdateOneWithoutRelationsInput'


class PSNGameTrophiesUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    trophiesEarned: Union[AtomicIntInput, _int]
    trophiesTotal: Union[AtomicIntInput, _int]
    progress: Optional[Union[AtomicIntInput, _int]]
    platinumEarned: Optional[Union[AtomicIntInput, _int]]
    goldEarned: Optional[Union[AtomicIntInput, _int]]
    silverEarned: Optional[Union[AtomicIntInput, _int]]
    bronzeEarned: Optional[Union[AtomicIntInput, _int]]
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class PSNGameTrophiesUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['PSNGameTrophiesCreateWithoutRelationsInput']
    connect: List['PSNGameTrophiesWhereUniqueInput']
    connect_or_create: List['PSNGameTrophiesConnectOrCreateWithoutRelationsInput']
    set: List['PSNGameTrophiesWhereUniqueInput']
    disconnect: List['PSNGameTrophiesWhereUniqueInput']
    delete: List['PSNGameTrophiesWhereUniqueInput']

    # TODO
    # update: List['PSNGameTrophiesUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['PSNGameTrophiesUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['PSNGameTrophiesScalarWhereInput']
    # upsert: List['PSNGameTrophiesUpserteWithWhereUniqueWithoutRelationsInput']


class PSNGameTrophiesUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'PSNGameTrophiesCreateWithoutRelationsInput'
    connect: 'PSNGameTrophiesWhereUniqueInput'
    connect_or_create: 'PSNGameTrophiesConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'PSNGameTrophiesUpdateInput'
    # upsert: 'PSNGameTrophiesUpsertWithoutRelationsInput'


class PSNGameTrophiesUpsertInput(TypedDict):
    create: 'PSNGameTrophiesCreateInput'
    update: 'PSNGameTrophiesUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_PSNGameTrophies_id_OrderByInput = TypedDict(
    '_PSNGameTrophies_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_profileId_OrderByInput = TypedDict(
    '_PSNGameTrophies_profileId_OrderByInput',
    {
        'profileId': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_gameId_OrderByInput = TypedDict(
    '_PSNGameTrophies_gameId_OrderByInput',
    {
        'gameId': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_trophiesEarned_OrderByInput = TypedDict(
    '_PSNGameTrophies_trophiesEarned_OrderByInput',
    {
        'trophiesEarned': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_trophiesTotal_OrderByInput = TypedDict(
    '_PSNGameTrophies_trophiesTotal_OrderByInput',
    {
        'trophiesTotal': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_progress_OrderByInput = TypedDict(
    '_PSNGameTrophies_progress_OrderByInput',
    {
        'progress': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_platinumEarned_OrderByInput = TypedDict(
    '_PSNGameTrophies_platinumEarned_OrderByInput',
    {
        'platinumEarned': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_goldEarned_OrderByInput = TypedDict(
    '_PSNGameTrophies_goldEarned_OrderByInput',
    {
        'goldEarned': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_silverEarned_OrderByInput = TypedDict(
    '_PSNGameTrophies_silverEarned_OrderByInput',
    {
        'silverEarned': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_bronzeEarned_OrderByInput = TypedDict(
    '_PSNGameTrophies_bronzeEarned_OrderByInput',
    {
        'bronzeEarned': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_lastUpdated_OrderByInput = TypedDict(
    '_PSNGameTrophies_lastUpdated_OrderByInput',
    {
        'lastUpdated': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_createdAt_OrderByInput = TypedDict(
    '_PSNGameTrophies_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_updatedAt_OrderByInput = TypedDict(
    '_PSNGameTrophies_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_RelevanceInner = TypedDict(
    '_PSNGameTrophies_RelevanceInner',
    {
        'fields': 'List[PSNGameTrophiesScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_PSNGameTrophies_RelevanceOrderByInput = TypedDict(
    '_PSNGameTrophies_RelevanceOrderByInput',
    {
        '_relevance': '_PSNGameTrophies_RelevanceInner',
    },
    total=True
)

PSNGameTrophiesOrderByInput = Union[
    '_PSNGameTrophies_id_OrderByInput',
    '_PSNGameTrophies_profileId_OrderByInput',
    '_PSNGameTrophies_gameId_OrderByInput',
    '_PSNGameTrophies_trophiesEarned_OrderByInput',
    '_PSNGameTrophies_trophiesTotal_OrderByInput',
    '_PSNGameTrophies_progress_OrderByInput',
    '_PSNGameTrophies_platinumEarned_OrderByInput',
    '_PSNGameTrophies_goldEarned_OrderByInput',
    '_PSNGameTrophies_silverEarned_OrderByInput',
    '_PSNGameTrophies_bronzeEarned_OrderByInput',
    '_PSNGameTrophies_lastUpdated_OrderByInput',
    '_PSNGameTrophies_createdAt_OrderByInput',
    '_PSNGameTrophies_updatedAt_OrderByInput',
    '_PSNGameTrophies_RelevanceOrderByInput',
]



# recursive PSNGameTrophies types
# TODO: cleanup these types



PSNGameTrophiesRelationFilter = TypedDict(
    'PSNGameTrophiesRelationFilter',
    {
        'is': 'PSNGameTrophiesWhereInput',
        'is_not': 'PSNGameTrophiesWhereInput',
    },
    total=False,
)


class PSNGameTrophiesListRelationFilter(TypedDict, total=False):
    some: 'PSNGameTrophiesWhereInput'
    none: 'PSNGameTrophiesWhereInput'
    every: 'PSNGameTrophiesWhereInput'


class PSNGameTrophiesInclude(TypedDict, total=False):
    """PSNGameTrophies relational arguments"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGameTrophies']
    game: Union[bool, 'PSNGameArgsFromPSNGameTrophies']


class ForumPostIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    author: Union[bool, 'UserArgsFromPSNGameTrophies']
    comments: Union[bool, 'FindManyForumCommentArgsFromPSNGameTrophies']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNGameTrophies']
    followers: Union[bool, 'FindManyForumFollowerArgsFromPSNGameTrophies']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNGameTrophies']


class ForumPostArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']
    post: Union[bool, 'ForumPostArgsFromPSNGameTrophies']
    comment: Union[bool, 'ForumCommentArgsFromPSNGameTrophies']


class ForumReactionArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']
    post: Union[bool, 'ForumPostArgsFromPSNGameTrophies']


class ForumFollowerArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']
    post: Union[bool, 'ForumPostArgsFromPSNGameTrophies']


class ForumPostSubscriptionArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    author: Union[bool, 'UserArgsFromPSNGameTrophies']
    post: Union[bool, 'ForumPostArgsFromPSNGameTrophies']
    quotedComment: Union[bool, 'ForumCommentArgsFromPSNGameTrophies']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromPSNGameTrophies']
    reactions: Union[bool, 'FindManyForumReactionArgsFromPSNGameTrophies']


class ForumCommentArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    parentLeague: Union[bool, 'LeagueArgsFromPSNGameTrophies']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromPSNGameTrophies']
    conferences: Union[bool, 'FindManyConferenceArgsFromPSNGameTrophies']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNGameTrophies']
    teams: Union[bool, 'FindManyTeamArgsFromPSNGameTrophies']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNGameTrophies']


class LeagueArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    league: Union[bool, 'LeagueArgsFromPSNGameTrophies']
    season: Union[bool, 'SeasonArgsFromPSNGameTrophies']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNGameTrophies']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNGameTrophies']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromPSNGameTrophies']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNGameTrophies']


class LeagueSeasonArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    league: Union[bool, 'LeagueArgsFromPSNGameTrophies']
    divisions: Union[bool, 'FindManyDivisionArgsFromPSNGameTrophies']


class ConferenceArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    conference: Union[bool, 'ConferenceArgsFromPSNGameTrophies']
    league: Union[bool, 'LeagueArgsFromPSNGameTrophies']
    teams: Union[bool, 'FindManyTeamArgsFromPSNGameTrophies']


class DivisionArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromPSNGameTrophies']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromPSNGameTrophies']


class SeasonArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNGameTrophies']


class LeagueCommissionerArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNGameTrophies']


class LeagueBOGArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNGameTrophies']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromPSNGameTrophies']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromPSNGameTrophies']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromPSNGameTrophies']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromPSNGameTrophies']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNGameTrophies']


class MatchArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNGameTrophies']
    match: Union[bool, 'MatchArgsFromPSNGameTrophies']


class ClubMatchStatsArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    customKit: Union[bool, 'CustomKitArgsFromPSNGameTrophies']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromPSNGameTrophies']


class ClubMatchStatsDetailsArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromPSNGameTrophies']


class CustomKitArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    match: Union[bool, 'MatchArgsFromPSNGameTrophies']


class ClubAggregateMatchStatsArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    match: Union[bool, 'MatchArgsFromPSNGameTrophies']


class MatchAnalyticsArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    match: Union[bool, 'MatchArgsFromPSNGameTrophies']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromPSNGameTrophies']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNGameTrophies']


class PlayerMatchArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']
    season: Union[bool, 'SeasonArgsFromPSNGameTrophies']
    contract: Union[bool, 'ContractArgsFromPSNGameTrophies']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNGameTrophies']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromPSNGameTrophies']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNGameTrophies']
    matches: Union[bool, 'FindManyMatchArgsFromPSNGameTrophies']


class PlayerSeasonArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNGameTrophies']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromPSNGameTrophies']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromPSNGameTrophies']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromPSNGameTrophies']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromPSNGameTrophies']


class PlayerTeamSeasonArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNGameTrophies']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNGameTrophies']


class PlayerLeagueHistoryArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromPSNGameTrophies']
    trophySummary: Union[bool, 'PSNTrophyArgsFromPSNGameTrophies']
    games: Union[bool, 'FindManyPSNGameArgsFromPSNGameTrophies']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromPSNGameTrophies']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromPSNGameTrophies']


class PSNProfileArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGameTrophies']


class PSNAvatarArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGameTrophies']


class PSNTrophyArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGameTrophies']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromPSNGameTrophies']


class PSNGameArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGameTrophies']


class PSNSyncLogArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    profile: Union[bool, 'PSNProfileArgsFromPSNGameTrophies']
    game: Union[bool, 'PSNGameArgsFromPSNGameTrophies']


class PSNGameTrophiesArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    league: Union[bool, 'LeagueArgsFromPSNGameTrophies']
    division: Union[bool, 'DivisionArgsFromPSNGameTrophies']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromPSNGameTrophies']
    nhlAffiliate: Union[bool, 'TeamArgsFromPSNGameTrophies']
    ahlAffiliate: Union[bool, 'TeamArgsFromPSNGameTrophies']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNGameTrophies']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromPSNGameTrophies']


class TeamArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    team: Union[bool, 'TeamArgsFromPSNGameTrophies']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromPSNGameTrophies']
    matches: Union[bool, 'FindManyMatchArgsFromPSNGameTrophies']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNGameTrophies']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNGameTrophies']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromPSNGameTrophies']
    bids: Union[bool, 'FindManyBidArgsFromPSNGameTrophies']
    managers: Union[bool, 'FindManyTeamManagerArgsFromPSNGameTrophies']


class TeamSeasonArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNGameTrophies']


class TeamManagerArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    contract: Union[bool, 'ContractArgsFromPSNGameTrophies']
    teamSeason: Union[bool, 'TeamSeasonArgsFromPSNGameTrophies']


class BidArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromPSNGameTrophies']
    bids: Union[bool, 'FindManyBidArgsFromPSNGameTrophies']


class ContractArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    notifications: Union[bool, 'FindManyNotificationArgsFromPSNGameTrophies']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromPSNGameTrophies']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromPSNGameTrophies']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromPSNGameTrophies']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromPSNGameTrophies']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromPSNGameTrophies']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromPSNGameTrophies']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromPSNGameTrophies']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromPSNGameTrophies']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromPSNGameTrophies']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromPSNGameTrophies']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromPSNGameTrophies']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromPSNGameTrophies']
    psnProfile: Union[bool, 'PSNProfileArgsFromPSNGameTrophies']


class UserArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']


class EaIdHistoryArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']


class SystemHistoryArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']


class GamertagHistoryArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromPSNGameTrophies(TypedDict, total=False):
    """Relational arguments for PSNGameTrophies"""
    user: Union[bool, 'UserArgsFromPSNGameTrophies']


class NotificationArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromPSNGameTrophies(TypedDict, total=False):
    """Arguments for PSNGameTrophies"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyPSNGameTrophiesArgs = FindManyPSNGameTrophiesArgsFromPSNGameTrophies
FindFirstPSNGameTrophiesArgs = FindManyPSNGameTrophiesArgsFromPSNGameTrophies


class PSNGameTrophiesWhereInput(TypedDict, total=False):
    """PSNGameTrophies arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    profileId: Union[_str, 'types.StringFilter']
    gameId: Union[_str, 'types.StringFilter']
    trophiesEarned: Union[_int, 'types.IntFilter']
    trophiesTotal: Union[_int, 'types.IntFilter']
    progress: Union[None, _int, 'types.IntFilter']
    platinumEarned: Union[None, _int, 'types.IntFilter']
    goldEarned: Union[None, _int, 'types.IntFilter']
    silverEarned: Union[None, _int, 'types.IntFilter']
    bronzeEarned: Union[None, _int, 'types.IntFilter']
    lastUpdated: Union[datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    profile: 'PSNProfileRelationFilter'
    game: 'PSNGameRelationFilter'

    # should be noted that AND and NOT should be Union['PSNGameTrophiesWhereInput', List['PSNGameTrophiesWhereInput']]
    # but this causes mypy to hang :/
    AND: List['PSNGameTrophiesWhereInput']
    OR: List['PSNGameTrophiesWhereInput']
    NOT: List['PSNGameTrophiesWhereInput']



# aggregate PSNGameTrophies types


class PSNGameTrophiesScalarWhereWithAggregatesInput(TypedDict, total=False):
    """PSNGameTrophies arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    profileId: Union[_str, 'types.StringWithAggregatesFilter']
    gameId: Union[_str, 'types.StringWithAggregatesFilter']
    trophiesEarned: Union[_int, 'types.IntWithAggregatesFilter']
    trophiesTotal: Union[_int, 'types.IntWithAggregatesFilter']
    progress: Union[_int, 'types.IntWithAggregatesFilter']
    platinumEarned: Union[_int, 'types.IntWithAggregatesFilter']
    goldEarned: Union[_int, 'types.IntWithAggregatesFilter']
    silverEarned: Union[_int, 'types.IntWithAggregatesFilter']
    bronzeEarned: Union[_int, 'types.IntWithAggregatesFilter']
    lastUpdated: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['PSNGameTrophiesScalarWhereWithAggregatesInput']
    OR: List['PSNGameTrophiesScalarWhereWithAggregatesInput']
    NOT: List['PSNGameTrophiesScalarWhereWithAggregatesInput']



class PSNGameTrophiesGroupByOutput(TypedDict, total=False):
    id: _str
    profileId: _str
    gameId: _str
    trophiesEarned: _int
    trophiesTotal: _int
    progress: _int
    platinumEarned: _int
    goldEarned: _int
    silverEarned: _int
    bronzeEarned: _int
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'PSNGameTrophiesSumAggregateOutput'
    _avg: 'PSNGameTrophiesAvgAggregateOutput'
    _min: 'PSNGameTrophiesMinAggregateOutput'
    _max: 'PSNGameTrophiesMaxAggregateOutput'
    _count: 'PSNGameTrophiesCountAggregateOutput'


class PSNGameTrophiesAvgAggregateOutput(TypedDict, total=False):
    """PSNGameTrophies output for aggregating averages"""
    trophiesEarned: float
    trophiesTotal: float
    progress: float
    platinumEarned: float
    goldEarned: float
    silverEarned: float
    bronzeEarned: float


class PSNGameTrophiesSumAggregateOutput(TypedDict, total=False):
    """PSNGameTrophies output for aggregating sums"""
    trophiesEarned: _int
    trophiesTotal: _int
    progress: _int
    platinumEarned: _int
    goldEarned: _int
    silverEarned: _int
    bronzeEarned: _int


class PSNGameTrophiesScalarAggregateOutput(TypedDict, total=False):
    """PSNGameTrophies output including scalar fields"""
    id: _str
    profileId: _str
    gameId: _str
    trophiesEarned: _int
    trophiesTotal: _int
    progress: _int
    platinumEarned: _int
    goldEarned: _int
    silverEarned: _int
    bronzeEarned: _int
    lastUpdated: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


PSNGameTrophiesMinAggregateOutput = PSNGameTrophiesScalarAggregateOutput
PSNGameTrophiesMaxAggregateOutput = PSNGameTrophiesScalarAggregateOutput


class PSNGameTrophiesMaxAggregateInput(TypedDict, total=False):
    """PSNGameTrophies input for aggregating by max"""
    id: bool
    profileId: bool
    gameId: bool
    trophiesEarned: bool
    trophiesTotal: bool
    progress: bool
    platinumEarned: bool
    goldEarned: bool
    silverEarned: bool
    bronzeEarned: bool
    lastUpdated: bool
    createdAt: bool
    updatedAt: bool


class PSNGameTrophiesMinAggregateInput(TypedDict, total=False):
    """PSNGameTrophies input for aggregating by min"""
    id: bool
    profileId: bool
    gameId: bool
    trophiesEarned: bool
    trophiesTotal: bool
    progress: bool
    platinumEarned: bool
    goldEarned: bool
    silverEarned: bool
    bronzeEarned: bool
    lastUpdated: bool
    createdAt: bool
    updatedAt: bool


class PSNGameTrophiesNumberAggregateInput(TypedDict, total=False):
    """PSNGameTrophies input for aggregating numbers"""
    trophiesEarned: bool
    trophiesTotal: bool
    progress: bool
    platinumEarned: bool
    goldEarned: bool
    silverEarned: bool
    bronzeEarned: bool


PSNGameTrophiesAvgAggregateInput = PSNGameTrophiesNumberAggregateInput
PSNGameTrophiesSumAggregateInput = PSNGameTrophiesNumberAggregateInput


PSNGameTrophiesCountAggregateInput = TypedDict(
    'PSNGameTrophiesCountAggregateInput',
    {
        'id': bool,
        'profileId': bool,
        'gameId': bool,
        'trophiesEarned': bool,
        'trophiesTotal': bool,
        'progress': bool,
        'platinumEarned': bool,
        'goldEarned': bool,
        'silverEarned': bool,
        'bronzeEarned': bool,
        'lastUpdated': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

PSNGameTrophiesCountAggregateOutput = TypedDict(
    'PSNGameTrophiesCountAggregateOutput',
    {
        'id': int,
        'profileId': int,
        'gameId': int,
        'trophiesEarned': int,
        'trophiesTotal': int,
        'progress': int,
        'platinumEarned': int,
        'goldEarned': int,
        'silverEarned': int,
        'bronzeEarned': int,
        'lastUpdated': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


PSNGameTrophiesKeys = Literal[
    'id',
    'profileId',
    'gameId',
    'trophiesEarned',
    'trophiesTotal',
    'progress',
    'platinumEarned',
    'goldEarned',
    'silverEarned',
    'bronzeEarned',
    'lastUpdated',
    'createdAt',
    'updatedAt',
    'profile',
    'game',
]
PSNGameTrophiesScalarFieldKeys = Literal[
    'id',
    'profileId',
    'gameId',
    'trophiesEarned',
    'trophiesTotal',
    'progress',
    'platinumEarned',
    'goldEarned',
    'silverEarned',
    'bronzeEarned',
    'lastUpdated',
    'createdAt',
    'updatedAt',
]
PSNGameTrophiesScalarFieldKeysT = TypeVar('PSNGameTrophiesScalarFieldKeysT', bound=PSNGameTrophiesScalarFieldKeys)

PSNGameTrophiesRelationalFieldKeys = Literal[
        'profile',
        'game',
    ]

# Team types

class TeamOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Team create method"""
    id: _str
    logoPath: Optional[_str]
    leagueId: _str
    league: 'LeagueCreateNestedWithoutRelationsInput'
    divisionId: Optional[_str]
    division: 'DivisionCreateNestedWithoutRelationsInput'
    primaryColor: Optional[_str]
    secondaryColor: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    seasons: 'TeamSeasonCreateManyNestedWithoutRelationsInput'
    nhlAffiliateId: Optional[_str]
    ahlAffiliateId: Optional[_str]
    nhlAffiliate: 'TeamCreateNestedWithoutRelationsInput'
    ahlAffiliate: 'TeamCreateNestedWithoutRelationsInput'
    ahlAffiliates: 'TeamCreateManyNestedWithoutRelationsInput'
    echlAffiliates: 'TeamCreateManyNestedWithoutRelationsInput'


class TeamCreateInput(TeamOptionalCreateInput):
    """Required arguments to the Team create method"""
    eaClubId: _str
    eaClubName: _str
    fullTeamName: _str
    teamAbbreviation: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TeamOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Team create method, without relations"""
    id: _str
    logoPath: Optional[_str]
    leagueId: _str
    divisionId: Optional[_str]
    primaryColor: Optional[_str]
    secondaryColor: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    nhlAffiliateId: Optional[_str]
    ahlAffiliateId: Optional[_str]


class TeamCreateWithoutRelationsInput(TeamOptionalCreateWithoutRelationsInput):
    """Required arguments to the Team create method, without relations"""
    eaClubId: _str
    eaClubName: _str
    fullTeamName: _str
    teamAbbreviation: _str

class TeamConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TeamCreateWithoutRelationsInput'
    where: 'TeamWhereUniqueInput'

class TeamCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TeamCreateWithoutRelationsInput'
    connect: 'TeamWhereUniqueInput'
    connect_or_create: 'TeamConnectOrCreateWithoutRelationsInput'


class TeamCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TeamCreateWithoutRelationsInput', List['TeamCreateWithoutRelationsInput']]
    connect: Union['TeamWhereUniqueInput', List['TeamWhereUniqueInput']]
    connect_or_create: Union['TeamConnectOrCreateWithoutRelationsInput', List['TeamConnectOrCreateWithoutRelationsInput']]

_TeamWhereUnique_id_Input = TypedDict(
    '_TeamWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_TeamCompoundteamAbbreviation_leagueIdKeyInner = TypedDict(
    '_TeamCompoundteamAbbreviation_leagueIdKeyInner',
    {
        'teamAbbreviation': '_str',
        'leagueId': '_str',
    },
    total=True
)

_TeamCompoundteamAbbreviation_leagueIdKey = TypedDict(
    '_TeamCompoundteamAbbreviation_leagueIdKey',
    {
        'teamAbbreviation_leagueId': '_TeamCompoundteamAbbreviation_leagueIdKeyInner',
    },
    total=True
)

TeamWhereUniqueInput = Union[
    '_TeamWhereUnique_id_Input',
    '_TeamCompoundteamAbbreviation_leagueIdKey',
]


class TeamUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    eaClubId: _str
    eaClubName: _str
    fullTeamName: _str
    teamAbbreviation: _str
    logoPath: Optional[_str]
    league: 'LeagueUpdateOneWithoutRelationsInput'
    division: 'DivisionUpdateOneWithoutRelationsInput'
    primaryColor: Optional[_str]
    secondaryColor: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    seasons: 'TeamSeasonUpdateManyWithoutRelationsInput'
    nhlAffiliate: 'TeamUpdateOneWithoutRelationsInput'
    ahlAffiliate: 'TeamUpdateOneWithoutRelationsInput'
    ahlAffiliates: 'TeamUpdateManyWithoutRelationsInput'
    echlAffiliates: 'TeamUpdateManyWithoutRelationsInput'


class TeamUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    eaClubId: _str
    eaClubName: _str
    fullTeamName: _str
    teamAbbreviation: _str
    logoPath: Optional[_str]
    primaryColor: Optional[_str]
    secondaryColor: Optional[_str]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class TeamUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TeamCreateWithoutRelationsInput']
    connect: List['TeamWhereUniqueInput']
    connect_or_create: List['TeamConnectOrCreateWithoutRelationsInput']
    set: List['TeamWhereUniqueInput']
    disconnect: List['TeamWhereUniqueInput']
    delete: List['TeamWhereUniqueInput']

    # TODO
    # update: List['TeamUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TeamUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TeamScalarWhereInput']
    # upsert: List['TeamUpserteWithWhereUniqueWithoutRelationsInput']


class TeamUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TeamCreateWithoutRelationsInput'
    connect: 'TeamWhereUniqueInput'
    connect_or_create: 'TeamConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TeamUpdateInput'
    # upsert: 'TeamUpsertWithoutRelationsInput'


class TeamUpsertInput(TypedDict):
    create: 'TeamCreateInput'
    update: 'TeamUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Team_id_OrderByInput = TypedDict(
    '_Team_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Team_eaClubId_OrderByInput = TypedDict(
    '_Team_eaClubId_OrderByInput',
    {
        'eaClubId': 'SortOrder',
    },
    total=True
)

_Team_eaClubName_OrderByInput = TypedDict(
    '_Team_eaClubName_OrderByInput',
    {
        'eaClubName': 'SortOrder',
    },
    total=True
)

_Team_fullTeamName_OrderByInput = TypedDict(
    '_Team_fullTeamName_OrderByInput',
    {
        'fullTeamName': 'SortOrder',
    },
    total=True
)

_Team_teamAbbreviation_OrderByInput = TypedDict(
    '_Team_teamAbbreviation_OrderByInput',
    {
        'teamAbbreviation': 'SortOrder',
    },
    total=True
)

_Team_logoPath_OrderByInput = TypedDict(
    '_Team_logoPath_OrderByInput',
    {
        'logoPath': 'SortOrder',
    },
    total=True
)

_Team_leagueId_OrderByInput = TypedDict(
    '_Team_leagueId_OrderByInput',
    {
        'leagueId': 'SortOrder',
    },
    total=True
)

_Team_divisionId_OrderByInput = TypedDict(
    '_Team_divisionId_OrderByInput',
    {
        'divisionId': 'SortOrder',
    },
    total=True
)

_Team_primaryColor_OrderByInput = TypedDict(
    '_Team_primaryColor_OrderByInput',
    {
        'primaryColor': 'SortOrder',
    },
    total=True
)

_Team_secondaryColor_OrderByInput = TypedDict(
    '_Team_secondaryColor_OrderByInput',
    {
        'secondaryColor': 'SortOrder',
    },
    total=True
)

_Team_createdAt_OrderByInput = TypedDict(
    '_Team_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Team_updatedAt_OrderByInput = TypedDict(
    '_Team_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Team_nhlAffiliateId_OrderByInput = TypedDict(
    '_Team_nhlAffiliateId_OrderByInput',
    {
        'nhlAffiliateId': 'SortOrder',
    },
    total=True
)

_Team_ahlAffiliateId_OrderByInput = TypedDict(
    '_Team_ahlAffiliateId_OrderByInput',
    {
        'ahlAffiliateId': 'SortOrder',
    },
    total=True
)

_Team_RelevanceInner = TypedDict(
    '_Team_RelevanceInner',
    {
        'fields': 'List[TeamScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Team_RelevanceOrderByInput = TypedDict(
    '_Team_RelevanceOrderByInput',
    {
        '_relevance': '_Team_RelevanceInner',
    },
    total=True
)

TeamOrderByInput = Union[
    '_Team_id_OrderByInput',
    '_Team_eaClubId_OrderByInput',
    '_Team_eaClubName_OrderByInput',
    '_Team_fullTeamName_OrderByInput',
    '_Team_teamAbbreviation_OrderByInput',
    '_Team_logoPath_OrderByInput',
    '_Team_leagueId_OrderByInput',
    '_Team_divisionId_OrderByInput',
    '_Team_primaryColor_OrderByInput',
    '_Team_secondaryColor_OrderByInput',
    '_Team_createdAt_OrderByInput',
    '_Team_updatedAt_OrderByInput',
    '_Team_nhlAffiliateId_OrderByInput',
    '_Team_ahlAffiliateId_OrderByInput',
    '_Team_RelevanceOrderByInput',
]



# recursive Team types
# TODO: cleanup these types



TeamRelationFilter = TypedDict(
    'TeamRelationFilter',
    {
        'is': 'TeamWhereInput',
        'is_not': 'TeamWhereInput',
    },
    total=False,
)


class TeamListRelationFilter(TypedDict, total=False):
    some: 'TeamWhereInput'
    none: 'TeamWhereInput'
    every: 'TeamWhereInput'


class TeamInclude(TypedDict, total=False):
    """Team relational arguments"""
    league: Union[bool, 'LeagueArgsFromTeam']
    division: Union[bool, 'DivisionArgsFromTeam']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromTeam']
    nhlAffiliate: Union[bool, 'TeamArgsFromTeam']
    ahlAffiliate: Union[bool, 'TeamArgsFromTeam']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromTeam']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromTeam']


class ForumPostIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    author: Union[bool, 'UserArgsFromTeam']
    comments: Union[bool, 'FindManyForumCommentArgsFromTeam']
    reactions: Union[bool, 'FindManyForumReactionArgsFromTeam']
    followers: Union[bool, 'FindManyForumFollowerArgsFromTeam']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromTeam']


class ForumPostArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']
    post: Union[bool, 'ForumPostArgsFromTeam']
    comment: Union[bool, 'ForumCommentArgsFromTeam']


class ForumReactionArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']
    post: Union[bool, 'ForumPostArgsFromTeam']


class ForumFollowerArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']
    post: Union[bool, 'ForumPostArgsFromTeam']


class ForumPostSubscriptionArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    author: Union[bool, 'UserArgsFromTeam']
    post: Union[bool, 'ForumPostArgsFromTeam']
    quotedComment: Union[bool, 'ForumCommentArgsFromTeam']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromTeam']
    reactions: Union[bool, 'FindManyForumReactionArgsFromTeam']


class ForumCommentArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    parentLeague: Union[bool, 'LeagueArgsFromTeam']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromTeam']
    conferences: Union[bool, 'FindManyConferenceArgsFromTeam']
    divisions: Union[bool, 'FindManyDivisionArgsFromTeam']
    teams: Union[bool, 'FindManyTeamArgsFromTeam']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromTeam']


class LeagueArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    league: Union[bool, 'LeagueArgsFromTeam']
    season: Union[bool, 'SeasonArgsFromTeam']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromTeam']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromTeam']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromTeam']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromTeam']


class LeagueSeasonArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    league: Union[bool, 'LeagueArgsFromTeam']
    divisions: Union[bool, 'FindManyDivisionArgsFromTeam']


class ConferenceArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    conference: Union[bool, 'ConferenceArgsFromTeam']
    league: Union[bool, 'LeagueArgsFromTeam']
    teams: Union[bool, 'FindManyTeamArgsFromTeam']


class DivisionArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromTeam']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromTeam']


class SeasonArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeam']


class LeagueCommissionerArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeam']


class LeagueBOGArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromTeam']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromTeam']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromTeam']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromTeam']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromTeam']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromTeam']


class MatchArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromTeam']
    match: Union[bool, 'MatchArgsFromTeam']


class ClubMatchStatsArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    customKit: Union[bool, 'CustomKitArgsFromTeam']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromTeam']


class ClubMatchStatsDetailsArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromTeam']


class CustomKitArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    match: Union[bool, 'MatchArgsFromTeam']


class ClubAggregateMatchStatsArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    match: Union[bool, 'MatchArgsFromTeam']


class MatchAnalyticsArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    match: Union[bool, 'MatchArgsFromTeam']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromTeam']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeam']


class PlayerMatchArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']
    season: Union[bool, 'SeasonArgsFromTeam']
    contract: Union[bool, 'ContractArgsFromTeam']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeam']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromTeam']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromTeam']
    matches: Union[bool, 'FindManyMatchArgsFromTeam']


class PlayerSeasonArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeam']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromTeam']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromTeam']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromTeam']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromTeam']


class PlayerTeamSeasonArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeam']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeam']


class PlayerLeagueHistoryArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromTeam']
    trophySummary: Union[bool, 'PSNTrophyArgsFromTeam']
    games: Union[bool, 'FindManyPSNGameArgsFromTeam']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromTeam']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromTeam']


class PSNProfileArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    profile: Union[bool, 'PSNProfileArgsFromTeam']


class PSNAvatarArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    profile: Union[bool, 'PSNProfileArgsFromTeam']


class PSNTrophyArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    profile: Union[bool, 'PSNProfileArgsFromTeam']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromTeam']


class PSNGameArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    profile: Union[bool, 'PSNProfileArgsFromTeam']


class PSNSyncLogArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    profile: Union[bool, 'PSNProfileArgsFromTeam']
    game: Union[bool, 'PSNGameArgsFromTeam']


class PSNGameTrophiesArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    league: Union[bool, 'LeagueArgsFromTeam']
    division: Union[bool, 'DivisionArgsFromTeam']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromTeam']
    nhlAffiliate: Union[bool, 'TeamArgsFromTeam']
    ahlAffiliate: Union[bool, 'TeamArgsFromTeam']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromTeam']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromTeam']


class TeamArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    team: Union[bool, 'TeamArgsFromTeam']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeam']
    matches: Union[bool, 'FindManyMatchArgsFromTeam']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeam']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeam']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeam']
    bids: Union[bool, 'FindManyBidArgsFromTeam']
    managers: Union[bool, 'FindManyTeamManagerArgsFromTeam']


class TeamSeasonArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']
    teamSeason: Union[bool, 'TeamSeasonArgsFromTeam']


class TeamManagerArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    contract: Union[bool, 'ContractArgsFromTeam']
    teamSeason: Union[bool, 'TeamSeasonArgsFromTeam']


class BidArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeam']
    bids: Union[bool, 'FindManyBidArgsFromTeam']


class ContractArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    notifications: Union[bool, 'FindManyNotificationArgsFromTeam']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromTeam']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromTeam']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromTeam']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromTeam']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromTeam']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromTeam']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromTeam']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromTeam']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromTeam']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromTeam']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromTeam']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromTeam']
    psnProfile: Union[bool, 'PSNProfileArgsFromTeam']


class UserArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']


class EaIdHistoryArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']


class SystemHistoryArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']


class GamertagHistoryArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromTeam(TypedDict, total=False):
    """Relational arguments for Team"""
    user: Union[bool, 'UserArgsFromTeam']


class NotificationArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromTeam(TypedDict, total=False):
    """Arguments for Team"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyTeamArgs = FindManyTeamArgsFromTeam
FindFirstTeamArgs = FindManyTeamArgsFromTeam


class TeamWhereInput(TypedDict, total=False):
    """Team arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    eaClubId: Union[_str, 'types.StringFilter']
    eaClubName: Union[_str, 'types.StringFilter']
    fullTeamName: Union[_str, 'types.StringFilter']
    teamAbbreviation: Union[_str, 'types.StringFilter']
    logoPath: Union[None, _str, 'types.StringFilter']
    leagueId: Union[_str, 'types.StringFilter']
    league: 'LeagueRelationFilter'
    divisionId: Union[None, _str, 'types.StringFilter']
    division: 'DivisionRelationFilter'
    primaryColor: Union[None, _str, 'types.StringFilter']
    secondaryColor: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    seasons: 'TeamSeasonListRelationFilter'
    nhlAffiliateId: Union[None, _str, 'types.StringFilter']
    ahlAffiliateId: Union[None, _str, 'types.StringFilter']
    nhlAffiliate: 'TeamRelationFilter'
    ahlAffiliate: 'TeamRelationFilter'
    ahlAffiliates: 'TeamListRelationFilter'
    echlAffiliates: 'TeamListRelationFilter'

    # should be noted that AND and NOT should be Union['TeamWhereInput', List['TeamWhereInput']]
    # but this causes mypy to hang :/
    AND: List['TeamWhereInput']
    OR: List['TeamWhereInput']
    NOT: List['TeamWhereInput']



# aggregate Team types


class TeamScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Team arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    eaClubId: Union[_str, 'types.StringWithAggregatesFilter']
    eaClubName: Union[_str, 'types.StringWithAggregatesFilter']
    fullTeamName: Union[_str, 'types.StringWithAggregatesFilter']
    teamAbbreviation: Union[_str, 'types.StringWithAggregatesFilter']
    logoPath: Union[_str, 'types.StringWithAggregatesFilter']
    leagueId: Union[_str, 'types.StringWithAggregatesFilter']
    divisionId: Union[_str, 'types.StringWithAggregatesFilter']
    primaryColor: Union[_str, 'types.StringWithAggregatesFilter']
    secondaryColor: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    nhlAffiliateId: Union[_str, 'types.StringWithAggregatesFilter']
    ahlAffiliateId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['TeamScalarWhereWithAggregatesInput']
    OR: List['TeamScalarWhereWithAggregatesInput']
    NOT: List['TeamScalarWhereWithAggregatesInput']



class TeamGroupByOutput(TypedDict, total=False):
    id: _str
    eaClubId: _str
    eaClubName: _str
    fullTeamName: _str
    teamAbbreviation: _str
    logoPath: _str
    leagueId: _str
    divisionId: _str
    primaryColor: _str
    secondaryColor: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    nhlAffiliateId: _str
    ahlAffiliateId: _str
    _sum: 'TeamSumAggregateOutput'
    _avg: 'TeamAvgAggregateOutput'
    _min: 'TeamMinAggregateOutput'
    _max: 'TeamMaxAggregateOutput'
    _count: 'TeamCountAggregateOutput'


class TeamAvgAggregateOutput(TypedDict, total=False):
    """Team output for aggregating averages"""


class TeamSumAggregateOutput(TypedDict, total=False):
    """Team output for aggregating sums"""


class TeamScalarAggregateOutput(TypedDict, total=False):
    """Team output including scalar fields"""
    id: _str
    eaClubId: _str
    eaClubName: _str
    fullTeamName: _str
    teamAbbreviation: _str
    logoPath: _str
    leagueId: _str
    divisionId: _str
    primaryColor: _str
    secondaryColor: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    nhlAffiliateId: _str
    ahlAffiliateId: _str


TeamMinAggregateOutput = TeamScalarAggregateOutput
TeamMaxAggregateOutput = TeamScalarAggregateOutput


class TeamMaxAggregateInput(TypedDict, total=False):
    """Team input for aggregating by max"""
    id: bool
    eaClubId: bool
    eaClubName: bool
    fullTeamName: bool
    teamAbbreviation: bool
    logoPath: bool
    leagueId: bool
    divisionId: bool
    primaryColor: bool
    secondaryColor: bool
    createdAt: bool
    updatedAt: bool
    nhlAffiliateId: bool
    ahlAffiliateId: bool


class TeamMinAggregateInput(TypedDict, total=False):
    """Team input for aggregating by min"""
    id: bool
    eaClubId: bool
    eaClubName: bool
    fullTeamName: bool
    teamAbbreviation: bool
    logoPath: bool
    leagueId: bool
    divisionId: bool
    primaryColor: bool
    secondaryColor: bool
    createdAt: bool
    updatedAt: bool
    nhlAffiliateId: bool
    ahlAffiliateId: bool


class TeamNumberAggregateInput(TypedDict, total=False):
    """Team input for aggregating numbers"""


TeamAvgAggregateInput = TeamNumberAggregateInput
TeamSumAggregateInput = TeamNumberAggregateInput


TeamCountAggregateInput = TypedDict(
    'TeamCountAggregateInput',
    {
        'id': bool,
        'eaClubId': bool,
        'eaClubName': bool,
        'fullTeamName': bool,
        'teamAbbreviation': bool,
        'logoPath': bool,
        'leagueId': bool,
        'divisionId': bool,
        'primaryColor': bool,
        'secondaryColor': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'nhlAffiliateId': bool,
        'ahlAffiliateId': bool,
        '_all': bool,
    },
    total=False,
)

TeamCountAggregateOutput = TypedDict(
    'TeamCountAggregateOutput',
    {
        'id': int,
        'eaClubId': int,
        'eaClubName': int,
        'fullTeamName': int,
        'teamAbbreviation': int,
        'logoPath': int,
        'leagueId': int,
        'divisionId': int,
        'primaryColor': int,
        'secondaryColor': int,
        'createdAt': int,
        'updatedAt': int,
        'nhlAffiliateId': int,
        'ahlAffiliateId': int,
        '_all': int,
    },
    total=False,
)


TeamKeys = Literal[
    'id',
    'eaClubId',
    'eaClubName',
    'fullTeamName',
    'teamAbbreviation',
    'logoPath',
    'leagueId',
    'league',
    'divisionId',
    'division',
    'primaryColor',
    'secondaryColor',
    'createdAt',
    'updatedAt',
    'seasons',
    'nhlAffiliateId',
    'ahlAffiliateId',
    'nhlAffiliate',
    'ahlAffiliate',
    'ahlAffiliates',
    'echlAffiliates',
]
TeamScalarFieldKeys = Literal[
    'id',
    'eaClubId',
    'eaClubName',
    'fullTeamName',
    'teamAbbreviation',
    'logoPath',
    'leagueId',
    'divisionId',
    'primaryColor',
    'secondaryColor',
    'createdAt',
    'updatedAt',
    'nhlAffiliateId',
    'ahlAffiliateId',
]
TeamScalarFieldKeysT = TypeVar('TeamScalarFieldKeysT', bound=TeamScalarFieldKeys)

TeamRelationalFieldKeys = Literal[
        'league',
        'division',
        'seasons',
        'nhlAffiliate',
        'ahlAffiliate',
        'ahlAffiliates',
        'echlAffiliates',
    ]

# TeamSeason types

class TeamSeasonOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the TeamSeason create method"""
    id: _str
    teamId: _str
    leagueSeasonId: _str
    forwardCount: _int
    defenseCount: _int
    goalieCount: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    team: 'TeamCreateNestedWithoutRelationsInput'
    leagueSeason: 'LeagueSeasonCreateNestedWithoutRelationsInput'
    matches: 'MatchCreateManyNestedWithoutRelationsInput'
    rosterPlayers: 'PlayerTeamSeasonCreateManyNestedWithoutRelationsInput'
    trainingCampPlayers: 'PlayerTeamSeasonCreateManyNestedWithoutRelationsInput'
    inactivePlayers: 'PlayerTeamSeasonCreateManyNestedWithoutRelationsInput'
    bids: 'BidCreateManyNestedWithoutRelationsInput'
    managers: 'TeamManagerCreateManyNestedWithoutRelationsInput'


class TeamSeasonCreateInput(TeamSeasonOptionalCreateInput):
    """Required arguments to the TeamSeason create method"""


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TeamSeasonOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the TeamSeason create method, without relations"""
    id: _str
    teamId: _str
    leagueSeasonId: _str
    forwardCount: _int
    defenseCount: _int
    goalieCount: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class TeamSeasonCreateWithoutRelationsInput(TeamSeasonOptionalCreateWithoutRelationsInput):
    """Required arguments to the TeamSeason create method, without relations"""

class TeamSeasonConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TeamSeasonCreateWithoutRelationsInput'
    where: 'TeamSeasonWhereUniqueInput'

class TeamSeasonCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TeamSeasonCreateWithoutRelationsInput'
    connect: 'TeamSeasonWhereUniqueInput'
    connect_or_create: 'TeamSeasonConnectOrCreateWithoutRelationsInput'


class TeamSeasonCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TeamSeasonCreateWithoutRelationsInput', List['TeamSeasonCreateWithoutRelationsInput']]
    connect: Union['TeamSeasonWhereUniqueInput', List['TeamSeasonWhereUniqueInput']]
    connect_or_create: Union['TeamSeasonConnectOrCreateWithoutRelationsInput', List['TeamSeasonConnectOrCreateWithoutRelationsInput']]

_TeamSeasonWhereUnique_id_Input = TypedDict(
    '_TeamSeasonWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

TeamSeasonWhereUniqueInput = _TeamSeasonWhereUnique_id_Input


class TeamSeasonUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    forwardCount: Union[AtomicIntInput, _int]
    defenseCount: Union[AtomicIntInput, _int]
    goalieCount: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    team: 'TeamUpdateOneWithoutRelationsInput'
    leagueSeason: 'LeagueSeasonUpdateOneWithoutRelationsInput'
    matches: 'MatchUpdateManyWithoutRelationsInput'
    rosterPlayers: 'PlayerTeamSeasonUpdateManyWithoutRelationsInput'
    trainingCampPlayers: 'PlayerTeamSeasonUpdateManyWithoutRelationsInput'
    inactivePlayers: 'PlayerTeamSeasonUpdateManyWithoutRelationsInput'
    bids: 'BidUpdateManyWithoutRelationsInput'
    managers: 'TeamManagerUpdateManyWithoutRelationsInput'


class TeamSeasonUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    forwardCount: Union[AtomicIntInput, _int]
    defenseCount: Union[AtomicIntInput, _int]
    goalieCount: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class TeamSeasonUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TeamSeasonCreateWithoutRelationsInput']
    connect: List['TeamSeasonWhereUniqueInput']
    connect_or_create: List['TeamSeasonConnectOrCreateWithoutRelationsInput']
    set: List['TeamSeasonWhereUniqueInput']
    disconnect: List['TeamSeasonWhereUniqueInput']
    delete: List['TeamSeasonWhereUniqueInput']

    # TODO
    # update: List['TeamSeasonUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TeamSeasonUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TeamSeasonScalarWhereInput']
    # upsert: List['TeamSeasonUpserteWithWhereUniqueWithoutRelationsInput']


class TeamSeasonUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TeamSeasonCreateWithoutRelationsInput'
    connect: 'TeamSeasonWhereUniqueInput'
    connect_or_create: 'TeamSeasonConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TeamSeasonUpdateInput'
    # upsert: 'TeamSeasonUpsertWithoutRelationsInput'


class TeamSeasonUpsertInput(TypedDict):
    create: 'TeamSeasonCreateInput'
    update: 'TeamSeasonUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_TeamSeason_id_OrderByInput = TypedDict(
    '_TeamSeason_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_TeamSeason_teamId_OrderByInput = TypedDict(
    '_TeamSeason_teamId_OrderByInput',
    {
        'teamId': 'SortOrder',
    },
    total=True
)

_TeamSeason_leagueSeasonId_OrderByInput = TypedDict(
    '_TeamSeason_leagueSeasonId_OrderByInput',
    {
        'leagueSeasonId': 'SortOrder',
    },
    total=True
)

_TeamSeason_forwardCount_OrderByInput = TypedDict(
    '_TeamSeason_forwardCount_OrderByInput',
    {
        'forwardCount': 'SortOrder',
    },
    total=True
)

_TeamSeason_defenseCount_OrderByInput = TypedDict(
    '_TeamSeason_defenseCount_OrderByInput',
    {
        'defenseCount': 'SortOrder',
    },
    total=True
)

_TeamSeason_goalieCount_OrderByInput = TypedDict(
    '_TeamSeason_goalieCount_OrderByInput',
    {
        'goalieCount': 'SortOrder',
    },
    total=True
)

_TeamSeason_createdAt_OrderByInput = TypedDict(
    '_TeamSeason_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_TeamSeason_updatedAt_OrderByInput = TypedDict(
    '_TeamSeason_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_TeamSeason_RelevanceInner = TypedDict(
    '_TeamSeason_RelevanceInner',
    {
        'fields': 'List[TeamSeasonScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_TeamSeason_RelevanceOrderByInput = TypedDict(
    '_TeamSeason_RelevanceOrderByInput',
    {
        '_relevance': '_TeamSeason_RelevanceInner',
    },
    total=True
)

TeamSeasonOrderByInput = Union[
    '_TeamSeason_id_OrderByInput',
    '_TeamSeason_teamId_OrderByInput',
    '_TeamSeason_leagueSeasonId_OrderByInput',
    '_TeamSeason_forwardCount_OrderByInput',
    '_TeamSeason_defenseCount_OrderByInput',
    '_TeamSeason_goalieCount_OrderByInput',
    '_TeamSeason_createdAt_OrderByInput',
    '_TeamSeason_updatedAt_OrderByInput',
    '_TeamSeason_RelevanceOrderByInput',
]



# recursive TeamSeason types
# TODO: cleanup these types



TeamSeasonRelationFilter = TypedDict(
    'TeamSeasonRelationFilter',
    {
        'is': 'TeamSeasonWhereInput',
        'is_not': 'TeamSeasonWhereInput',
    },
    total=False,
)


class TeamSeasonListRelationFilter(TypedDict, total=False):
    some: 'TeamSeasonWhereInput'
    none: 'TeamSeasonWhereInput'
    every: 'TeamSeasonWhereInput'


class TeamSeasonInclude(TypedDict, total=False):
    """TeamSeason relational arguments"""
    team: Union[bool, 'TeamArgsFromTeamSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeamSeason']
    matches: Union[bool, 'FindManyMatchArgsFromTeamSeason']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeamSeason']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeamSeason']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeamSeason']
    bids: Union[bool, 'FindManyBidArgsFromTeamSeason']
    managers: Union[bool, 'FindManyTeamManagerArgsFromTeamSeason']


class ForumPostIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    author: Union[bool, 'UserArgsFromTeamSeason']
    comments: Union[bool, 'FindManyForumCommentArgsFromTeamSeason']
    reactions: Union[bool, 'FindManyForumReactionArgsFromTeamSeason']
    followers: Union[bool, 'FindManyForumFollowerArgsFromTeamSeason']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromTeamSeason']


class ForumPostArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']
    post: Union[bool, 'ForumPostArgsFromTeamSeason']
    comment: Union[bool, 'ForumCommentArgsFromTeamSeason']


class ForumReactionArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']
    post: Union[bool, 'ForumPostArgsFromTeamSeason']


class ForumFollowerArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']
    post: Union[bool, 'ForumPostArgsFromTeamSeason']


class ForumPostSubscriptionArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    author: Union[bool, 'UserArgsFromTeamSeason']
    post: Union[bool, 'ForumPostArgsFromTeamSeason']
    quotedComment: Union[bool, 'ForumCommentArgsFromTeamSeason']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromTeamSeason']
    reactions: Union[bool, 'FindManyForumReactionArgsFromTeamSeason']


class ForumCommentArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    parentLeague: Union[bool, 'LeagueArgsFromTeamSeason']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromTeamSeason']
    conferences: Union[bool, 'FindManyConferenceArgsFromTeamSeason']
    divisions: Union[bool, 'FindManyDivisionArgsFromTeamSeason']
    teams: Union[bool, 'FindManyTeamArgsFromTeamSeason']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromTeamSeason']


class LeagueArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    league: Union[bool, 'LeagueArgsFromTeamSeason']
    season: Union[bool, 'SeasonArgsFromTeamSeason']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromTeamSeason']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromTeamSeason']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromTeamSeason']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromTeamSeason']


class LeagueSeasonArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    league: Union[bool, 'LeagueArgsFromTeamSeason']
    divisions: Union[bool, 'FindManyDivisionArgsFromTeamSeason']


class ConferenceArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    conference: Union[bool, 'ConferenceArgsFromTeamSeason']
    league: Union[bool, 'LeagueArgsFromTeamSeason']
    teams: Union[bool, 'FindManyTeamArgsFromTeamSeason']


class DivisionArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromTeamSeason']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromTeamSeason']


class SeasonArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeamSeason']


class LeagueCommissionerArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeamSeason']


class LeagueBOGArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromTeamSeason']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromTeamSeason']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromTeamSeason']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromTeamSeason']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromTeamSeason']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromTeamSeason']


class MatchArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromTeamSeason']
    match: Union[bool, 'MatchArgsFromTeamSeason']


class ClubMatchStatsArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    customKit: Union[bool, 'CustomKitArgsFromTeamSeason']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromTeamSeason']


class ClubMatchStatsDetailsArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromTeamSeason']


class CustomKitArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    match: Union[bool, 'MatchArgsFromTeamSeason']


class ClubAggregateMatchStatsArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    match: Union[bool, 'MatchArgsFromTeamSeason']


class MatchAnalyticsArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    match: Union[bool, 'MatchArgsFromTeamSeason']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromTeamSeason']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeamSeason']


class PlayerMatchArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']
    season: Union[bool, 'SeasonArgsFromTeamSeason']
    contract: Union[bool, 'ContractArgsFromTeamSeason']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeamSeason']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromTeamSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromTeamSeason']
    matches: Union[bool, 'FindManyMatchArgsFromTeamSeason']


class PlayerSeasonArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeamSeason']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromTeamSeason']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromTeamSeason']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromTeamSeason']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromTeamSeason']


class PlayerTeamSeasonArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeamSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeamSeason']


class PlayerLeagueHistoryArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromTeamSeason']
    trophySummary: Union[bool, 'PSNTrophyArgsFromTeamSeason']
    games: Union[bool, 'FindManyPSNGameArgsFromTeamSeason']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromTeamSeason']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromTeamSeason']


class PSNProfileArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    profile: Union[bool, 'PSNProfileArgsFromTeamSeason']


class PSNAvatarArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    profile: Union[bool, 'PSNProfileArgsFromTeamSeason']


class PSNTrophyArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    profile: Union[bool, 'PSNProfileArgsFromTeamSeason']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromTeamSeason']


class PSNGameArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    profile: Union[bool, 'PSNProfileArgsFromTeamSeason']


class PSNSyncLogArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    profile: Union[bool, 'PSNProfileArgsFromTeamSeason']
    game: Union[bool, 'PSNGameArgsFromTeamSeason']


class PSNGameTrophiesArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    league: Union[bool, 'LeagueArgsFromTeamSeason']
    division: Union[bool, 'DivisionArgsFromTeamSeason']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromTeamSeason']
    nhlAffiliate: Union[bool, 'TeamArgsFromTeamSeason']
    ahlAffiliate: Union[bool, 'TeamArgsFromTeamSeason']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromTeamSeason']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromTeamSeason']


class TeamArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    team: Union[bool, 'TeamArgsFromTeamSeason']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeamSeason']
    matches: Union[bool, 'FindManyMatchArgsFromTeamSeason']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeamSeason']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeamSeason']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeamSeason']
    bids: Union[bool, 'FindManyBidArgsFromTeamSeason']
    managers: Union[bool, 'FindManyTeamManagerArgsFromTeamSeason']


class TeamSeasonArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']
    teamSeason: Union[bool, 'TeamSeasonArgsFromTeamSeason']


class TeamManagerArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    contract: Union[bool, 'ContractArgsFromTeamSeason']
    teamSeason: Union[bool, 'TeamSeasonArgsFromTeamSeason']


class BidArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeamSeason']
    bids: Union[bool, 'FindManyBidArgsFromTeamSeason']


class ContractArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    notifications: Union[bool, 'FindManyNotificationArgsFromTeamSeason']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromTeamSeason']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromTeamSeason']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromTeamSeason']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromTeamSeason']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromTeamSeason']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromTeamSeason']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromTeamSeason']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromTeamSeason']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromTeamSeason']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromTeamSeason']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromTeamSeason']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromTeamSeason']
    psnProfile: Union[bool, 'PSNProfileArgsFromTeamSeason']


class UserArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']


class EaIdHistoryArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']


class SystemHistoryArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']


class GamertagHistoryArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromTeamSeason(TypedDict, total=False):
    """Relational arguments for TeamSeason"""
    user: Union[bool, 'UserArgsFromTeamSeason']


class NotificationArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromTeamSeason(TypedDict, total=False):
    """Arguments for TeamSeason"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyTeamSeasonArgs = FindManyTeamSeasonArgsFromTeamSeason
FindFirstTeamSeasonArgs = FindManyTeamSeasonArgsFromTeamSeason


class TeamSeasonWhereInput(TypedDict, total=False):
    """TeamSeason arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    teamId: Union[_str, 'types.StringFilter']
    leagueSeasonId: Union[_str, 'types.StringFilter']
    forwardCount: Union[_int, 'types.IntFilter']
    defenseCount: Union[_int, 'types.IntFilter']
    goalieCount: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    team: 'TeamRelationFilter'
    leagueSeason: 'LeagueSeasonRelationFilter'
    matches: 'MatchListRelationFilter'
    rosterPlayers: 'PlayerTeamSeasonListRelationFilter'
    trainingCampPlayers: 'PlayerTeamSeasonListRelationFilter'
    inactivePlayers: 'PlayerTeamSeasonListRelationFilter'
    bids: 'BidListRelationFilter'
    managers: 'TeamManagerListRelationFilter'

    # should be noted that AND and NOT should be Union['TeamSeasonWhereInput', List['TeamSeasonWhereInput']]
    # but this causes mypy to hang :/
    AND: List['TeamSeasonWhereInput']
    OR: List['TeamSeasonWhereInput']
    NOT: List['TeamSeasonWhereInput']



# aggregate TeamSeason types


class TeamSeasonScalarWhereWithAggregatesInput(TypedDict, total=False):
    """TeamSeason arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    teamId: Union[_str, 'types.StringWithAggregatesFilter']
    leagueSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    forwardCount: Union[_int, 'types.IntWithAggregatesFilter']
    defenseCount: Union[_int, 'types.IntWithAggregatesFilter']
    goalieCount: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TeamSeasonScalarWhereWithAggregatesInput']
    OR: List['TeamSeasonScalarWhereWithAggregatesInput']
    NOT: List['TeamSeasonScalarWhereWithAggregatesInput']



class TeamSeasonGroupByOutput(TypedDict, total=False):
    id: _str
    teamId: _str
    leagueSeasonId: _str
    forwardCount: _int
    defenseCount: _int
    goalieCount: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'TeamSeasonSumAggregateOutput'
    _avg: 'TeamSeasonAvgAggregateOutput'
    _min: 'TeamSeasonMinAggregateOutput'
    _max: 'TeamSeasonMaxAggregateOutput'
    _count: 'TeamSeasonCountAggregateOutput'


class TeamSeasonAvgAggregateOutput(TypedDict, total=False):
    """TeamSeason output for aggregating averages"""
    forwardCount: float
    defenseCount: float
    goalieCount: float


class TeamSeasonSumAggregateOutput(TypedDict, total=False):
    """TeamSeason output for aggregating sums"""
    forwardCount: _int
    defenseCount: _int
    goalieCount: _int


class TeamSeasonScalarAggregateOutput(TypedDict, total=False):
    """TeamSeason output including scalar fields"""
    id: _str
    teamId: _str
    leagueSeasonId: _str
    forwardCount: _int
    defenseCount: _int
    goalieCount: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


TeamSeasonMinAggregateOutput = TeamSeasonScalarAggregateOutput
TeamSeasonMaxAggregateOutput = TeamSeasonScalarAggregateOutput


class TeamSeasonMaxAggregateInput(TypedDict, total=False):
    """TeamSeason input for aggregating by max"""
    id: bool
    teamId: bool
    leagueSeasonId: bool
    forwardCount: bool
    defenseCount: bool
    goalieCount: bool
    createdAt: bool
    updatedAt: bool


class TeamSeasonMinAggregateInput(TypedDict, total=False):
    """TeamSeason input for aggregating by min"""
    id: bool
    teamId: bool
    leagueSeasonId: bool
    forwardCount: bool
    defenseCount: bool
    goalieCount: bool
    createdAt: bool
    updatedAt: bool


class TeamSeasonNumberAggregateInput(TypedDict, total=False):
    """TeamSeason input for aggregating numbers"""
    forwardCount: bool
    defenseCount: bool
    goalieCount: bool


TeamSeasonAvgAggregateInput = TeamSeasonNumberAggregateInput
TeamSeasonSumAggregateInput = TeamSeasonNumberAggregateInput


TeamSeasonCountAggregateInput = TypedDict(
    'TeamSeasonCountAggregateInput',
    {
        'id': bool,
        'teamId': bool,
        'leagueSeasonId': bool,
        'forwardCount': bool,
        'defenseCount': bool,
        'goalieCount': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

TeamSeasonCountAggregateOutput = TypedDict(
    'TeamSeasonCountAggregateOutput',
    {
        'id': int,
        'teamId': int,
        'leagueSeasonId': int,
        'forwardCount': int,
        'defenseCount': int,
        'goalieCount': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


TeamSeasonKeys = Literal[
    'id',
    'teamId',
    'leagueSeasonId',
    'forwardCount',
    'defenseCount',
    'goalieCount',
    'createdAt',
    'updatedAt',
    'team',
    'leagueSeason',
    'matches',
    'rosterPlayers',
    'trainingCampPlayers',
    'inactivePlayers',
    'bids',
    'managers',
]
TeamSeasonScalarFieldKeys = Literal[
    'id',
    'teamId',
    'leagueSeasonId',
    'forwardCount',
    'defenseCount',
    'goalieCount',
    'createdAt',
    'updatedAt',
]
TeamSeasonScalarFieldKeysT = TypeVar('TeamSeasonScalarFieldKeysT', bound=TeamSeasonScalarFieldKeys)

TeamSeasonRelationalFieldKeys = Literal[
        'team',
        'leagueSeason',
        'matches',
        'rosterPlayers',
        'trainingCampPlayers',
        'inactivePlayers',
        'bids',
        'managers',
    ]

# TeamManager types

class TeamManagerOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the TeamManager create method"""
    id: _str
    userId: _str
    teamSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'
    teamSeason: 'TeamSeasonCreateNestedWithoutRelationsInput'


class TeamManagerCreateInput(TeamManagerOptionalCreateInput):
    """Required arguments to the TeamManager create method"""
    role: 'enums.TeamManagementRole'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class TeamManagerOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the TeamManager create method, without relations"""
    id: _str
    userId: _str
    teamSeasonId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class TeamManagerCreateWithoutRelationsInput(TeamManagerOptionalCreateWithoutRelationsInput):
    """Required arguments to the TeamManager create method, without relations"""
    role: 'enums.TeamManagementRole'

class TeamManagerConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'TeamManagerCreateWithoutRelationsInput'
    where: 'TeamManagerWhereUniqueInput'

class TeamManagerCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'TeamManagerCreateWithoutRelationsInput'
    connect: 'TeamManagerWhereUniqueInput'
    connect_or_create: 'TeamManagerConnectOrCreateWithoutRelationsInput'


class TeamManagerCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['TeamManagerCreateWithoutRelationsInput', List['TeamManagerCreateWithoutRelationsInput']]
    connect: Union['TeamManagerWhereUniqueInput', List['TeamManagerWhereUniqueInput']]
    connect_or_create: Union['TeamManagerConnectOrCreateWithoutRelationsInput', List['TeamManagerConnectOrCreateWithoutRelationsInput']]

_TeamManagerWhereUnique_id_Input = TypedDict(
    '_TeamManagerWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_TeamManagerCompounduserId_teamSeasonId_roleKeyInner = TypedDict(
    '_TeamManagerCompounduserId_teamSeasonId_roleKeyInner',
    {
        'userId': '_str',
        'teamSeasonId': '_str',
        'role': 'enums.TeamManagementRole',
    },
    total=True
)

_TeamManagerCompounduserId_teamSeasonId_roleKey = TypedDict(
    '_TeamManagerCompounduserId_teamSeasonId_roleKey',
    {
        'userId_teamSeasonId_role': '_TeamManagerCompounduserId_teamSeasonId_roleKeyInner',
    },
    total=True
)

TeamManagerWhereUniqueInput = Union[
    '_TeamManagerWhereUnique_id_Input',
    '_TeamManagerCompounduserId_teamSeasonId_roleKey',
]


class TeamManagerUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    role: 'enums.TeamManagementRole'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'
    teamSeason: 'TeamSeasonUpdateOneWithoutRelationsInput'


class TeamManagerUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    role: 'enums.TeamManagementRole'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class TeamManagerUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['TeamManagerCreateWithoutRelationsInput']
    connect: List['TeamManagerWhereUniqueInput']
    connect_or_create: List['TeamManagerConnectOrCreateWithoutRelationsInput']
    set: List['TeamManagerWhereUniqueInput']
    disconnect: List['TeamManagerWhereUniqueInput']
    delete: List['TeamManagerWhereUniqueInput']

    # TODO
    # update: List['TeamManagerUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['TeamManagerUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['TeamManagerScalarWhereInput']
    # upsert: List['TeamManagerUpserteWithWhereUniqueWithoutRelationsInput']


class TeamManagerUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'TeamManagerCreateWithoutRelationsInput'
    connect: 'TeamManagerWhereUniqueInput'
    connect_or_create: 'TeamManagerConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'TeamManagerUpdateInput'
    # upsert: 'TeamManagerUpsertWithoutRelationsInput'


class TeamManagerUpsertInput(TypedDict):
    create: 'TeamManagerCreateInput'
    update: 'TeamManagerUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_TeamManager_id_OrderByInput = TypedDict(
    '_TeamManager_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_TeamManager_userId_OrderByInput = TypedDict(
    '_TeamManager_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_TeamManager_teamSeasonId_OrderByInput = TypedDict(
    '_TeamManager_teamSeasonId_OrderByInput',
    {
        'teamSeasonId': 'SortOrder',
    },
    total=True
)

_TeamManager_role_OrderByInput = TypedDict(
    '_TeamManager_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_TeamManager_createdAt_OrderByInput = TypedDict(
    '_TeamManager_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_TeamManager_updatedAt_OrderByInput = TypedDict(
    '_TeamManager_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_TeamManager_RelevanceInner = TypedDict(
    '_TeamManager_RelevanceInner',
    {
        'fields': 'List[TeamManagerScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_TeamManager_RelevanceOrderByInput = TypedDict(
    '_TeamManager_RelevanceOrderByInput',
    {
        '_relevance': '_TeamManager_RelevanceInner',
    },
    total=True
)

TeamManagerOrderByInput = Union[
    '_TeamManager_id_OrderByInput',
    '_TeamManager_userId_OrderByInput',
    '_TeamManager_teamSeasonId_OrderByInput',
    '_TeamManager_role_OrderByInput',
    '_TeamManager_createdAt_OrderByInput',
    '_TeamManager_updatedAt_OrderByInput',
    '_TeamManager_RelevanceOrderByInput',
]



# recursive TeamManager types
# TODO: cleanup these types



TeamManagerRelationFilter = TypedDict(
    'TeamManagerRelationFilter',
    {
        'is': 'TeamManagerWhereInput',
        'is_not': 'TeamManagerWhereInput',
    },
    total=False,
)


class TeamManagerListRelationFilter(TypedDict, total=False):
    some: 'TeamManagerWhereInput'
    none: 'TeamManagerWhereInput'
    every: 'TeamManagerWhereInput'


class TeamManagerInclude(TypedDict, total=False):
    """TeamManager relational arguments"""
    user: Union[bool, 'UserArgsFromTeamManager']
    teamSeason: Union[bool, 'TeamSeasonArgsFromTeamManager']


class ForumPostIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    author: Union[bool, 'UserArgsFromTeamManager']
    comments: Union[bool, 'FindManyForumCommentArgsFromTeamManager']
    reactions: Union[bool, 'FindManyForumReactionArgsFromTeamManager']
    followers: Union[bool, 'FindManyForumFollowerArgsFromTeamManager']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromTeamManager']


class ForumPostArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']
    post: Union[bool, 'ForumPostArgsFromTeamManager']
    comment: Union[bool, 'ForumCommentArgsFromTeamManager']


class ForumReactionArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']
    post: Union[bool, 'ForumPostArgsFromTeamManager']


class ForumFollowerArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']
    post: Union[bool, 'ForumPostArgsFromTeamManager']


class ForumPostSubscriptionArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    author: Union[bool, 'UserArgsFromTeamManager']
    post: Union[bool, 'ForumPostArgsFromTeamManager']
    quotedComment: Union[bool, 'ForumCommentArgsFromTeamManager']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromTeamManager']
    reactions: Union[bool, 'FindManyForumReactionArgsFromTeamManager']


class ForumCommentArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    parentLeague: Union[bool, 'LeagueArgsFromTeamManager']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromTeamManager']
    conferences: Union[bool, 'FindManyConferenceArgsFromTeamManager']
    divisions: Union[bool, 'FindManyDivisionArgsFromTeamManager']
    teams: Union[bool, 'FindManyTeamArgsFromTeamManager']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromTeamManager']


class LeagueArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    league: Union[bool, 'LeagueArgsFromTeamManager']
    season: Union[bool, 'SeasonArgsFromTeamManager']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromTeamManager']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromTeamManager']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromTeamManager']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromTeamManager']


class LeagueSeasonArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    league: Union[bool, 'LeagueArgsFromTeamManager']
    divisions: Union[bool, 'FindManyDivisionArgsFromTeamManager']


class ConferenceArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    conference: Union[bool, 'ConferenceArgsFromTeamManager']
    league: Union[bool, 'LeagueArgsFromTeamManager']
    teams: Union[bool, 'FindManyTeamArgsFromTeamManager']


class DivisionArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromTeamManager']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromTeamManager']


class SeasonArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeamManager']


class LeagueCommissionerArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeamManager']


class LeagueBOGArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromTeamManager']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromTeamManager']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromTeamManager']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromTeamManager']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromTeamManager']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromTeamManager']


class MatchArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromTeamManager']
    match: Union[bool, 'MatchArgsFromTeamManager']


class ClubMatchStatsArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    customKit: Union[bool, 'CustomKitArgsFromTeamManager']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromTeamManager']


class ClubMatchStatsDetailsArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromTeamManager']


class CustomKitArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    match: Union[bool, 'MatchArgsFromTeamManager']


class ClubAggregateMatchStatsArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    match: Union[bool, 'MatchArgsFromTeamManager']


class MatchAnalyticsArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    match: Union[bool, 'MatchArgsFromTeamManager']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromTeamManager']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeamManager']


class PlayerMatchArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']
    season: Union[bool, 'SeasonArgsFromTeamManager']
    contract: Union[bool, 'ContractArgsFromTeamManager']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeamManager']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromTeamManager']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromTeamManager']
    matches: Union[bool, 'FindManyMatchArgsFromTeamManager']


class PlayerSeasonArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeamManager']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromTeamManager']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromTeamManager']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromTeamManager']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromTeamManager']


class PlayerTeamSeasonArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeamManager']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeamManager']


class PlayerLeagueHistoryArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromTeamManager']
    trophySummary: Union[bool, 'PSNTrophyArgsFromTeamManager']
    games: Union[bool, 'FindManyPSNGameArgsFromTeamManager']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromTeamManager']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromTeamManager']


class PSNProfileArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    profile: Union[bool, 'PSNProfileArgsFromTeamManager']


class PSNAvatarArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    profile: Union[bool, 'PSNProfileArgsFromTeamManager']


class PSNTrophyArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    profile: Union[bool, 'PSNProfileArgsFromTeamManager']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromTeamManager']


class PSNGameArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    profile: Union[bool, 'PSNProfileArgsFromTeamManager']


class PSNSyncLogArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    profile: Union[bool, 'PSNProfileArgsFromTeamManager']
    game: Union[bool, 'PSNGameArgsFromTeamManager']


class PSNGameTrophiesArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    league: Union[bool, 'LeagueArgsFromTeamManager']
    division: Union[bool, 'DivisionArgsFromTeamManager']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromTeamManager']
    nhlAffiliate: Union[bool, 'TeamArgsFromTeamManager']
    ahlAffiliate: Union[bool, 'TeamArgsFromTeamManager']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromTeamManager']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromTeamManager']


class TeamArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    team: Union[bool, 'TeamArgsFromTeamManager']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromTeamManager']
    matches: Union[bool, 'FindManyMatchArgsFromTeamManager']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeamManager']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeamManager']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromTeamManager']
    bids: Union[bool, 'FindManyBidArgsFromTeamManager']
    managers: Union[bool, 'FindManyTeamManagerArgsFromTeamManager']


class TeamSeasonArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']
    teamSeason: Union[bool, 'TeamSeasonArgsFromTeamManager']


class TeamManagerArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    contract: Union[bool, 'ContractArgsFromTeamManager']
    teamSeason: Union[bool, 'TeamSeasonArgsFromTeamManager']


class BidArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromTeamManager']
    bids: Union[bool, 'FindManyBidArgsFromTeamManager']


class ContractArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    notifications: Union[bool, 'FindManyNotificationArgsFromTeamManager']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromTeamManager']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromTeamManager']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromTeamManager']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromTeamManager']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromTeamManager']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromTeamManager']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromTeamManager']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromTeamManager']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromTeamManager']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromTeamManager']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromTeamManager']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromTeamManager']
    psnProfile: Union[bool, 'PSNProfileArgsFromTeamManager']


class UserArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']


class EaIdHistoryArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']


class SystemHistoryArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']


class GamertagHistoryArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromTeamManager(TypedDict, total=False):
    """Relational arguments for TeamManager"""
    user: Union[bool, 'UserArgsFromTeamManager']


class NotificationArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromTeamManager(TypedDict, total=False):
    """Arguments for TeamManager"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyTeamManagerArgs = FindManyTeamManagerArgsFromTeamManager
FindFirstTeamManagerArgs = FindManyTeamManagerArgsFromTeamManager


class TeamManagerWhereInput(TypedDict, total=False):
    """TeamManager arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    teamSeasonId: Union[_str, 'types.StringFilter']
    role: 'enums.TeamManagementRole'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'
    teamSeason: 'TeamSeasonRelationFilter'

    # should be noted that AND and NOT should be Union['TeamManagerWhereInput', List['TeamManagerWhereInput']]
    # but this causes mypy to hang :/
    AND: List['TeamManagerWhereInput']
    OR: List['TeamManagerWhereInput']
    NOT: List['TeamManagerWhereInput']



# aggregate TeamManager types


class TeamManagerScalarWhereWithAggregatesInput(TypedDict, total=False):
    """TeamManager arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    teamSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.TeamManagementRole'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['TeamManagerScalarWhereWithAggregatesInput']
    OR: List['TeamManagerScalarWhereWithAggregatesInput']
    NOT: List['TeamManagerScalarWhereWithAggregatesInput']



class TeamManagerGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    teamSeasonId: _str
    role: 'enums.TeamManagementRole'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'TeamManagerSumAggregateOutput'
    _avg: 'TeamManagerAvgAggregateOutput'
    _min: 'TeamManagerMinAggregateOutput'
    _max: 'TeamManagerMaxAggregateOutput'
    _count: 'TeamManagerCountAggregateOutput'


class TeamManagerAvgAggregateOutput(TypedDict, total=False):
    """TeamManager output for aggregating averages"""


class TeamManagerSumAggregateOutput(TypedDict, total=False):
    """TeamManager output for aggregating sums"""


class TeamManagerScalarAggregateOutput(TypedDict, total=False):
    """TeamManager output including scalar fields"""
    id: _str
    userId: _str
    teamSeasonId: _str
    role: 'enums.TeamManagementRole'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


TeamManagerMinAggregateOutput = TeamManagerScalarAggregateOutput
TeamManagerMaxAggregateOutput = TeamManagerScalarAggregateOutput


class TeamManagerMaxAggregateInput(TypedDict, total=False):
    """TeamManager input for aggregating by max"""
    id: bool
    userId: bool
    teamSeasonId: bool
    role: bool
    createdAt: bool
    updatedAt: bool


class TeamManagerMinAggregateInput(TypedDict, total=False):
    """TeamManager input for aggregating by min"""
    id: bool
    userId: bool
    teamSeasonId: bool
    role: bool
    createdAt: bool
    updatedAt: bool


class TeamManagerNumberAggregateInput(TypedDict, total=False):
    """TeamManager input for aggregating numbers"""


TeamManagerAvgAggregateInput = TeamManagerNumberAggregateInput
TeamManagerSumAggregateInput = TeamManagerNumberAggregateInput


TeamManagerCountAggregateInput = TypedDict(
    'TeamManagerCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'teamSeasonId': bool,
        'role': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

TeamManagerCountAggregateOutput = TypedDict(
    'TeamManagerCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'teamSeasonId': int,
        'role': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


TeamManagerKeys = Literal[
    'id',
    'userId',
    'teamSeasonId',
    'role',
    'createdAt',
    'updatedAt',
    'user',
    'teamSeason',
]
TeamManagerScalarFieldKeys = Literal[
    'id',
    'userId',
    'teamSeasonId',
    'role',
    'createdAt',
    'updatedAt',
]
TeamManagerScalarFieldKeysT = TypeVar('TeamManagerScalarFieldKeysT', bound=TeamManagerScalarFieldKeys)

TeamManagerRelationalFieldKeys = Literal[
        'user',
        'teamSeason',
    ]

# Bid types

class BidOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Bid create method"""
    id: _str
    contract: 'ContractCreateNestedWithoutRelationsInput'
    contractId: _str
    teamSeason: 'TeamSeasonCreateNestedWithoutRelationsInput'
    teamSeasonId: _str
    status: 'enums.BidStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BidCreateInput(BidOptionalCreateInput):
    """Required arguments to the Bid create method"""
    amount: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class BidOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Bid create method, without relations"""
    id: _str
    contractId: _str
    teamSeasonId: _str
    status: 'enums.BidStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BidCreateWithoutRelationsInput(BidOptionalCreateWithoutRelationsInput):
    """Required arguments to the Bid create method, without relations"""
    amount: _int

class BidConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'BidCreateWithoutRelationsInput'
    where: 'BidWhereUniqueInput'

class BidCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'BidCreateWithoutRelationsInput'
    connect: 'BidWhereUniqueInput'
    connect_or_create: 'BidConnectOrCreateWithoutRelationsInput'


class BidCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['BidCreateWithoutRelationsInput', List['BidCreateWithoutRelationsInput']]
    connect: Union['BidWhereUniqueInput', List['BidWhereUniqueInput']]
    connect_or_create: Union['BidConnectOrCreateWithoutRelationsInput', List['BidConnectOrCreateWithoutRelationsInput']]

_BidWhereUnique_id_Input = TypedDict(
    '_BidWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

BidWhereUniqueInput = _BidWhereUnique_id_Input


class BidUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    contract: 'ContractUpdateOneWithoutRelationsInput'
    teamSeason: 'TeamSeasonUpdateOneWithoutRelationsInput'
    amount: Union[AtomicIntInput, _int]
    status: 'enums.BidStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BidUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    amount: Union[AtomicIntInput, _int]
    status: 'enums.BidStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class BidUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['BidCreateWithoutRelationsInput']
    connect: List['BidWhereUniqueInput']
    connect_or_create: List['BidConnectOrCreateWithoutRelationsInput']
    set: List['BidWhereUniqueInput']
    disconnect: List['BidWhereUniqueInput']
    delete: List['BidWhereUniqueInput']

    # TODO
    # update: List['BidUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['BidUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['BidScalarWhereInput']
    # upsert: List['BidUpserteWithWhereUniqueWithoutRelationsInput']


class BidUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'BidCreateWithoutRelationsInput'
    connect: 'BidWhereUniqueInput'
    connect_or_create: 'BidConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'BidUpdateInput'
    # upsert: 'BidUpsertWithoutRelationsInput'


class BidUpsertInput(TypedDict):
    create: 'BidCreateInput'
    update: 'BidUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Bid_id_OrderByInput = TypedDict(
    '_Bid_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Bid_contractId_OrderByInput = TypedDict(
    '_Bid_contractId_OrderByInput',
    {
        'contractId': 'SortOrder',
    },
    total=True
)

_Bid_teamSeasonId_OrderByInput = TypedDict(
    '_Bid_teamSeasonId_OrderByInput',
    {
        'teamSeasonId': 'SortOrder',
    },
    total=True
)

_Bid_amount_OrderByInput = TypedDict(
    '_Bid_amount_OrderByInput',
    {
        'amount': 'SortOrder',
    },
    total=True
)

_Bid_status_OrderByInput = TypedDict(
    '_Bid_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Bid_createdAt_OrderByInput = TypedDict(
    '_Bid_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Bid_updatedAt_OrderByInput = TypedDict(
    '_Bid_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Bid_RelevanceInner = TypedDict(
    '_Bid_RelevanceInner',
    {
        'fields': 'List[BidScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Bid_RelevanceOrderByInput = TypedDict(
    '_Bid_RelevanceOrderByInput',
    {
        '_relevance': '_Bid_RelevanceInner',
    },
    total=True
)

BidOrderByInput = Union[
    '_Bid_id_OrderByInput',
    '_Bid_contractId_OrderByInput',
    '_Bid_teamSeasonId_OrderByInput',
    '_Bid_amount_OrderByInput',
    '_Bid_status_OrderByInput',
    '_Bid_createdAt_OrderByInput',
    '_Bid_updatedAt_OrderByInput',
    '_Bid_RelevanceOrderByInput',
]



# recursive Bid types
# TODO: cleanup these types



BidRelationFilter = TypedDict(
    'BidRelationFilter',
    {
        'is': 'BidWhereInput',
        'is_not': 'BidWhereInput',
    },
    total=False,
)


class BidListRelationFilter(TypedDict, total=False):
    some: 'BidWhereInput'
    none: 'BidWhereInput'
    every: 'BidWhereInput'


class BidInclude(TypedDict, total=False):
    """Bid relational arguments"""
    contract: Union[bool, 'ContractArgsFromBid']
    teamSeason: Union[bool, 'TeamSeasonArgsFromBid']


class ForumPostIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    author: Union[bool, 'UserArgsFromBid']
    comments: Union[bool, 'FindManyForumCommentArgsFromBid']
    reactions: Union[bool, 'FindManyForumReactionArgsFromBid']
    followers: Union[bool, 'FindManyForumFollowerArgsFromBid']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromBid']


class ForumPostArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']
    post: Union[bool, 'ForumPostArgsFromBid']
    comment: Union[bool, 'ForumCommentArgsFromBid']


class ForumReactionArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']
    post: Union[bool, 'ForumPostArgsFromBid']


class ForumFollowerArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']
    post: Union[bool, 'ForumPostArgsFromBid']


class ForumPostSubscriptionArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    author: Union[bool, 'UserArgsFromBid']
    post: Union[bool, 'ForumPostArgsFromBid']
    quotedComment: Union[bool, 'ForumCommentArgsFromBid']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromBid']
    reactions: Union[bool, 'FindManyForumReactionArgsFromBid']


class ForumCommentArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    parentLeague: Union[bool, 'LeagueArgsFromBid']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromBid']
    conferences: Union[bool, 'FindManyConferenceArgsFromBid']
    divisions: Union[bool, 'FindManyDivisionArgsFromBid']
    teams: Union[bool, 'FindManyTeamArgsFromBid']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromBid']


class LeagueArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    league: Union[bool, 'LeagueArgsFromBid']
    season: Union[bool, 'SeasonArgsFromBid']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromBid']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromBid']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromBid']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromBid']


class LeagueSeasonArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    league: Union[bool, 'LeagueArgsFromBid']
    divisions: Union[bool, 'FindManyDivisionArgsFromBid']


class ConferenceArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    conference: Union[bool, 'ConferenceArgsFromBid']
    league: Union[bool, 'LeagueArgsFromBid']
    teams: Union[bool, 'FindManyTeamArgsFromBid']


class DivisionArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromBid']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromBid']


class SeasonArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromBid']


class LeagueCommissionerArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromBid']


class LeagueBOGArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromBid']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromBid']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromBid']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromBid']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromBid']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromBid']


class MatchArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromBid']
    match: Union[bool, 'MatchArgsFromBid']


class ClubMatchStatsArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    customKit: Union[bool, 'CustomKitArgsFromBid']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromBid']


class ClubMatchStatsDetailsArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromBid']


class CustomKitArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    match: Union[bool, 'MatchArgsFromBid']


class ClubAggregateMatchStatsArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    match: Union[bool, 'MatchArgsFromBid']


class MatchAnalyticsArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    match: Union[bool, 'MatchArgsFromBid']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromBid']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromBid']


class PlayerMatchArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']
    season: Union[bool, 'SeasonArgsFromBid']
    contract: Union[bool, 'ContractArgsFromBid']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromBid']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromBid']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromBid']
    matches: Union[bool, 'FindManyMatchArgsFromBid']


class PlayerSeasonArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromBid']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromBid']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromBid']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromBid']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromBid']


class PlayerTeamSeasonArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromBid']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromBid']


class PlayerLeagueHistoryArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromBid']
    trophySummary: Union[bool, 'PSNTrophyArgsFromBid']
    games: Union[bool, 'FindManyPSNGameArgsFromBid']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromBid']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromBid']


class PSNProfileArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    profile: Union[bool, 'PSNProfileArgsFromBid']


class PSNAvatarArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    profile: Union[bool, 'PSNProfileArgsFromBid']


class PSNTrophyArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    profile: Union[bool, 'PSNProfileArgsFromBid']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromBid']


class PSNGameArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    profile: Union[bool, 'PSNProfileArgsFromBid']


class PSNSyncLogArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    profile: Union[bool, 'PSNProfileArgsFromBid']
    game: Union[bool, 'PSNGameArgsFromBid']


class PSNGameTrophiesArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    league: Union[bool, 'LeagueArgsFromBid']
    division: Union[bool, 'DivisionArgsFromBid']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromBid']
    nhlAffiliate: Union[bool, 'TeamArgsFromBid']
    ahlAffiliate: Union[bool, 'TeamArgsFromBid']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromBid']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromBid']


class TeamArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    team: Union[bool, 'TeamArgsFromBid']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromBid']
    matches: Union[bool, 'FindManyMatchArgsFromBid']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromBid']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromBid']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromBid']
    bids: Union[bool, 'FindManyBidArgsFromBid']
    managers: Union[bool, 'FindManyTeamManagerArgsFromBid']


class TeamSeasonArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']
    teamSeason: Union[bool, 'TeamSeasonArgsFromBid']


class TeamManagerArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    contract: Union[bool, 'ContractArgsFromBid']
    teamSeason: Union[bool, 'TeamSeasonArgsFromBid']


class BidArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromBid']
    bids: Union[bool, 'FindManyBidArgsFromBid']


class ContractArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    notifications: Union[bool, 'FindManyNotificationArgsFromBid']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromBid']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromBid']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromBid']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromBid']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromBid']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromBid']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromBid']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromBid']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromBid']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromBid']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromBid']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromBid']
    psnProfile: Union[bool, 'PSNProfileArgsFromBid']


class UserArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']


class EaIdHistoryArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']


class SystemHistoryArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']


class GamertagHistoryArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromBid(TypedDict, total=False):
    """Relational arguments for Bid"""
    user: Union[bool, 'UserArgsFromBid']


class NotificationArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromBid(TypedDict, total=False):
    """Arguments for Bid"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyBidArgs = FindManyBidArgsFromBid
FindFirstBidArgs = FindManyBidArgsFromBid


class BidWhereInput(TypedDict, total=False):
    """Bid arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    contract: 'ContractRelationFilter'
    contractId: Union[_str, 'types.StringFilter']
    teamSeason: 'TeamSeasonRelationFilter'
    teamSeasonId: Union[_str, 'types.StringFilter']
    amount: Union[_int, 'types.IntFilter']
    status: 'enums.BidStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['BidWhereInput', List['BidWhereInput']]
    # but this causes mypy to hang :/
    AND: List['BidWhereInput']
    OR: List['BidWhereInput']
    NOT: List['BidWhereInput']



# aggregate Bid types


class BidScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Bid arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    contractId: Union[_str, 'types.StringWithAggregatesFilter']
    teamSeasonId: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    status: 'enums.BidStatus'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['BidScalarWhereWithAggregatesInput']
    OR: List['BidScalarWhereWithAggregatesInput']
    NOT: List['BidScalarWhereWithAggregatesInput']



class BidGroupByOutput(TypedDict, total=False):
    id: _str
    contractId: _str
    teamSeasonId: _str
    amount: _int
    status: 'enums.BidStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'BidSumAggregateOutput'
    _avg: 'BidAvgAggregateOutput'
    _min: 'BidMinAggregateOutput'
    _max: 'BidMaxAggregateOutput'
    _count: 'BidCountAggregateOutput'


class BidAvgAggregateOutput(TypedDict, total=False):
    """Bid output for aggregating averages"""
    amount: float


class BidSumAggregateOutput(TypedDict, total=False):
    """Bid output for aggregating sums"""
    amount: _int


class BidScalarAggregateOutput(TypedDict, total=False):
    """Bid output including scalar fields"""
    id: _str
    contractId: _str
    teamSeasonId: _str
    amount: _int
    status: 'enums.BidStatus'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


BidMinAggregateOutput = BidScalarAggregateOutput
BidMaxAggregateOutput = BidScalarAggregateOutput


class BidMaxAggregateInput(TypedDict, total=False):
    """Bid input for aggregating by max"""
    id: bool
    contractId: bool
    teamSeasonId: bool
    amount: bool
    status: bool
    createdAt: bool
    updatedAt: bool


class BidMinAggregateInput(TypedDict, total=False):
    """Bid input for aggregating by min"""
    id: bool
    contractId: bool
    teamSeasonId: bool
    amount: bool
    status: bool
    createdAt: bool
    updatedAt: bool


class BidNumberAggregateInput(TypedDict, total=False):
    """Bid input for aggregating numbers"""
    amount: bool


BidAvgAggregateInput = BidNumberAggregateInput
BidSumAggregateInput = BidNumberAggregateInput


BidCountAggregateInput = TypedDict(
    'BidCountAggregateInput',
    {
        'id': bool,
        'contractId': bool,
        'teamSeasonId': bool,
        'amount': bool,
        'status': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

BidCountAggregateOutput = TypedDict(
    'BidCountAggregateOutput',
    {
        'id': int,
        'contractId': int,
        'teamSeasonId': int,
        'amount': int,
        'status': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


BidKeys = Literal[
    'id',
    'contract',
    'contractId',
    'teamSeason',
    'teamSeasonId',
    'amount',
    'status',
    'createdAt',
    'updatedAt',
]
BidScalarFieldKeys = Literal[
    'id',
    'contractId',
    'teamSeasonId',
    'amount',
    'status',
    'createdAt',
    'updatedAt',
]
BidScalarFieldKeysT = TypeVar('BidScalarFieldKeysT', bound=BidScalarFieldKeys)

BidRelationalFieldKeys = Literal[
        'contract',
        'teamSeason',
    ]

# Contract types

class ContractOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Contract create method"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    playerSeason: 'PlayerSeasonCreateNestedWithoutRelationsInput'
    bids: 'BidCreateManyNestedWithoutRelationsInput'


class ContractCreateInput(ContractOptionalCreateInput):
    """Required arguments to the Contract create method"""
    amount: _int


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ContractOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Contract create method, without relations"""
    id: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ContractCreateWithoutRelationsInput(ContractOptionalCreateWithoutRelationsInput):
    """Required arguments to the Contract create method, without relations"""
    amount: _int

class ContractConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ContractCreateWithoutRelationsInput'
    where: 'ContractWhereUniqueInput'

class ContractCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ContractCreateWithoutRelationsInput'
    connect: 'ContractWhereUniqueInput'
    connect_or_create: 'ContractConnectOrCreateWithoutRelationsInput'


class ContractCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ContractCreateWithoutRelationsInput', List['ContractCreateWithoutRelationsInput']]
    connect: Union['ContractWhereUniqueInput', List['ContractWhereUniqueInput']]
    connect_or_create: Union['ContractConnectOrCreateWithoutRelationsInput', List['ContractConnectOrCreateWithoutRelationsInput']]

_ContractWhereUnique_id_Input = TypedDict(
    '_ContractWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ContractWhereUniqueInput = _ContractWhereUnique_id_Input


class ContractUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    amount: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    playerSeason: 'PlayerSeasonUpdateOneWithoutRelationsInput'
    bids: 'BidUpdateManyWithoutRelationsInput'


class ContractUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    amount: Union[AtomicIntInput, _int]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class ContractUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ContractCreateWithoutRelationsInput']
    connect: List['ContractWhereUniqueInput']
    connect_or_create: List['ContractConnectOrCreateWithoutRelationsInput']
    set: List['ContractWhereUniqueInput']
    disconnect: List['ContractWhereUniqueInput']
    delete: List['ContractWhereUniqueInput']

    # TODO
    # update: List['ContractUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ContractUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ContractScalarWhereInput']
    # upsert: List['ContractUpserteWithWhereUniqueWithoutRelationsInput']


class ContractUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ContractCreateWithoutRelationsInput'
    connect: 'ContractWhereUniqueInput'
    connect_or_create: 'ContractConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ContractUpdateInput'
    # upsert: 'ContractUpsertWithoutRelationsInput'


class ContractUpsertInput(TypedDict):
    create: 'ContractCreateInput'
    update: 'ContractUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Contract_id_OrderByInput = TypedDict(
    '_Contract_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Contract_amount_OrderByInput = TypedDict(
    '_Contract_amount_OrderByInput',
    {
        'amount': 'SortOrder',
    },
    total=True
)

_Contract_createdAt_OrderByInput = TypedDict(
    '_Contract_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Contract_updatedAt_OrderByInput = TypedDict(
    '_Contract_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Contract_RelevanceInner = TypedDict(
    '_Contract_RelevanceInner',
    {
        'fields': 'List[ContractScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Contract_RelevanceOrderByInput = TypedDict(
    '_Contract_RelevanceOrderByInput',
    {
        '_relevance': '_Contract_RelevanceInner',
    },
    total=True
)

ContractOrderByInput = Union[
    '_Contract_id_OrderByInput',
    '_Contract_amount_OrderByInput',
    '_Contract_createdAt_OrderByInput',
    '_Contract_updatedAt_OrderByInput',
    '_Contract_RelevanceOrderByInput',
]



# recursive Contract types
# TODO: cleanup these types



ContractRelationFilter = TypedDict(
    'ContractRelationFilter',
    {
        'is': 'ContractWhereInput',
        'is_not': 'ContractWhereInput',
    },
    total=False,
)


class ContractListRelationFilter(TypedDict, total=False):
    some: 'ContractWhereInput'
    none: 'ContractWhereInput'
    every: 'ContractWhereInput'


class ContractInclude(TypedDict, total=False):
    """Contract relational arguments"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromContract']
    bids: Union[bool, 'FindManyBidArgsFromContract']


class ForumPostIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    author: Union[bool, 'UserArgsFromContract']
    comments: Union[bool, 'FindManyForumCommentArgsFromContract']
    reactions: Union[bool, 'FindManyForumReactionArgsFromContract']
    followers: Union[bool, 'FindManyForumFollowerArgsFromContract']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromContract']


class ForumPostArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']
    post: Union[bool, 'ForumPostArgsFromContract']
    comment: Union[bool, 'ForumCommentArgsFromContract']


class ForumReactionArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']
    post: Union[bool, 'ForumPostArgsFromContract']


class ForumFollowerArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']
    post: Union[bool, 'ForumPostArgsFromContract']


class ForumPostSubscriptionArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    author: Union[bool, 'UserArgsFromContract']
    post: Union[bool, 'ForumPostArgsFromContract']
    quotedComment: Union[bool, 'ForumCommentArgsFromContract']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromContract']
    reactions: Union[bool, 'FindManyForumReactionArgsFromContract']


class ForumCommentArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    parentLeague: Union[bool, 'LeagueArgsFromContract']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromContract']
    conferences: Union[bool, 'FindManyConferenceArgsFromContract']
    divisions: Union[bool, 'FindManyDivisionArgsFromContract']
    teams: Union[bool, 'FindManyTeamArgsFromContract']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromContract']


class LeagueArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    league: Union[bool, 'LeagueArgsFromContract']
    season: Union[bool, 'SeasonArgsFromContract']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromContract']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromContract']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromContract']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromContract']


class LeagueSeasonArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    league: Union[bool, 'LeagueArgsFromContract']
    divisions: Union[bool, 'FindManyDivisionArgsFromContract']


class ConferenceArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    conference: Union[bool, 'ConferenceArgsFromContract']
    league: Union[bool, 'LeagueArgsFromContract']
    teams: Union[bool, 'FindManyTeamArgsFromContract']


class DivisionArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromContract']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromContract']


class SeasonArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromContract']


class LeagueCommissionerArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromContract']


class LeagueBOGArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromContract']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromContract']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromContract']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromContract']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromContract']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromContract']


class MatchArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromContract']
    match: Union[bool, 'MatchArgsFromContract']


class ClubMatchStatsArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    customKit: Union[bool, 'CustomKitArgsFromContract']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromContract']


class ClubMatchStatsDetailsArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromContract']


class CustomKitArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    match: Union[bool, 'MatchArgsFromContract']


class ClubAggregateMatchStatsArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    match: Union[bool, 'MatchArgsFromContract']


class MatchAnalyticsArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    match: Union[bool, 'MatchArgsFromContract']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromContract']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromContract']


class PlayerMatchArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']
    season: Union[bool, 'SeasonArgsFromContract']
    contract: Union[bool, 'ContractArgsFromContract']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromContract']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromContract']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromContract']
    matches: Union[bool, 'FindManyMatchArgsFromContract']


class PlayerSeasonArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromContract']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromContract']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromContract']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromContract']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromContract']


class PlayerTeamSeasonArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromContract']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromContract']


class PlayerLeagueHistoryArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromContract']
    trophySummary: Union[bool, 'PSNTrophyArgsFromContract']
    games: Union[bool, 'FindManyPSNGameArgsFromContract']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromContract']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromContract']


class PSNProfileArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    profile: Union[bool, 'PSNProfileArgsFromContract']


class PSNAvatarArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    profile: Union[bool, 'PSNProfileArgsFromContract']


class PSNTrophyArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    profile: Union[bool, 'PSNProfileArgsFromContract']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromContract']


class PSNGameArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    profile: Union[bool, 'PSNProfileArgsFromContract']


class PSNSyncLogArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    profile: Union[bool, 'PSNProfileArgsFromContract']
    game: Union[bool, 'PSNGameArgsFromContract']


class PSNGameTrophiesArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    league: Union[bool, 'LeagueArgsFromContract']
    division: Union[bool, 'DivisionArgsFromContract']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromContract']
    nhlAffiliate: Union[bool, 'TeamArgsFromContract']
    ahlAffiliate: Union[bool, 'TeamArgsFromContract']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromContract']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromContract']


class TeamArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    team: Union[bool, 'TeamArgsFromContract']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromContract']
    matches: Union[bool, 'FindManyMatchArgsFromContract']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromContract']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromContract']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromContract']
    bids: Union[bool, 'FindManyBidArgsFromContract']
    managers: Union[bool, 'FindManyTeamManagerArgsFromContract']


class TeamSeasonArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']
    teamSeason: Union[bool, 'TeamSeasonArgsFromContract']


class TeamManagerArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    contract: Union[bool, 'ContractArgsFromContract']
    teamSeason: Union[bool, 'TeamSeasonArgsFromContract']


class BidArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromContract']
    bids: Union[bool, 'FindManyBidArgsFromContract']


class ContractArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    notifications: Union[bool, 'FindManyNotificationArgsFromContract']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromContract']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromContract']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromContract']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromContract']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromContract']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromContract']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromContract']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromContract']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromContract']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromContract']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromContract']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromContract']
    psnProfile: Union[bool, 'PSNProfileArgsFromContract']


class UserArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']


class EaIdHistoryArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']


class SystemHistoryArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']


class GamertagHistoryArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromContract(TypedDict, total=False):
    """Relational arguments for Contract"""
    user: Union[bool, 'UserArgsFromContract']


class NotificationArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromContract(TypedDict, total=False):
    """Arguments for Contract"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyContractArgs = FindManyContractArgsFromContract
FindFirstContractArgs = FindManyContractArgsFromContract


class ContractWhereInput(TypedDict, total=False):
    """Contract arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    amount: Union[_int, 'types.IntFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    playerSeason: 'PlayerSeasonRelationFilter'
    bids: 'BidListRelationFilter'

    # should be noted that AND and NOT should be Union['ContractWhereInput', List['ContractWhereInput']]
    # but this causes mypy to hang :/
    AND: List['ContractWhereInput']
    OR: List['ContractWhereInput']
    NOT: List['ContractWhereInput']



# aggregate Contract types


class ContractScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Contract arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    amount: Union[_int, 'types.IntWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['ContractScalarWhereWithAggregatesInput']
    OR: List['ContractScalarWhereWithAggregatesInput']
    NOT: List['ContractScalarWhereWithAggregatesInput']



class ContractGroupByOutput(TypedDict, total=False):
    id: _str
    amount: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'ContractSumAggregateOutput'
    _avg: 'ContractAvgAggregateOutput'
    _min: 'ContractMinAggregateOutput'
    _max: 'ContractMaxAggregateOutput'
    _count: 'ContractCountAggregateOutput'


class ContractAvgAggregateOutput(TypedDict, total=False):
    """Contract output for aggregating averages"""
    amount: float


class ContractSumAggregateOutput(TypedDict, total=False):
    """Contract output for aggregating sums"""
    amount: _int


class ContractScalarAggregateOutput(TypedDict, total=False):
    """Contract output including scalar fields"""
    id: _str
    amount: _int
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


ContractMinAggregateOutput = ContractScalarAggregateOutput
ContractMaxAggregateOutput = ContractScalarAggregateOutput


class ContractMaxAggregateInput(TypedDict, total=False):
    """Contract input for aggregating by max"""
    id: bool
    amount: bool
    createdAt: bool
    updatedAt: bool


class ContractMinAggregateInput(TypedDict, total=False):
    """Contract input for aggregating by min"""
    id: bool
    amount: bool
    createdAt: bool
    updatedAt: bool


class ContractNumberAggregateInput(TypedDict, total=False):
    """Contract input for aggregating numbers"""
    amount: bool


ContractAvgAggregateInput = ContractNumberAggregateInput
ContractSumAggregateInput = ContractNumberAggregateInput


ContractCountAggregateInput = TypedDict(
    'ContractCountAggregateInput',
    {
        'id': bool,
        'amount': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

ContractCountAggregateOutput = TypedDict(
    'ContractCountAggregateOutput',
    {
        'id': int,
        'amount': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


ContractKeys = Literal[
    'id',
    'amount',
    'createdAt',
    'updatedAt',
    'playerSeason',
    'bids',
]
ContractScalarFieldKeys = Literal[
    'id',
    'amount',
    'createdAt',
    'updatedAt',
]
ContractScalarFieldKeysT = TypeVar('ContractScalarFieldKeysT', bound=ContractScalarFieldKeys)

ContractRelationalFieldKeys = Literal[
        'playerSeason',
        'bids',
    ]

# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    name: Optional[_str]
    role: 'enums.UserRole'
    avatarUrl: Optional[_str]
    isSuperAdmin: _bool
    isAdmin: _bool
    isCommissioner: _bool
    isBog: _bool
    isTeamManager: _bool
    passwordResetToken: Optional[_str]
    passwordResetTokenExpiresAt: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    notifications: 'NotificationCreateManyNestedWithoutRelationsInput'
    forumPosts: 'ForumPostCreateManyNestedWithoutRelationsInput'
    forumComments: 'ForumCommentCreateManyNestedWithoutRelationsInput'
    forumReactions: 'ForumReactionCreateManyNestedWithoutRelationsInput'
    forumFollowing: 'ForumFollowerCreateManyNestedWithoutRelationsInput'
    forumSubscriptions: 'ForumPostSubscriptionCreateManyNestedWithoutRelationsInput'
    currentEaId: Optional[_str]
    activeSystem: Optional['enums.System']
    eaIdHistory: 'EaIdHistoryCreateManyNestedWithoutRelationsInput'
    systemHistory: 'SystemHistoryCreateManyNestedWithoutRelationsInput'
    gamertags: 'GamertagHistoryCreateManyNestedWithoutRelationsInput'
    leagueCommissioners: 'LeagueCommissionerCreateManyNestedWithoutRelationsInput'
    leagueBogs: 'LeagueBOGCreateManyNestedWithoutRelationsInput'
    activeSeasons: 'PlayerSeasonCreateManyNestedWithoutRelationsInput'
    teamManagement: 'TeamManagerCreateManyNestedWithoutRelationsInput'
    psnProfile: 'PSNProfileCreateNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    email: _str
    username: _str
    password: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    name: Optional[_str]
    role: 'enums.UserRole'
    avatarUrl: Optional[_str]
    isSuperAdmin: _bool
    isAdmin: _bool
    isCommissioner: _bool
    isBog: _bool
    isTeamManager: _bool
    passwordResetToken: Optional[_str]
    passwordResetTokenExpiresAt: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    currentEaId: Optional[_str]
    activeSystem: Optional['enums.System']


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    email: _str
    username: _str
    password: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

_UserWhereUnique_username_Input = TypedDict(
    '_UserWhereUnique_username_Input',
    {
        'username': '_str',
    },
    total=True
)

_UserWhereUnique_passwordResetToken_Input = TypedDict(
    '_UserWhereUnique_passwordResetToken_Input',
    {
        'passwordResetToken': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
    '_UserWhereUnique_username_Input',
    '_UserWhereUnique_passwordResetToken_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    email: _str
    username: _str
    password: _str
    name: Optional[_str]
    role: 'enums.UserRole'
    avatarUrl: Optional[_str]
    isSuperAdmin: _bool
    isAdmin: _bool
    isCommissioner: _bool
    isBog: _bool
    isTeamManager: _bool
    passwordResetToken: Optional[_str]
    passwordResetTokenExpiresAt: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    notifications: 'NotificationUpdateManyWithoutRelationsInput'
    forumPosts: 'ForumPostUpdateManyWithoutRelationsInput'
    forumComments: 'ForumCommentUpdateManyWithoutRelationsInput'
    forumReactions: 'ForumReactionUpdateManyWithoutRelationsInput'
    forumFollowing: 'ForumFollowerUpdateManyWithoutRelationsInput'
    forumSubscriptions: 'ForumPostSubscriptionUpdateManyWithoutRelationsInput'
    currentEaId: Optional[_str]
    activeSystem: Optional['enums.System']
    eaIdHistory: 'EaIdHistoryUpdateManyWithoutRelationsInput'
    systemHistory: 'SystemHistoryUpdateManyWithoutRelationsInput'
    gamertags: 'GamertagHistoryUpdateManyWithoutRelationsInput'
    leagueCommissioners: 'LeagueCommissionerUpdateManyWithoutRelationsInput'
    leagueBogs: 'LeagueBOGUpdateManyWithoutRelationsInput'
    activeSeasons: 'PlayerSeasonUpdateManyWithoutRelationsInput'
    teamManagement: 'TeamManagerUpdateManyWithoutRelationsInput'
    psnProfile: 'PSNProfileUpdateOneWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    email: _str
    username: _str
    password: _str
    name: Optional[_str]
    role: 'enums.UserRole'
    avatarUrl: Optional[_str]
    isSuperAdmin: _bool
    isAdmin: _bool
    isCommissioner: _bool
    isBog: _bool
    isTeamManager: _bool
    passwordResetToken: Optional[_str]
    passwordResetTokenExpiresAt: Optional[datetime.datetime]
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    currentEaId: Optional[_str]
    activeSystem: Optional['enums.System']


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_username_OrderByInput = TypedDict(
    '_User_username_OrderByInput',
    {
        'username': 'SortOrder',
    },
    total=True
)

_User_password_OrderByInput = TypedDict(
    '_User_password_OrderByInput',
    {
        'password': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_avatarUrl_OrderByInput = TypedDict(
    '_User_avatarUrl_OrderByInput',
    {
        'avatarUrl': 'SortOrder',
    },
    total=True
)

_User_isSuperAdmin_OrderByInput = TypedDict(
    '_User_isSuperAdmin_OrderByInput',
    {
        'isSuperAdmin': 'SortOrder',
    },
    total=True
)

_User_isAdmin_OrderByInput = TypedDict(
    '_User_isAdmin_OrderByInput',
    {
        'isAdmin': 'SortOrder',
    },
    total=True
)

_User_isCommissioner_OrderByInput = TypedDict(
    '_User_isCommissioner_OrderByInput',
    {
        'isCommissioner': 'SortOrder',
    },
    total=True
)

_User_isBog_OrderByInput = TypedDict(
    '_User_isBog_OrderByInput',
    {
        'isBog': 'SortOrder',
    },
    total=True
)

_User_isTeamManager_OrderByInput = TypedDict(
    '_User_isTeamManager_OrderByInput',
    {
        'isTeamManager': 'SortOrder',
    },
    total=True
)

_User_passwordResetToken_OrderByInput = TypedDict(
    '_User_passwordResetToken_OrderByInput',
    {
        'passwordResetToken': 'SortOrder',
    },
    total=True
)

_User_passwordResetTokenExpiresAt_OrderByInput = TypedDict(
    '_User_passwordResetTokenExpiresAt_OrderByInput',
    {
        'passwordResetTokenExpiresAt': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_updatedAt_OrderByInput = TypedDict(
    '_User_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_User_currentEaId_OrderByInput = TypedDict(
    '_User_currentEaId_OrderByInput',
    {
        'currentEaId': 'SortOrder',
    },
    total=True
)

_User_activeSystem_OrderByInput = TypedDict(
    '_User_activeSystem_OrderByInput',
    {
        'activeSystem': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_email_OrderByInput',
    '_User_username_OrderByInput',
    '_User_password_OrderByInput',
    '_User_name_OrderByInput',
    '_User_role_OrderByInput',
    '_User_avatarUrl_OrderByInput',
    '_User_isSuperAdmin_OrderByInput',
    '_User_isAdmin_OrderByInput',
    '_User_isCommissioner_OrderByInput',
    '_User_isBog_OrderByInput',
    '_User_isTeamManager_OrderByInput',
    '_User_passwordResetToken_OrderByInput',
    '_User_passwordResetTokenExpiresAt_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_updatedAt_OrderByInput',
    '_User_currentEaId_OrderByInput',
    '_User_activeSystem_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types



UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'UserWhereInput',
        'is_not': 'UserWhereInput',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'UserWhereInput'
    none: 'UserWhereInput'
    every: 'UserWhereInput'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    notifications: Union[bool, 'FindManyNotificationArgsFromUser']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromUser']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromUser']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromUser']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromUser']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromUser']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromUser']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromUser']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromUser']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromUser']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromUser']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromUser']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromUser']
    psnProfile: Union[bool, 'PSNProfileArgsFromUser']


class ForumPostIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUser']
    comments: Union[bool, 'FindManyForumCommentArgsFromUser']
    reactions: Union[bool, 'FindManyForumReactionArgsFromUser']
    followers: Union[bool, 'FindManyForumFollowerArgsFromUser']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromUser']


class ForumPostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']
    post: Union[bool, 'ForumPostArgsFromUser']
    comment: Union[bool, 'ForumCommentArgsFromUser']


class ForumReactionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']
    post: Union[bool, 'ForumPostArgsFromUser']


class ForumFollowerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']
    post: Union[bool, 'ForumPostArgsFromUser']


class ForumPostSubscriptionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    author: Union[bool, 'UserArgsFromUser']
    post: Union[bool, 'ForumPostArgsFromUser']
    quotedComment: Union[bool, 'ForumCommentArgsFromUser']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromUser']
    reactions: Union[bool, 'FindManyForumReactionArgsFromUser']


class ForumCommentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    parentLeague: Union[bool, 'LeagueArgsFromUser']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromUser']
    conferences: Union[bool, 'FindManyConferenceArgsFromUser']
    divisions: Union[bool, 'FindManyDivisionArgsFromUser']
    teams: Union[bool, 'FindManyTeamArgsFromUser']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromUser']


class LeagueArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    league: Union[bool, 'LeagueArgsFromUser']
    season: Union[bool, 'SeasonArgsFromUser']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromUser']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromUser']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromUser']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromUser']


class LeagueSeasonArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    league: Union[bool, 'LeagueArgsFromUser']
    divisions: Union[bool, 'FindManyDivisionArgsFromUser']


class ConferenceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    conference: Union[bool, 'ConferenceArgsFromUser']
    league: Union[bool, 'LeagueArgsFromUser']
    teams: Union[bool, 'FindManyTeamArgsFromUser']


class DivisionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromUser']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromUser']


class SeasonArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromUser']


class LeagueCommissionerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromUser']


class LeagueBOGArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromUser']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromUser']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromUser']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromUser']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromUser']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromUser']


class MatchArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromUser']
    match: Union[bool, 'MatchArgsFromUser']


class ClubMatchStatsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    customKit: Union[bool, 'CustomKitArgsFromUser']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromUser']


class ClubMatchStatsDetailsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromUser']


class CustomKitArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    match: Union[bool, 'MatchArgsFromUser']


class ClubAggregateMatchStatsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    match: Union[bool, 'MatchArgsFromUser']


class MatchAnalyticsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    match: Union[bool, 'MatchArgsFromUser']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromUser']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromUser']


class PlayerMatchArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']
    season: Union[bool, 'SeasonArgsFromUser']
    contract: Union[bool, 'ContractArgsFromUser']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromUser']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromUser']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromUser']
    matches: Union[bool, 'FindManyMatchArgsFromUser']


class PlayerSeasonArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromUser']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromUser']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromUser']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromUser']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromUser']


class PlayerTeamSeasonArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromUser']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromUser']


class PlayerLeagueHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromUser']
    trophySummary: Union[bool, 'PSNTrophyArgsFromUser']
    games: Union[bool, 'FindManyPSNGameArgsFromUser']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromUser']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromUser']


class PSNProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    profile: Union[bool, 'PSNProfileArgsFromUser']


class PSNAvatarArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    profile: Union[bool, 'PSNProfileArgsFromUser']


class PSNTrophyArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    profile: Union[bool, 'PSNProfileArgsFromUser']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromUser']


class PSNGameArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    profile: Union[bool, 'PSNProfileArgsFromUser']


class PSNSyncLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    profile: Union[bool, 'PSNProfileArgsFromUser']
    game: Union[bool, 'PSNGameArgsFromUser']


class PSNGameTrophiesArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    league: Union[bool, 'LeagueArgsFromUser']
    division: Union[bool, 'DivisionArgsFromUser']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromUser']
    nhlAffiliate: Union[bool, 'TeamArgsFromUser']
    ahlAffiliate: Union[bool, 'TeamArgsFromUser']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromUser']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromUser']


class TeamArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    team: Union[bool, 'TeamArgsFromUser']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromUser']
    matches: Union[bool, 'FindManyMatchArgsFromUser']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromUser']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromUser']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromUser']
    bids: Union[bool, 'FindManyBidArgsFromUser']
    managers: Union[bool, 'FindManyTeamManagerArgsFromUser']


class TeamSeasonArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']
    teamSeason: Union[bool, 'TeamSeasonArgsFromUser']


class TeamManagerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    contract: Union[bool, 'ContractArgsFromUser']
    teamSeason: Union[bool, 'TeamSeasonArgsFromUser']


class BidArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromUser']
    bids: Union[bool, 'FindManyBidArgsFromUser']


class ContractArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    notifications: Union[bool, 'FindManyNotificationArgsFromUser']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromUser']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromUser']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromUser']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromUser']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromUser']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromUser']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromUser']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromUser']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromUser']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromUser']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromUser']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromUser']
    psnProfile: Union[bool, 'PSNProfileArgsFromUser']


class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']


class EaIdHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']


class SystemHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']


class GamertagHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    user: Union[bool, 'UserArgsFromUser']


class NotificationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    username: Union[_str, 'types.StringFilter']
    password: Union[_str, 'types.StringFilter']
    name: Union[None, _str, 'types.StringFilter']
    role: 'enums.UserRole'
    avatarUrl: Union[None, _str, 'types.StringFilter']
    isSuperAdmin: Union[_bool, 'types.BooleanFilter']
    isAdmin: Union[_bool, 'types.BooleanFilter']
    isCommissioner: Union[_bool, 'types.BooleanFilter']
    isBog: Union[_bool, 'types.BooleanFilter']
    isTeamManager: Union[_bool, 'types.BooleanFilter']
    passwordResetToken: Union[None, _str, 'types.StringFilter']
    passwordResetTokenExpiresAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    notifications: 'NotificationListRelationFilter'
    forumPosts: 'ForumPostListRelationFilter'
    forumComments: 'ForumCommentListRelationFilter'
    forumReactions: 'ForumReactionListRelationFilter'
    forumFollowing: 'ForumFollowerListRelationFilter'
    forumSubscriptions: 'ForumPostSubscriptionListRelationFilter'
    currentEaId: Union[None, _str, 'types.StringFilter']
    activeSystem: 'enums.System'
    eaIdHistory: 'EaIdHistoryListRelationFilter'
    systemHistory: 'SystemHistoryListRelationFilter'
    gamertags: 'GamertagHistoryListRelationFilter'
    leagueCommissioners: 'LeagueCommissionerListRelationFilter'
    leagueBogs: 'LeagueBOGListRelationFilter'
    activeSeasons: 'PlayerSeasonListRelationFilter'
    teamManagement: 'TeamManagerListRelationFilter'
    psnProfile: 'PSNProfileRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInput', List['UserWhereInput']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInput']
    OR: List['UserWhereInput']
    NOT: List['UserWhereInput']



# aggregate User types


class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    username: Union[_str, 'types.StringWithAggregatesFilter']
    password: Union[_str, 'types.StringWithAggregatesFilter']
    name: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.UserRole'
    avatarUrl: Union[_str, 'types.StringWithAggregatesFilter']
    isSuperAdmin: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isAdmin: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isCommissioner: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isBog: Union[_bool, 'types.BooleanWithAggregatesFilter']
    isTeamManager: Union[_bool, 'types.BooleanWithAggregatesFilter']
    passwordResetToken: Union[_str, 'types.StringWithAggregatesFilter']
    passwordResetTokenExpiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    currentEaId: Union[_str, 'types.StringWithAggregatesFilter']
    activeSystem: 'enums.System'

    AND: List['UserScalarWhereWithAggregatesInput']
    OR: List['UserScalarWhereWithAggregatesInput']
    NOT: List['UserScalarWhereWithAggregatesInput']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    email: _str
    username: _str
    password: _str
    name: _str
    role: 'enums.UserRole'
    avatarUrl: _str
    isSuperAdmin: _bool
    isAdmin: _bool
    isCommissioner: _bool
    isBog: _bool
    isTeamManager: _bool
    passwordResetToken: _str
    passwordResetTokenExpiresAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    currentEaId: _str
    activeSystem: 'enums.System'
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    email: _str
    username: _str
    password: _str
    name: _str
    role: 'enums.UserRole'
    avatarUrl: _str
    isSuperAdmin: _bool
    isAdmin: _bool
    isCommissioner: _bool
    isBog: _bool
    isTeamManager: _bool
    passwordResetToken: _str
    passwordResetTokenExpiresAt: datetime.datetime
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    currentEaId: _str
    activeSystem: 'enums.System'


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    email: bool
    username: bool
    password: bool
    name: bool
    role: bool
    avatarUrl: bool
    isSuperAdmin: bool
    isAdmin: bool
    isCommissioner: bool
    isBog: bool
    isTeamManager: bool
    passwordResetToken: bool
    passwordResetTokenExpiresAt: bool
    createdAt: bool
    updatedAt: bool
    currentEaId: bool
    activeSystem: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    email: bool
    username: bool
    password: bool
    name: bool
    role: bool
    avatarUrl: bool
    isSuperAdmin: bool
    isAdmin: bool
    isCommissioner: bool
    isBog: bool
    isTeamManager: bool
    passwordResetToken: bool
    passwordResetTokenExpiresAt: bool
    createdAt: bool
    updatedAt: bool
    currentEaId: bool
    activeSystem: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'email': bool,
        'username': bool,
        'password': bool,
        'name': bool,
        'role': bool,
        'avatarUrl': bool,
        'isSuperAdmin': bool,
        'isAdmin': bool,
        'isCommissioner': bool,
        'isBog': bool,
        'isTeamManager': bool,
        'passwordResetToken': bool,
        'passwordResetTokenExpiresAt': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'currentEaId': bool,
        'activeSystem': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'email': int,
        'username': int,
        'password': int,
        'name': int,
        'role': int,
        'avatarUrl': int,
        'isSuperAdmin': int,
        'isAdmin': int,
        'isCommissioner': int,
        'isBog': int,
        'isTeamManager': int,
        'passwordResetToken': int,
        'passwordResetTokenExpiresAt': int,
        'createdAt': int,
        'updatedAt': int,
        'currentEaId': int,
        'activeSystem': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'email',
    'username',
    'password',
    'name',
    'role',
    'avatarUrl',
    'isSuperAdmin',
    'isAdmin',
    'isCommissioner',
    'isBog',
    'isTeamManager',
    'passwordResetToken',
    'passwordResetTokenExpiresAt',
    'createdAt',
    'updatedAt',
    'notifications',
    'forumPosts',
    'forumComments',
    'forumReactions',
    'forumFollowing',
    'forumSubscriptions',
    'currentEaId',
    'activeSystem',
    'eaIdHistory',
    'systemHistory',
    'gamertags',
    'leagueCommissioners',
    'leagueBogs',
    'activeSeasons',
    'teamManagement',
    'psnProfile',
]
UserScalarFieldKeys = Literal[
    'id',
    'email',
    'username',
    'password',
    'name',
    'role',
    'avatarUrl',
    'isSuperAdmin',
    'isAdmin',
    'isCommissioner',
    'isBog',
    'isTeamManager',
    'passwordResetToken',
    'passwordResetTokenExpiresAt',
    'createdAt',
    'updatedAt',
    'currentEaId',
    'activeSystem',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'notifications',
        'forumPosts',
        'forumComments',
        'forumReactions',
        'forumFollowing',
        'forumSubscriptions',
        'eaIdHistory',
        'systemHistory',
        'gamertags',
        'leagueCommissioners',
        'leagueBogs',
        'activeSeasons',
        'teamManagement',
        'psnProfile',
    ]

# EaIdHistory types

class EaIdHistoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the EaIdHistory create method"""
    id: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class EaIdHistoryCreateInput(EaIdHistoryOptionalCreateInput):
    """Required arguments to the EaIdHistory create method"""
    eaId: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class EaIdHistoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the EaIdHistory create method, without relations"""
    id: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class EaIdHistoryCreateWithoutRelationsInput(EaIdHistoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the EaIdHistory create method, without relations"""
    eaId: _str

class EaIdHistoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'EaIdHistoryCreateWithoutRelationsInput'
    where: 'EaIdHistoryWhereUniqueInput'

class EaIdHistoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'EaIdHistoryCreateWithoutRelationsInput'
    connect: 'EaIdHistoryWhereUniqueInput'
    connect_or_create: 'EaIdHistoryConnectOrCreateWithoutRelationsInput'


class EaIdHistoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['EaIdHistoryCreateWithoutRelationsInput', List['EaIdHistoryCreateWithoutRelationsInput']]
    connect: Union['EaIdHistoryWhereUniqueInput', List['EaIdHistoryWhereUniqueInput']]
    connect_or_create: Union['EaIdHistoryConnectOrCreateWithoutRelationsInput', List['EaIdHistoryConnectOrCreateWithoutRelationsInput']]

_EaIdHistoryWhereUnique_id_Input = TypedDict(
    '_EaIdHistoryWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

EaIdHistoryWhereUniqueInput = _EaIdHistoryWhereUnique_id_Input


class EaIdHistoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    eaId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class EaIdHistoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    eaId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class EaIdHistoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['EaIdHistoryCreateWithoutRelationsInput']
    connect: List['EaIdHistoryWhereUniqueInput']
    connect_or_create: List['EaIdHistoryConnectOrCreateWithoutRelationsInput']
    set: List['EaIdHistoryWhereUniqueInput']
    disconnect: List['EaIdHistoryWhereUniqueInput']
    delete: List['EaIdHistoryWhereUniqueInput']

    # TODO
    # update: List['EaIdHistoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['EaIdHistoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['EaIdHistoryScalarWhereInput']
    # upsert: List['EaIdHistoryUpserteWithWhereUniqueWithoutRelationsInput']


class EaIdHistoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'EaIdHistoryCreateWithoutRelationsInput'
    connect: 'EaIdHistoryWhereUniqueInput'
    connect_or_create: 'EaIdHistoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'EaIdHistoryUpdateInput'
    # upsert: 'EaIdHistoryUpsertWithoutRelationsInput'


class EaIdHistoryUpsertInput(TypedDict):
    create: 'EaIdHistoryCreateInput'
    update: 'EaIdHistoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_EaIdHistory_id_OrderByInput = TypedDict(
    '_EaIdHistory_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_EaIdHistory_userId_OrderByInput = TypedDict(
    '_EaIdHistory_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_EaIdHistory_eaId_OrderByInput = TypedDict(
    '_EaIdHistory_eaId_OrderByInput',
    {
        'eaId': 'SortOrder',
    },
    total=True
)

_EaIdHistory_createdAt_OrderByInput = TypedDict(
    '_EaIdHistory_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_EaIdHistory_updatedAt_OrderByInput = TypedDict(
    '_EaIdHistory_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_EaIdHistory_RelevanceInner = TypedDict(
    '_EaIdHistory_RelevanceInner',
    {
        'fields': 'List[EaIdHistoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_EaIdHistory_RelevanceOrderByInput = TypedDict(
    '_EaIdHistory_RelevanceOrderByInput',
    {
        '_relevance': '_EaIdHistory_RelevanceInner',
    },
    total=True
)

EaIdHistoryOrderByInput = Union[
    '_EaIdHistory_id_OrderByInput',
    '_EaIdHistory_userId_OrderByInput',
    '_EaIdHistory_eaId_OrderByInput',
    '_EaIdHistory_createdAt_OrderByInput',
    '_EaIdHistory_updatedAt_OrderByInput',
    '_EaIdHistory_RelevanceOrderByInput',
]



# recursive EaIdHistory types
# TODO: cleanup these types



EaIdHistoryRelationFilter = TypedDict(
    'EaIdHistoryRelationFilter',
    {
        'is': 'EaIdHistoryWhereInput',
        'is_not': 'EaIdHistoryWhereInput',
    },
    total=False,
)


class EaIdHistoryListRelationFilter(TypedDict, total=False):
    some: 'EaIdHistoryWhereInput'
    none: 'EaIdHistoryWhereInput'
    every: 'EaIdHistoryWhereInput'


class EaIdHistoryInclude(TypedDict, total=False):
    """EaIdHistory relational arguments"""
    user: Union[bool, 'UserArgsFromEaIdHistory']


class ForumPostIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    author: Union[bool, 'UserArgsFromEaIdHistory']
    comments: Union[bool, 'FindManyForumCommentArgsFromEaIdHistory']
    reactions: Union[bool, 'FindManyForumReactionArgsFromEaIdHistory']
    followers: Union[bool, 'FindManyForumFollowerArgsFromEaIdHistory']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromEaIdHistory']


class ForumPostArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']
    post: Union[bool, 'ForumPostArgsFromEaIdHistory']
    comment: Union[bool, 'ForumCommentArgsFromEaIdHistory']


class ForumReactionArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']
    post: Union[bool, 'ForumPostArgsFromEaIdHistory']


class ForumFollowerArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']
    post: Union[bool, 'ForumPostArgsFromEaIdHistory']


class ForumPostSubscriptionArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    author: Union[bool, 'UserArgsFromEaIdHistory']
    post: Union[bool, 'ForumPostArgsFromEaIdHistory']
    quotedComment: Union[bool, 'ForumCommentArgsFromEaIdHistory']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromEaIdHistory']
    reactions: Union[bool, 'FindManyForumReactionArgsFromEaIdHistory']


class ForumCommentArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    parentLeague: Union[bool, 'LeagueArgsFromEaIdHistory']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromEaIdHistory']
    conferences: Union[bool, 'FindManyConferenceArgsFromEaIdHistory']
    divisions: Union[bool, 'FindManyDivisionArgsFromEaIdHistory']
    teams: Union[bool, 'FindManyTeamArgsFromEaIdHistory']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromEaIdHistory']


class LeagueArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    league: Union[bool, 'LeagueArgsFromEaIdHistory']
    season: Union[bool, 'SeasonArgsFromEaIdHistory']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromEaIdHistory']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromEaIdHistory']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromEaIdHistory']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromEaIdHistory']


class LeagueSeasonArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    league: Union[bool, 'LeagueArgsFromEaIdHistory']
    divisions: Union[bool, 'FindManyDivisionArgsFromEaIdHistory']


class ConferenceArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    conference: Union[bool, 'ConferenceArgsFromEaIdHistory']
    league: Union[bool, 'LeagueArgsFromEaIdHistory']
    teams: Union[bool, 'FindManyTeamArgsFromEaIdHistory']


class DivisionArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromEaIdHistory']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromEaIdHistory']


class SeasonArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromEaIdHistory']


class LeagueCommissionerArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromEaIdHistory']


class LeagueBOGArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromEaIdHistory']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromEaIdHistory']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromEaIdHistory']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromEaIdHistory']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromEaIdHistory']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromEaIdHistory']


class MatchArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromEaIdHistory']
    match: Union[bool, 'MatchArgsFromEaIdHistory']


class ClubMatchStatsArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    customKit: Union[bool, 'CustomKitArgsFromEaIdHistory']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromEaIdHistory']


class ClubMatchStatsDetailsArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromEaIdHistory']


class CustomKitArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    match: Union[bool, 'MatchArgsFromEaIdHistory']


class ClubAggregateMatchStatsArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    match: Union[bool, 'MatchArgsFromEaIdHistory']


class MatchAnalyticsArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    match: Union[bool, 'MatchArgsFromEaIdHistory']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromEaIdHistory']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromEaIdHistory']


class PlayerMatchArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']
    season: Union[bool, 'SeasonArgsFromEaIdHistory']
    contract: Union[bool, 'ContractArgsFromEaIdHistory']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromEaIdHistory']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromEaIdHistory']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromEaIdHistory']
    matches: Union[bool, 'FindManyMatchArgsFromEaIdHistory']


class PlayerSeasonArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromEaIdHistory']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromEaIdHistory']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromEaIdHistory']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromEaIdHistory']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromEaIdHistory']


class PlayerTeamSeasonArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromEaIdHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromEaIdHistory']


class PlayerLeagueHistoryArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromEaIdHistory']
    trophySummary: Union[bool, 'PSNTrophyArgsFromEaIdHistory']
    games: Union[bool, 'FindManyPSNGameArgsFromEaIdHistory']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromEaIdHistory']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromEaIdHistory']


class PSNProfileArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    profile: Union[bool, 'PSNProfileArgsFromEaIdHistory']


class PSNAvatarArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    profile: Union[bool, 'PSNProfileArgsFromEaIdHistory']


class PSNTrophyArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    profile: Union[bool, 'PSNProfileArgsFromEaIdHistory']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromEaIdHistory']


class PSNGameArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    profile: Union[bool, 'PSNProfileArgsFromEaIdHistory']


class PSNSyncLogArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    profile: Union[bool, 'PSNProfileArgsFromEaIdHistory']
    game: Union[bool, 'PSNGameArgsFromEaIdHistory']


class PSNGameTrophiesArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    league: Union[bool, 'LeagueArgsFromEaIdHistory']
    division: Union[bool, 'DivisionArgsFromEaIdHistory']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromEaIdHistory']
    nhlAffiliate: Union[bool, 'TeamArgsFromEaIdHistory']
    ahlAffiliate: Union[bool, 'TeamArgsFromEaIdHistory']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromEaIdHistory']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromEaIdHistory']


class TeamArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    team: Union[bool, 'TeamArgsFromEaIdHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromEaIdHistory']
    matches: Union[bool, 'FindManyMatchArgsFromEaIdHistory']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromEaIdHistory']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromEaIdHistory']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromEaIdHistory']
    bids: Union[bool, 'FindManyBidArgsFromEaIdHistory']
    managers: Union[bool, 'FindManyTeamManagerArgsFromEaIdHistory']


class TeamSeasonArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']
    teamSeason: Union[bool, 'TeamSeasonArgsFromEaIdHistory']


class TeamManagerArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    contract: Union[bool, 'ContractArgsFromEaIdHistory']
    teamSeason: Union[bool, 'TeamSeasonArgsFromEaIdHistory']


class BidArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromEaIdHistory']
    bids: Union[bool, 'FindManyBidArgsFromEaIdHistory']


class ContractArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    notifications: Union[bool, 'FindManyNotificationArgsFromEaIdHistory']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromEaIdHistory']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromEaIdHistory']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromEaIdHistory']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromEaIdHistory']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromEaIdHistory']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromEaIdHistory']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromEaIdHistory']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromEaIdHistory']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromEaIdHistory']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromEaIdHistory']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromEaIdHistory']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromEaIdHistory']
    psnProfile: Union[bool, 'PSNProfileArgsFromEaIdHistory']


class UserArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']


class EaIdHistoryArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']


class SystemHistoryArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']


class GamertagHistoryArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromEaIdHistory(TypedDict, total=False):
    """Relational arguments for EaIdHistory"""
    user: Union[bool, 'UserArgsFromEaIdHistory']


class NotificationArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromEaIdHistory(TypedDict, total=False):
    """Arguments for EaIdHistory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyEaIdHistoryArgs = FindManyEaIdHistoryArgsFromEaIdHistory
FindFirstEaIdHistoryArgs = FindManyEaIdHistoryArgsFromEaIdHistory


class EaIdHistoryWhereInput(TypedDict, total=False):
    """EaIdHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    eaId: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['EaIdHistoryWhereInput', List['EaIdHistoryWhereInput']]
    # but this causes mypy to hang :/
    AND: List['EaIdHistoryWhereInput']
    OR: List['EaIdHistoryWhereInput']
    NOT: List['EaIdHistoryWhereInput']



# aggregate EaIdHistory types


class EaIdHistoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """EaIdHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    eaId: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['EaIdHistoryScalarWhereWithAggregatesInput']
    OR: List['EaIdHistoryScalarWhereWithAggregatesInput']
    NOT: List['EaIdHistoryScalarWhereWithAggregatesInput']



class EaIdHistoryGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    eaId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'EaIdHistorySumAggregateOutput'
    _avg: 'EaIdHistoryAvgAggregateOutput'
    _min: 'EaIdHistoryMinAggregateOutput'
    _max: 'EaIdHistoryMaxAggregateOutput'
    _count: 'EaIdHistoryCountAggregateOutput'


class EaIdHistoryAvgAggregateOutput(TypedDict, total=False):
    """EaIdHistory output for aggregating averages"""


class EaIdHistorySumAggregateOutput(TypedDict, total=False):
    """EaIdHistory output for aggregating sums"""


class EaIdHistoryScalarAggregateOutput(TypedDict, total=False):
    """EaIdHistory output including scalar fields"""
    id: _str
    userId: _str
    eaId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


EaIdHistoryMinAggregateOutput = EaIdHistoryScalarAggregateOutput
EaIdHistoryMaxAggregateOutput = EaIdHistoryScalarAggregateOutput


class EaIdHistoryMaxAggregateInput(TypedDict, total=False):
    """EaIdHistory input for aggregating by max"""
    id: bool
    userId: bool
    eaId: bool
    createdAt: bool
    updatedAt: bool


class EaIdHistoryMinAggregateInput(TypedDict, total=False):
    """EaIdHistory input for aggregating by min"""
    id: bool
    userId: bool
    eaId: bool
    createdAt: bool
    updatedAt: bool


class EaIdHistoryNumberAggregateInput(TypedDict, total=False):
    """EaIdHistory input for aggregating numbers"""


EaIdHistoryAvgAggregateInput = EaIdHistoryNumberAggregateInput
EaIdHistorySumAggregateInput = EaIdHistoryNumberAggregateInput


EaIdHistoryCountAggregateInput = TypedDict(
    'EaIdHistoryCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'eaId': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

EaIdHistoryCountAggregateOutput = TypedDict(
    'EaIdHistoryCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'eaId': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


EaIdHistoryKeys = Literal[
    'id',
    'userId',
    'eaId',
    'createdAt',
    'updatedAt',
    'user',
]
EaIdHistoryScalarFieldKeys = Literal[
    'id',
    'userId',
    'eaId',
    'createdAt',
    'updatedAt',
]
EaIdHistoryScalarFieldKeysT = TypeVar('EaIdHistoryScalarFieldKeysT', bound=EaIdHistoryScalarFieldKeys)

EaIdHistoryRelationalFieldKeys = Literal[
        'user',
    ]

# SystemHistory types

class SystemHistoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the SystemHistory create method"""
    id: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class SystemHistoryCreateInput(SystemHistoryOptionalCreateInput):
    """Required arguments to the SystemHistory create method"""
    system: 'enums.System'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class SystemHistoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the SystemHistory create method, without relations"""
    id: _str
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class SystemHistoryCreateWithoutRelationsInput(SystemHistoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the SystemHistory create method, without relations"""
    system: 'enums.System'

class SystemHistoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'SystemHistoryCreateWithoutRelationsInput'
    where: 'SystemHistoryWhereUniqueInput'

class SystemHistoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'SystemHistoryCreateWithoutRelationsInput'
    connect: 'SystemHistoryWhereUniqueInput'
    connect_or_create: 'SystemHistoryConnectOrCreateWithoutRelationsInput'


class SystemHistoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['SystemHistoryCreateWithoutRelationsInput', List['SystemHistoryCreateWithoutRelationsInput']]
    connect: Union['SystemHistoryWhereUniqueInput', List['SystemHistoryWhereUniqueInput']]
    connect_or_create: Union['SystemHistoryConnectOrCreateWithoutRelationsInput', List['SystemHistoryConnectOrCreateWithoutRelationsInput']]

_SystemHistoryWhereUnique_id_Input = TypedDict(
    '_SystemHistoryWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

SystemHistoryWhereUniqueInput = _SystemHistoryWhereUnique_id_Input


class SystemHistoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    system: 'enums.System'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class SystemHistoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    system: 'enums.System'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class SystemHistoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['SystemHistoryCreateWithoutRelationsInput']
    connect: List['SystemHistoryWhereUniqueInput']
    connect_or_create: List['SystemHistoryConnectOrCreateWithoutRelationsInput']
    set: List['SystemHistoryWhereUniqueInput']
    disconnect: List['SystemHistoryWhereUniqueInput']
    delete: List['SystemHistoryWhereUniqueInput']

    # TODO
    # update: List['SystemHistoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['SystemHistoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['SystemHistoryScalarWhereInput']
    # upsert: List['SystemHistoryUpserteWithWhereUniqueWithoutRelationsInput']


class SystemHistoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'SystemHistoryCreateWithoutRelationsInput'
    connect: 'SystemHistoryWhereUniqueInput'
    connect_or_create: 'SystemHistoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'SystemHistoryUpdateInput'
    # upsert: 'SystemHistoryUpsertWithoutRelationsInput'


class SystemHistoryUpsertInput(TypedDict):
    create: 'SystemHistoryCreateInput'
    update: 'SystemHistoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_SystemHistory_id_OrderByInput = TypedDict(
    '_SystemHistory_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_SystemHistory_userId_OrderByInput = TypedDict(
    '_SystemHistory_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_SystemHistory_system_OrderByInput = TypedDict(
    '_SystemHistory_system_OrderByInput',
    {
        'system': 'SortOrder',
    },
    total=True
)

_SystemHistory_createdAt_OrderByInput = TypedDict(
    '_SystemHistory_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_SystemHistory_updatedAt_OrderByInput = TypedDict(
    '_SystemHistory_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_SystemHistory_RelevanceInner = TypedDict(
    '_SystemHistory_RelevanceInner',
    {
        'fields': 'List[SystemHistoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_SystemHistory_RelevanceOrderByInput = TypedDict(
    '_SystemHistory_RelevanceOrderByInput',
    {
        '_relevance': '_SystemHistory_RelevanceInner',
    },
    total=True
)

SystemHistoryOrderByInput = Union[
    '_SystemHistory_id_OrderByInput',
    '_SystemHistory_userId_OrderByInput',
    '_SystemHistory_system_OrderByInput',
    '_SystemHistory_createdAt_OrderByInput',
    '_SystemHistory_updatedAt_OrderByInput',
    '_SystemHistory_RelevanceOrderByInput',
]



# recursive SystemHistory types
# TODO: cleanup these types



SystemHistoryRelationFilter = TypedDict(
    'SystemHistoryRelationFilter',
    {
        'is': 'SystemHistoryWhereInput',
        'is_not': 'SystemHistoryWhereInput',
    },
    total=False,
)


class SystemHistoryListRelationFilter(TypedDict, total=False):
    some: 'SystemHistoryWhereInput'
    none: 'SystemHistoryWhereInput'
    every: 'SystemHistoryWhereInput'


class SystemHistoryInclude(TypedDict, total=False):
    """SystemHistory relational arguments"""
    user: Union[bool, 'UserArgsFromSystemHistory']


class ForumPostIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    author: Union[bool, 'UserArgsFromSystemHistory']
    comments: Union[bool, 'FindManyForumCommentArgsFromSystemHistory']
    reactions: Union[bool, 'FindManyForumReactionArgsFromSystemHistory']
    followers: Union[bool, 'FindManyForumFollowerArgsFromSystemHistory']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromSystemHistory']


class ForumPostArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']
    post: Union[bool, 'ForumPostArgsFromSystemHistory']
    comment: Union[bool, 'ForumCommentArgsFromSystemHistory']


class ForumReactionArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']
    post: Union[bool, 'ForumPostArgsFromSystemHistory']


class ForumFollowerArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']
    post: Union[bool, 'ForumPostArgsFromSystemHistory']


class ForumPostSubscriptionArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    author: Union[bool, 'UserArgsFromSystemHistory']
    post: Union[bool, 'ForumPostArgsFromSystemHistory']
    quotedComment: Union[bool, 'ForumCommentArgsFromSystemHistory']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromSystemHistory']
    reactions: Union[bool, 'FindManyForumReactionArgsFromSystemHistory']


class ForumCommentArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    parentLeague: Union[bool, 'LeagueArgsFromSystemHistory']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromSystemHistory']
    conferences: Union[bool, 'FindManyConferenceArgsFromSystemHistory']
    divisions: Union[bool, 'FindManyDivisionArgsFromSystemHistory']
    teams: Union[bool, 'FindManyTeamArgsFromSystemHistory']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromSystemHistory']


class LeagueArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    league: Union[bool, 'LeagueArgsFromSystemHistory']
    season: Union[bool, 'SeasonArgsFromSystemHistory']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromSystemHistory']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromSystemHistory']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromSystemHistory']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromSystemHistory']


class LeagueSeasonArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    league: Union[bool, 'LeagueArgsFromSystemHistory']
    divisions: Union[bool, 'FindManyDivisionArgsFromSystemHistory']


class ConferenceArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    conference: Union[bool, 'ConferenceArgsFromSystemHistory']
    league: Union[bool, 'LeagueArgsFromSystemHistory']
    teams: Union[bool, 'FindManyTeamArgsFromSystemHistory']


class DivisionArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromSystemHistory']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromSystemHistory']


class SeasonArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromSystemHistory']


class LeagueCommissionerArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromSystemHistory']


class LeagueBOGArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromSystemHistory']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromSystemHistory']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromSystemHistory']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromSystemHistory']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromSystemHistory']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromSystemHistory']


class MatchArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromSystemHistory']
    match: Union[bool, 'MatchArgsFromSystemHistory']


class ClubMatchStatsArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    customKit: Union[bool, 'CustomKitArgsFromSystemHistory']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromSystemHistory']


class ClubMatchStatsDetailsArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromSystemHistory']


class CustomKitArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    match: Union[bool, 'MatchArgsFromSystemHistory']


class ClubAggregateMatchStatsArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    match: Union[bool, 'MatchArgsFromSystemHistory']


class MatchAnalyticsArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    match: Union[bool, 'MatchArgsFromSystemHistory']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromSystemHistory']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromSystemHistory']


class PlayerMatchArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']
    season: Union[bool, 'SeasonArgsFromSystemHistory']
    contract: Union[bool, 'ContractArgsFromSystemHistory']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromSystemHistory']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromSystemHistory']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromSystemHistory']
    matches: Union[bool, 'FindManyMatchArgsFromSystemHistory']


class PlayerSeasonArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromSystemHistory']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromSystemHistory']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromSystemHistory']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromSystemHistory']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromSystemHistory']


class PlayerTeamSeasonArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromSystemHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromSystemHistory']


class PlayerLeagueHistoryArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromSystemHistory']
    trophySummary: Union[bool, 'PSNTrophyArgsFromSystemHistory']
    games: Union[bool, 'FindManyPSNGameArgsFromSystemHistory']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromSystemHistory']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromSystemHistory']


class PSNProfileArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    profile: Union[bool, 'PSNProfileArgsFromSystemHistory']


class PSNAvatarArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    profile: Union[bool, 'PSNProfileArgsFromSystemHistory']


class PSNTrophyArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    profile: Union[bool, 'PSNProfileArgsFromSystemHistory']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromSystemHistory']


class PSNGameArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    profile: Union[bool, 'PSNProfileArgsFromSystemHistory']


class PSNSyncLogArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    profile: Union[bool, 'PSNProfileArgsFromSystemHistory']
    game: Union[bool, 'PSNGameArgsFromSystemHistory']


class PSNGameTrophiesArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    league: Union[bool, 'LeagueArgsFromSystemHistory']
    division: Union[bool, 'DivisionArgsFromSystemHistory']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromSystemHistory']
    nhlAffiliate: Union[bool, 'TeamArgsFromSystemHistory']
    ahlAffiliate: Union[bool, 'TeamArgsFromSystemHistory']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromSystemHistory']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromSystemHistory']


class TeamArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    team: Union[bool, 'TeamArgsFromSystemHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromSystemHistory']
    matches: Union[bool, 'FindManyMatchArgsFromSystemHistory']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromSystemHistory']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromSystemHistory']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromSystemHistory']
    bids: Union[bool, 'FindManyBidArgsFromSystemHistory']
    managers: Union[bool, 'FindManyTeamManagerArgsFromSystemHistory']


class TeamSeasonArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']
    teamSeason: Union[bool, 'TeamSeasonArgsFromSystemHistory']


class TeamManagerArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    contract: Union[bool, 'ContractArgsFromSystemHistory']
    teamSeason: Union[bool, 'TeamSeasonArgsFromSystemHistory']


class BidArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromSystemHistory']
    bids: Union[bool, 'FindManyBidArgsFromSystemHistory']


class ContractArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    notifications: Union[bool, 'FindManyNotificationArgsFromSystemHistory']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromSystemHistory']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromSystemHistory']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromSystemHistory']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromSystemHistory']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromSystemHistory']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromSystemHistory']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromSystemHistory']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromSystemHistory']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromSystemHistory']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromSystemHistory']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromSystemHistory']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromSystemHistory']
    psnProfile: Union[bool, 'PSNProfileArgsFromSystemHistory']


class UserArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']


class EaIdHistoryArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']


class SystemHistoryArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']


class GamertagHistoryArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromSystemHistory(TypedDict, total=False):
    """Relational arguments for SystemHistory"""
    user: Union[bool, 'UserArgsFromSystemHistory']


class NotificationArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromSystemHistory(TypedDict, total=False):
    """Arguments for SystemHistory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManySystemHistoryArgs = FindManySystemHistoryArgsFromSystemHistory
FindFirstSystemHistoryArgs = FindManySystemHistoryArgsFromSystemHistory


class SystemHistoryWhereInput(TypedDict, total=False):
    """SystemHistory arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    system: 'enums.System'
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['SystemHistoryWhereInput', List['SystemHistoryWhereInput']]
    # but this causes mypy to hang :/
    AND: List['SystemHistoryWhereInput']
    OR: List['SystemHistoryWhereInput']
    NOT: List['SystemHistoryWhereInput']



# aggregate SystemHistory types


class SystemHistoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """SystemHistory arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    system: 'enums.System'
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['SystemHistoryScalarWhereWithAggregatesInput']
    OR: List['SystemHistoryScalarWhereWithAggregatesInput']
    NOT: List['SystemHistoryScalarWhereWithAggregatesInput']



class SystemHistoryGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    system: 'enums.System'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'SystemHistorySumAggregateOutput'
    _avg: 'SystemHistoryAvgAggregateOutput'
    _min: 'SystemHistoryMinAggregateOutput'
    _max: 'SystemHistoryMaxAggregateOutput'
    _count: 'SystemHistoryCountAggregateOutput'


class SystemHistoryAvgAggregateOutput(TypedDict, total=False):
    """SystemHistory output for aggregating averages"""


class SystemHistorySumAggregateOutput(TypedDict, total=False):
    """SystemHistory output for aggregating sums"""


class SystemHistoryScalarAggregateOutput(TypedDict, total=False):
    """SystemHistory output including scalar fields"""
    id: _str
    userId: _str
    system: 'enums.System'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


SystemHistoryMinAggregateOutput = SystemHistoryScalarAggregateOutput
SystemHistoryMaxAggregateOutput = SystemHistoryScalarAggregateOutput


class SystemHistoryMaxAggregateInput(TypedDict, total=False):
    """SystemHistory input for aggregating by max"""
    id: bool
    userId: bool
    system: bool
    createdAt: bool
    updatedAt: bool


class SystemHistoryMinAggregateInput(TypedDict, total=False):
    """SystemHistory input for aggregating by min"""
    id: bool
    userId: bool
    system: bool
    createdAt: bool
    updatedAt: bool


class SystemHistoryNumberAggregateInput(TypedDict, total=False):
    """SystemHistory input for aggregating numbers"""


SystemHistoryAvgAggregateInput = SystemHistoryNumberAggregateInput
SystemHistorySumAggregateInput = SystemHistoryNumberAggregateInput


SystemHistoryCountAggregateInput = TypedDict(
    'SystemHistoryCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'system': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

SystemHistoryCountAggregateOutput = TypedDict(
    'SystemHistoryCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'system': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


SystemHistoryKeys = Literal[
    'id',
    'userId',
    'system',
    'createdAt',
    'updatedAt',
    'user',
]
SystemHistoryScalarFieldKeys = Literal[
    'id',
    'userId',
    'system',
    'createdAt',
    'updatedAt',
]
SystemHistoryScalarFieldKeysT = TypeVar('SystemHistoryScalarFieldKeysT', bound=SystemHistoryScalarFieldKeys)

SystemHistoryRelationalFieldKeys = Literal[
        'user',
    ]

# GamertagHistory types

class GamertagHistoryOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the GamertagHistory create method"""
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    verificationCode: Optional[_str]
    codeGeneratedAt: Optional[datetime.datetime]
    verificationStatus: Optional['enums.VerificationStatus']
    verifiedAt: Optional[datetime.datetime]
    verificationAttempts: Optional[_int]
    lastAttemptAt: Optional[datetime.datetime]
    codeExpiresAt: Optional[datetime.datetime]
    isVerified: _bool
    verificationMetadata: Optional['fields.Json']
    user: 'UserCreateNestedWithoutRelationsInput'


class GamertagHistoryCreateInput(GamertagHistoryOptionalCreateInput):
    """Required arguments to the GamertagHistory create method"""
    system: 'enums.System'
    gamertag: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class GamertagHistoryOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the GamertagHistory create method, without relations"""
    userId: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    verificationCode: Optional[_str]
    codeGeneratedAt: Optional[datetime.datetime]
    verificationStatus: Optional['enums.VerificationStatus']
    verifiedAt: Optional[datetime.datetime]
    verificationAttempts: Optional[_int]
    lastAttemptAt: Optional[datetime.datetime]
    codeExpiresAt: Optional[datetime.datetime]
    isVerified: _bool
    verificationMetadata: Optional['fields.Json']


class GamertagHistoryCreateWithoutRelationsInput(GamertagHistoryOptionalCreateWithoutRelationsInput):
    """Required arguments to the GamertagHistory create method, without relations"""
    system: 'enums.System'
    gamertag: _str

class GamertagHistoryConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'GamertagHistoryCreateWithoutRelationsInput'
    where: 'GamertagHistoryWhereUniqueInput'

class GamertagHistoryCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'GamertagHistoryCreateWithoutRelationsInput'
    connect: 'GamertagHistoryWhereUniqueInput'
    connect_or_create: 'GamertagHistoryConnectOrCreateWithoutRelationsInput'


class GamertagHistoryCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['GamertagHistoryCreateWithoutRelationsInput', List['GamertagHistoryCreateWithoutRelationsInput']]
    connect: Union['GamertagHistoryWhereUniqueInput', List['GamertagHistoryWhereUniqueInput']]
    connect_or_create: Union['GamertagHistoryConnectOrCreateWithoutRelationsInput', List['GamertagHistoryConnectOrCreateWithoutRelationsInput']]

_GamertagHistoryCompoundPrimaryKeyInner = TypedDict(
    '_GamertagHistoryCompoundPrimaryKeyInner',
    {
        'userId': '_str',
        'system': 'enums.System',
    },
    total=True
)

_GamertagHistoryCompoundPrimaryKey = TypedDict(
    '_GamertagHistoryCompoundPrimaryKey',
    {
        'userId_system': '_GamertagHistoryCompoundPrimaryKeyInner',
    },
    total=True
)

GamertagHistoryWhereUniqueInput = _GamertagHistoryCompoundPrimaryKey


class GamertagHistoryUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    system: 'enums.System'
    gamertag: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    verificationCode: Optional[_str]
    codeGeneratedAt: Optional[datetime.datetime]
    verificationStatus: Optional['enums.VerificationStatus']
    verifiedAt: Optional[datetime.datetime]
    verificationAttempts: Optional[Union[AtomicIntInput, _int]]
    lastAttemptAt: Optional[datetime.datetime]
    codeExpiresAt: Optional[datetime.datetime]
    isVerified: _bool
    verificationMetadata: Optional['fields.Json']
    user: 'UserUpdateOneWithoutRelationsInput'


class GamertagHistoryUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    system: 'enums.System'
    gamertag: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    verificationCode: Optional[_str]
    codeGeneratedAt: Optional[datetime.datetime]
    verificationStatus: Optional['enums.VerificationStatus']
    verifiedAt: Optional[datetime.datetime]
    verificationAttempts: Optional[Union[AtomicIntInput, _int]]
    lastAttemptAt: Optional[datetime.datetime]
    codeExpiresAt: Optional[datetime.datetime]
    isVerified: _bool
    verificationMetadata: Optional['fields.Json']


class GamertagHistoryUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['GamertagHistoryCreateWithoutRelationsInput']
    connect: List['GamertagHistoryWhereUniqueInput']
    connect_or_create: List['GamertagHistoryConnectOrCreateWithoutRelationsInput']
    set: List['GamertagHistoryWhereUniqueInput']
    disconnect: List['GamertagHistoryWhereUniqueInput']
    delete: List['GamertagHistoryWhereUniqueInput']

    # TODO
    # update: List['GamertagHistoryUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['GamertagHistoryUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['GamertagHistoryScalarWhereInput']
    # upsert: List['GamertagHistoryUpserteWithWhereUniqueWithoutRelationsInput']


class GamertagHistoryUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'GamertagHistoryCreateWithoutRelationsInput'
    connect: 'GamertagHistoryWhereUniqueInput'
    connect_or_create: 'GamertagHistoryConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'GamertagHistoryUpdateInput'
    # upsert: 'GamertagHistoryUpsertWithoutRelationsInput'


class GamertagHistoryUpsertInput(TypedDict):
    create: 'GamertagHistoryCreateInput'
    update: 'GamertagHistoryUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_GamertagHistory_userId_OrderByInput = TypedDict(
    '_GamertagHistory_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_GamertagHistory_system_OrderByInput = TypedDict(
    '_GamertagHistory_system_OrderByInput',
    {
        'system': 'SortOrder',
    },
    total=True
)

_GamertagHistory_gamertag_OrderByInput = TypedDict(
    '_GamertagHistory_gamertag_OrderByInput',
    {
        'gamertag': 'SortOrder',
    },
    total=True
)

_GamertagHistory_createdAt_OrderByInput = TypedDict(
    '_GamertagHistory_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_GamertagHistory_updatedAt_OrderByInput = TypedDict(
    '_GamertagHistory_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_GamertagHistory_verificationCode_OrderByInput = TypedDict(
    '_GamertagHistory_verificationCode_OrderByInput',
    {
        'verificationCode': 'SortOrder',
    },
    total=True
)

_GamertagHistory_codeGeneratedAt_OrderByInput = TypedDict(
    '_GamertagHistory_codeGeneratedAt_OrderByInput',
    {
        'codeGeneratedAt': 'SortOrder',
    },
    total=True
)

_GamertagHistory_verificationStatus_OrderByInput = TypedDict(
    '_GamertagHistory_verificationStatus_OrderByInput',
    {
        'verificationStatus': 'SortOrder',
    },
    total=True
)

_GamertagHistory_verifiedAt_OrderByInput = TypedDict(
    '_GamertagHistory_verifiedAt_OrderByInput',
    {
        'verifiedAt': 'SortOrder',
    },
    total=True
)

_GamertagHistory_verificationAttempts_OrderByInput = TypedDict(
    '_GamertagHistory_verificationAttempts_OrderByInput',
    {
        'verificationAttempts': 'SortOrder',
    },
    total=True
)

_GamertagHistory_lastAttemptAt_OrderByInput = TypedDict(
    '_GamertagHistory_lastAttemptAt_OrderByInput',
    {
        'lastAttemptAt': 'SortOrder',
    },
    total=True
)

_GamertagHistory_codeExpiresAt_OrderByInput = TypedDict(
    '_GamertagHistory_codeExpiresAt_OrderByInput',
    {
        'codeExpiresAt': 'SortOrder',
    },
    total=True
)

_GamertagHistory_isVerified_OrderByInput = TypedDict(
    '_GamertagHistory_isVerified_OrderByInput',
    {
        'isVerified': 'SortOrder',
    },
    total=True
)

_GamertagHistory_verificationMetadata_OrderByInput = TypedDict(
    '_GamertagHistory_verificationMetadata_OrderByInput',
    {
        'verificationMetadata': 'SortOrder',
    },
    total=True
)

_GamertagHistory_RelevanceInner = TypedDict(
    '_GamertagHistory_RelevanceInner',
    {
        'fields': 'List[GamertagHistoryScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_GamertagHistory_RelevanceOrderByInput = TypedDict(
    '_GamertagHistory_RelevanceOrderByInput',
    {
        '_relevance': '_GamertagHistory_RelevanceInner',
    },
    total=True
)

GamertagHistoryOrderByInput = Union[
    '_GamertagHistory_userId_OrderByInput',
    '_GamertagHistory_system_OrderByInput',
    '_GamertagHistory_gamertag_OrderByInput',
    '_GamertagHistory_createdAt_OrderByInput',
    '_GamertagHistory_updatedAt_OrderByInput',
    '_GamertagHistory_verificationCode_OrderByInput',
    '_GamertagHistory_codeGeneratedAt_OrderByInput',
    '_GamertagHistory_verificationStatus_OrderByInput',
    '_GamertagHistory_verifiedAt_OrderByInput',
    '_GamertagHistory_verificationAttempts_OrderByInput',
    '_GamertagHistory_lastAttemptAt_OrderByInput',
    '_GamertagHistory_codeExpiresAt_OrderByInput',
    '_GamertagHistory_isVerified_OrderByInput',
    '_GamertagHistory_verificationMetadata_OrderByInput',
    '_GamertagHistory_RelevanceOrderByInput',
]



# recursive GamertagHistory types
# TODO: cleanup these types



GamertagHistoryRelationFilter = TypedDict(
    'GamertagHistoryRelationFilter',
    {
        'is': 'GamertagHistoryWhereInput',
        'is_not': 'GamertagHistoryWhereInput',
    },
    total=False,
)


class GamertagHistoryListRelationFilter(TypedDict, total=False):
    some: 'GamertagHistoryWhereInput'
    none: 'GamertagHistoryWhereInput'
    every: 'GamertagHistoryWhereInput'


class GamertagHistoryInclude(TypedDict, total=False):
    """GamertagHistory relational arguments"""
    user: Union[bool, 'UserArgsFromGamertagHistory']


class ForumPostIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    author: Union[bool, 'UserArgsFromGamertagHistory']
    comments: Union[bool, 'FindManyForumCommentArgsFromGamertagHistory']
    reactions: Union[bool, 'FindManyForumReactionArgsFromGamertagHistory']
    followers: Union[bool, 'FindManyForumFollowerArgsFromGamertagHistory']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromGamertagHistory']


class ForumPostArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']
    post: Union[bool, 'ForumPostArgsFromGamertagHistory']
    comment: Union[bool, 'ForumCommentArgsFromGamertagHistory']


class ForumReactionArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']
    post: Union[bool, 'ForumPostArgsFromGamertagHistory']


class ForumFollowerArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']
    post: Union[bool, 'ForumPostArgsFromGamertagHistory']


class ForumPostSubscriptionArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    author: Union[bool, 'UserArgsFromGamertagHistory']
    post: Union[bool, 'ForumPostArgsFromGamertagHistory']
    quotedComment: Union[bool, 'ForumCommentArgsFromGamertagHistory']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromGamertagHistory']
    reactions: Union[bool, 'FindManyForumReactionArgsFromGamertagHistory']


class ForumCommentArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    parentLeague: Union[bool, 'LeagueArgsFromGamertagHistory']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromGamertagHistory']
    conferences: Union[bool, 'FindManyConferenceArgsFromGamertagHistory']
    divisions: Union[bool, 'FindManyDivisionArgsFromGamertagHistory']
    teams: Union[bool, 'FindManyTeamArgsFromGamertagHistory']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromGamertagHistory']


class LeagueArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    league: Union[bool, 'LeagueArgsFromGamertagHistory']
    season: Union[bool, 'SeasonArgsFromGamertagHistory']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromGamertagHistory']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromGamertagHistory']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromGamertagHistory']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromGamertagHistory']


class LeagueSeasonArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    league: Union[bool, 'LeagueArgsFromGamertagHistory']
    divisions: Union[bool, 'FindManyDivisionArgsFromGamertagHistory']


class ConferenceArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    conference: Union[bool, 'ConferenceArgsFromGamertagHistory']
    league: Union[bool, 'LeagueArgsFromGamertagHistory']
    teams: Union[bool, 'FindManyTeamArgsFromGamertagHistory']


class DivisionArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromGamertagHistory']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromGamertagHistory']


class SeasonArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromGamertagHistory']


class LeagueCommissionerArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromGamertagHistory']


class LeagueBOGArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromGamertagHistory']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromGamertagHistory']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromGamertagHistory']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromGamertagHistory']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromGamertagHistory']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromGamertagHistory']


class MatchArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromGamertagHistory']
    match: Union[bool, 'MatchArgsFromGamertagHistory']


class ClubMatchStatsArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    customKit: Union[bool, 'CustomKitArgsFromGamertagHistory']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromGamertagHistory']


class ClubMatchStatsDetailsArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromGamertagHistory']


class CustomKitArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    match: Union[bool, 'MatchArgsFromGamertagHistory']


class ClubAggregateMatchStatsArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    match: Union[bool, 'MatchArgsFromGamertagHistory']


class MatchAnalyticsArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    match: Union[bool, 'MatchArgsFromGamertagHistory']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromGamertagHistory']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromGamertagHistory']


class PlayerMatchArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']
    season: Union[bool, 'SeasonArgsFromGamertagHistory']
    contract: Union[bool, 'ContractArgsFromGamertagHistory']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromGamertagHistory']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromGamertagHistory']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromGamertagHistory']
    matches: Union[bool, 'FindManyMatchArgsFromGamertagHistory']


class PlayerSeasonArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromGamertagHistory']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromGamertagHistory']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromGamertagHistory']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromGamertagHistory']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromGamertagHistory']


class PlayerTeamSeasonArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromGamertagHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromGamertagHistory']


class PlayerLeagueHistoryArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromGamertagHistory']
    trophySummary: Union[bool, 'PSNTrophyArgsFromGamertagHistory']
    games: Union[bool, 'FindManyPSNGameArgsFromGamertagHistory']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromGamertagHistory']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromGamertagHistory']


class PSNProfileArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    profile: Union[bool, 'PSNProfileArgsFromGamertagHistory']


class PSNAvatarArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    profile: Union[bool, 'PSNProfileArgsFromGamertagHistory']


class PSNTrophyArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    profile: Union[bool, 'PSNProfileArgsFromGamertagHistory']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromGamertagHistory']


class PSNGameArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    profile: Union[bool, 'PSNProfileArgsFromGamertagHistory']


class PSNSyncLogArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    profile: Union[bool, 'PSNProfileArgsFromGamertagHistory']
    game: Union[bool, 'PSNGameArgsFromGamertagHistory']


class PSNGameTrophiesArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    league: Union[bool, 'LeagueArgsFromGamertagHistory']
    division: Union[bool, 'DivisionArgsFromGamertagHistory']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromGamertagHistory']
    nhlAffiliate: Union[bool, 'TeamArgsFromGamertagHistory']
    ahlAffiliate: Union[bool, 'TeamArgsFromGamertagHistory']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromGamertagHistory']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromGamertagHistory']


class TeamArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    team: Union[bool, 'TeamArgsFromGamertagHistory']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromGamertagHistory']
    matches: Union[bool, 'FindManyMatchArgsFromGamertagHistory']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromGamertagHistory']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromGamertagHistory']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromGamertagHistory']
    bids: Union[bool, 'FindManyBidArgsFromGamertagHistory']
    managers: Union[bool, 'FindManyTeamManagerArgsFromGamertagHistory']


class TeamSeasonArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']
    teamSeason: Union[bool, 'TeamSeasonArgsFromGamertagHistory']


class TeamManagerArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    contract: Union[bool, 'ContractArgsFromGamertagHistory']
    teamSeason: Union[bool, 'TeamSeasonArgsFromGamertagHistory']


class BidArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromGamertagHistory']
    bids: Union[bool, 'FindManyBidArgsFromGamertagHistory']


class ContractArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    notifications: Union[bool, 'FindManyNotificationArgsFromGamertagHistory']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromGamertagHistory']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromGamertagHistory']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromGamertagHistory']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromGamertagHistory']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromGamertagHistory']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromGamertagHistory']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromGamertagHistory']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromGamertagHistory']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromGamertagHistory']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromGamertagHistory']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromGamertagHistory']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromGamertagHistory']
    psnProfile: Union[bool, 'PSNProfileArgsFromGamertagHistory']


class UserArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']


class EaIdHistoryArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']


class SystemHistoryArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']


class GamertagHistoryArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromGamertagHistory(TypedDict, total=False):
    """Relational arguments for GamertagHistory"""
    user: Union[bool, 'UserArgsFromGamertagHistory']


class NotificationArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromGamertagHistory(TypedDict, total=False):
    """Arguments for GamertagHistory"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyGamertagHistoryArgs = FindManyGamertagHistoryArgsFromGamertagHistory
FindFirstGamertagHistoryArgs = FindManyGamertagHistoryArgsFromGamertagHistory


class GamertagHistoryWhereInput(TypedDict, total=False):
    """GamertagHistory arguments for searching"""
    userId: Union[_str, 'types.StringFilter']
    system: 'enums.System'
    gamertag: Union[_str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    verificationCode: Union[None, _str, 'types.StringFilter']
    codeGeneratedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    verificationStatus: 'enums.VerificationStatus'
    verifiedAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    verificationAttempts: Union[None, _int, 'types.IntFilter']
    lastAttemptAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    codeExpiresAt: Union[None, datetime.datetime, 'types.DateTimeFilter']
    isVerified: Union[_bool, 'types.BooleanFilter']
    verificationMetadata: Union[None, 'fields.Json', 'types.JsonFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['GamertagHistoryWhereInput', List['GamertagHistoryWhereInput']]
    # but this causes mypy to hang :/
    AND: List['GamertagHistoryWhereInput']
    OR: List['GamertagHistoryWhereInput']
    NOT: List['GamertagHistoryWhereInput']



# aggregate GamertagHistory types


class GamertagHistoryScalarWhereWithAggregatesInput(TypedDict, total=False):
    """GamertagHistory arguments for searching"""
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    system: 'enums.System'
    gamertag: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    verificationCode: Union[_str, 'types.StringWithAggregatesFilter']
    codeGeneratedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    verificationStatus: 'enums.VerificationStatus'
    verifiedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    verificationAttempts: Union[_int, 'types.IntWithAggregatesFilter']
    lastAttemptAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    codeExpiresAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    isVerified: Union[_bool, 'types.BooleanWithAggregatesFilter']
    verificationMetadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']

    AND: List['GamertagHistoryScalarWhereWithAggregatesInput']
    OR: List['GamertagHistoryScalarWhereWithAggregatesInput']
    NOT: List['GamertagHistoryScalarWhereWithAggregatesInput']



class GamertagHistoryGroupByOutput(TypedDict, total=False):
    userId: _str
    system: 'enums.System'
    gamertag: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    verificationCode: _str
    codeGeneratedAt: datetime.datetime
    verificationStatus: 'enums.VerificationStatus'
    verifiedAt: datetime.datetime
    verificationAttempts: _int
    lastAttemptAt: datetime.datetime
    codeExpiresAt: datetime.datetime
    isVerified: _bool
    verificationMetadata: 'fields.Json'
    _sum: 'GamertagHistorySumAggregateOutput'
    _avg: 'GamertagHistoryAvgAggregateOutput'
    _min: 'GamertagHistoryMinAggregateOutput'
    _max: 'GamertagHistoryMaxAggregateOutput'
    _count: 'GamertagHistoryCountAggregateOutput'


class GamertagHistoryAvgAggregateOutput(TypedDict, total=False):
    """GamertagHistory output for aggregating averages"""
    verificationAttempts: float


class GamertagHistorySumAggregateOutput(TypedDict, total=False):
    """GamertagHistory output for aggregating sums"""
    verificationAttempts: _int


class GamertagHistoryScalarAggregateOutput(TypedDict, total=False):
    """GamertagHistory output including scalar fields"""
    userId: _str
    system: 'enums.System'
    gamertag: _str
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    verificationCode: _str
    codeGeneratedAt: datetime.datetime
    verificationStatus: 'enums.VerificationStatus'
    verifiedAt: datetime.datetime
    verificationAttempts: _int
    lastAttemptAt: datetime.datetime
    codeExpiresAt: datetime.datetime
    isVerified: _bool
    verificationMetadata: 'fields.Json'


GamertagHistoryMinAggregateOutput = GamertagHistoryScalarAggregateOutput
GamertagHistoryMaxAggregateOutput = GamertagHistoryScalarAggregateOutput


class GamertagHistoryMaxAggregateInput(TypedDict, total=False):
    """GamertagHistory input for aggregating by max"""
    userId: bool
    system: bool
    gamertag: bool
    createdAt: bool
    updatedAt: bool
    verificationCode: bool
    codeGeneratedAt: bool
    verificationStatus: bool
    verifiedAt: bool
    verificationAttempts: bool
    lastAttemptAt: bool
    codeExpiresAt: bool
    isVerified: bool
    verificationMetadata: bool


class GamertagHistoryMinAggregateInput(TypedDict, total=False):
    """GamertagHistory input for aggregating by min"""
    userId: bool
    system: bool
    gamertag: bool
    createdAt: bool
    updatedAt: bool
    verificationCode: bool
    codeGeneratedAt: bool
    verificationStatus: bool
    verifiedAt: bool
    verificationAttempts: bool
    lastAttemptAt: bool
    codeExpiresAt: bool
    isVerified: bool
    verificationMetadata: bool


class GamertagHistoryNumberAggregateInput(TypedDict, total=False):
    """GamertagHistory input for aggregating numbers"""
    verificationAttempts: bool


GamertagHistoryAvgAggregateInput = GamertagHistoryNumberAggregateInput
GamertagHistorySumAggregateInput = GamertagHistoryNumberAggregateInput


GamertagHistoryCountAggregateInput = TypedDict(
    'GamertagHistoryCountAggregateInput',
    {
        'userId': bool,
        'system': bool,
        'gamertag': bool,
        'createdAt': bool,
        'updatedAt': bool,
        'verificationCode': bool,
        'codeGeneratedAt': bool,
        'verificationStatus': bool,
        'verifiedAt': bool,
        'verificationAttempts': bool,
        'lastAttemptAt': bool,
        'codeExpiresAt': bool,
        'isVerified': bool,
        'verificationMetadata': bool,
        '_all': bool,
    },
    total=False,
)

GamertagHistoryCountAggregateOutput = TypedDict(
    'GamertagHistoryCountAggregateOutput',
    {
        'userId': int,
        'system': int,
        'gamertag': int,
        'createdAt': int,
        'updatedAt': int,
        'verificationCode': int,
        'codeGeneratedAt': int,
        'verificationStatus': int,
        'verifiedAt': int,
        'verificationAttempts': int,
        'lastAttemptAt': int,
        'codeExpiresAt': int,
        'isVerified': int,
        'verificationMetadata': int,
        '_all': int,
    },
    total=False,
)


GamertagHistoryKeys = Literal[
    'userId',
    'system',
    'gamertag',
    'createdAt',
    'updatedAt',
    'verificationCode',
    'codeGeneratedAt',
    'verificationStatus',
    'verifiedAt',
    'verificationAttempts',
    'lastAttemptAt',
    'codeExpiresAt',
    'isVerified',
    'verificationMetadata',
    'user',
]
GamertagHistoryScalarFieldKeys = Literal[
    'userId',
    'system',
    'gamertag',
    'createdAt',
    'updatedAt',
    'verificationCode',
    'codeGeneratedAt',
    'verificationStatus',
    'verifiedAt',
    'verificationAttempts',
    'lastAttemptAt',
    'codeExpiresAt',
    'isVerified',
    'verificationMetadata',
]
GamertagHistoryScalarFieldKeysT = TypeVar('GamertagHistoryScalarFieldKeysT', bound=GamertagHistoryScalarFieldKeys)

GamertagHistoryRelationalFieldKeys = Literal[
        'user',
    ]

# Notification types

class NotificationOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Notification create method"""
    id: _str
    userId: _str
    status: 'enums.NotificationStatus'
    link: Optional[_str]
    metadata: Optional['fields.Json']
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserCreateNestedWithoutRelationsInput'


class NotificationCreateInput(NotificationOptionalCreateInput):
    """Required arguments to the Notification create method"""
    type: 'enums.NotificationType'
    title: _str
    message: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class NotificationOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Notification create method, without relations"""
    id: _str
    userId: _str
    status: 'enums.NotificationStatus'
    link: Optional[_str]
    metadata: Optional['fields.Json']
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class NotificationCreateWithoutRelationsInput(NotificationOptionalCreateWithoutRelationsInput):
    """Required arguments to the Notification create method, without relations"""
    type: 'enums.NotificationType'
    title: _str
    message: _str

class NotificationConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'NotificationCreateWithoutRelationsInput'
    where: 'NotificationWhereUniqueInput'

class NotificationCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'NotificationCreateWithoutRelationsInput'
    connect: 'NotificationWhereUniqueInput'
    connect_or_create: 'NotificationConnectOrCreateWithoutRelationsInput'


class NotificationCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['NotificationCreateWithoutRelationsInput', List['NotificationCreateWithoutRelationsInput']]
    connect: Union['NotificationWhereUniqueInput', List['NotificationWhereUniqueInput']]
    connect_or_create: Union['NotificationConnectOrCreateWithoutRelationsInput', List['NotificationConnectOrCreateWithoutRelationsInput']]

_NotificationWhereUnique_id_Input = TypedDict(
    '_NotificationWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

NotificationWhereUniqueInput = _NotificationWhereUnique_id_Input


class NotificationUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    type: 'enums.NotificationType'
    title: _str
    message: _str
    status: 'enums.NotificationStatus'
    link: Optional[_str]
    metadata: Optional['fields.Json']
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    user: 'UserUpdateOneWithoutRelationsInput'


class NotificationUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    type: 'enums.NotificationType'
    title: _str
    message: _str
    status: 'enums.NotificationStatus'
    link: Optional[_str]
    metadata: Optional['fields.Json']
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class NotificationUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['NotificationCreateWithoutRelationsInput']
    connect: List['NotificationWhereUniqueInput']
    connect_or_create: List['NotificationConnectOrCreateWithoutRelationsInput']
    set: List['NotificationWhereUniqueInput']
    disconnect: List['NotificationWhereUniqueInput']
    delete: List['NotificationWhereUniqueInput']

    # TODO
    # update: List['NotificationUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['NotificationUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['NotificationScalarWhereInput']
    # upsert: List['NotificationUpserteWithWhereUniqueWithoutRelationsInput']


class NotificationUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'NotificationCreateWithoutRelationsInput'
    connect: 'NotificationWhereUniqueInput'
    connect_or_create: 'NotificationConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'NotificationUpdateInput'
    # upsert: 'NotificationUpsertWithoutRelationsInput'


class NotificationUpsertInput(TypedDict):
    create: 'NotificationCreateInput'
    update: 'NotificationUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Notification_id_OrderByInput = TypedDict(
    '_Notification_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Notification_userId_OrderByInput = TypedDict(
    '_Notification_userId_OrderByInput',
    {
        'userId': 'SortOrder',
    },
    total=True
)

_Notification_type_OrderByInput = TypedDict(
    '_Notification_type_OrderByInput',
    {
        'type': 'SortOrder',
    },
    total=True
)

_Notification_title_OrderByInput = TypedDict(
    '_Notification_title_OrderByInput',
    {
        'title': 'SortOrder',
    },
    total=True
)

_Notification_message_OrderByInput = TypedDict(
    '_Notification_message_OrderByInput',
    {
        'message': 'SortOrder',
    },
    total=True
)

_Notification_status_OrderByInput = TypedDict(
    '_Notification_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_Notification_link_OrderByInput = TypedDict(
    '_Notification_link_OrderByInput',
    {
        'link': 'SortOrder',
    },
    total=True
)

_Notification_metadata_OrderByInput = TypedDict(
    '_Notification_metadata_OrderByInput',
    {
        'metadata': 'SortOrder',
    },
    total=True
)

_Notification_createdAt_OrderByInput = TypedDict(
    '_Notification_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Notification_updatedAt_OrderByInput = TypedDict(
    '_Notification_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Notification_RelevanceInner = TypedDict(
    '_Notification_RelevanceInner',
    {
        'fields': 'List[NotificationScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Notification_RelevanceOrderByInput = TypedDict(
    '_Notification_RelevanceOrderByInput',
    {
        '_relevance': '_Notification_RelevanceInner',
    },
    total=True
)

NotificationOrderByInput = Union[
    '_Notification_id_OrderByInput',
    '_Notification_userId_OrderByInput',
    '_Notification_type_OrderByInput',
    '_Notification_title_OrderByInput',
    '_Notification_message_OrderByInput',
    '_Notification_status_OrderByInput',
    '_Notification_link_OrderByInput',
    '_Notification_metadata_OrderByInput',
    '_Notification_createdAt_OrderByInput',
    '_Notification_updatedAt_OrderByInput',
    '_Notification_RelevanceOrderByInput',
]



# recursive Notification types
# TODO: cleanup these types



NotificationRelationFilter = TypedDict(
    'NotificationRelationFilter',
    {
        'is': 'NotificationWhereInput',
        'is_not': 'NotificationWhereInput',
    },
    total=False,
)


class NotificationListRelationFilter(TypedDict, total=False):
    some: 'NotificationWhereInput'
    none: 'NotificationWhereInput'
    every: 'NotificationWhereInput'


class NotificationInclude(TypedDict, total=False):
    """Notification relational arguments"""
    user: Union[bool, 'UserArgsFromNotification']


class ForumPostIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    author: Union[bool, 'UserArgsFromNotification']
    comments: Union[bool, 'FindManyForumCommentArgsFromNotification']
    reactions: Union[bool, 'FindManyForumReactionArgsFromNotification']
    followers: Union[bool, 'FindManyForumFollowerArgsFromNotification']
    subscribers: Union[bool, 'FindManyForumPostSubscriptionArgsFromNotification']


class ForumPostArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ForumPostIncludeFromForumPost'


class FindManyForumPostArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ForumPostOrderByInput', List['ForumPostOrderByInput']]
    where: 'ForumPostWhereInput'
    cursor: 'ForumPostWhereUniqueInput'
    distinct: List['ForumPostScalarFieldKeys']
    include: 'ForumPostIncludeFromForumPost'


class ForumReactionIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']
    post: Union[bool, 'ForumPostArgsFromNotification']
    comment: Union[bool, 'ForumCommentArgsFromNotification']


class ForumReactionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ForumReactionIncludeFromForumReaction'


class FindManyForumReactionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ForumReactionOrderByInput', List['ForumReactionOrderByInput']]
    where: 'ForumReactionWhereInput'
    cursor: 'ForumReactionWhereUniqueInput'
    distinct: List['ForumReactionScalarFieldKeys']
    include: 'ForumReactionIncludeFromForumReaction'


class ForumFollowerIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']
    post: Union[bool, 'ForumPostArgsFromNotification']


class ForumFollowerArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ForumFollowerIncludeFromForumFollower'


class FindManyForumFollowerArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ForumFollowerOrderByInput', List['ForumFollowerOrderByInput']]
    where: 'ForumFollowerWhereInput'
    cursor: 'ForumFollowerWhereUniqueInput'
    distinct: List['ForumFollowerScalarFieldKeys']
    include: 'ForumFollowerIncludeFromForumFollower'


class ForumPostSubscriptionIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']
    post: Union[bool, 'ForumPostArgsFromNotification']


class ForumPostSubscriptionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class FindManyForumPostSubscriptionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ForumPostSubscriptionOrderByInput', List['ForumPostSubscriptionOrderByInput']]
    where: 'ForumPostSubscriptionWhereInput'
    cursor: 'ForumPostSubscriptionWhereUniqueInput'
    distinct: List['ForumPostSubscriptionScalarFieldKeys']
    include: 'ForumPostSubscriptionIncludeFromForumPostSubscription'


class ForumCommentIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    author: Union[bool, 'UserArgsFromNotification']
    post: Union[bool, 'ForumPostArgsFromNotification']
    quotedComment: Union[bool, 'ForumCommentArgsFromNotification']
    quotedBy: Union[bool, 'FindManyForumCommentArgsFromNotification']
    reactions: Union[bool, 'FindManyForumReactionArgsFromNotification']


class ForumCommentArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ForumCommentIncludeFromForumComment'


class FindManyForumCommentArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ForumCommentOrderByInput', List['ForumCommentOrderByInput']]
    where: 'ForumCommentWhereInput'
    cursor: 'ForumCommentWhereUniqueInput'
    distinct: List['ForumCommentScalarFieldKeys']
    include: 'ForumCommentIncludeFromForumComment'


class LeagueIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    parentLeague: Union[bool, 'LeagueArgsFromNotification']
    subLeagues: Union[bool, 'FindManyLeagueArgsFromNotification']
    conferences: Union[bool, 'FindManyConferenceArgsFromNotification']
    divisions: Union[bool, 'FindManyDivisionArgsFromNotification']
    teams: Union[bool, 'FindManyTeamArgsFromNotification']
    seasons: Union[bool, 'FindManyLeagueSeasonArgsFromNotification']


class LeagueArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'LeagueIncludeFromLeague'


class FindManyLeagueArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['LeagueOrderByInput', List['LeagueOrderByInput']]
    where: 'LeagueWhereInput'
    cursor: 'LeagueWhereUniqueInput'
    distinct: List['LeagueScalarFieldKeys']
    include: 'LeagueIncludeFromLeague'


class LeagueSeasonIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    league: Union[bool, 'LeagueArgsFromNotification']
    season: Union[bool, 'SeasonArgsFromNotification']
    commissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromNotification']
    bogs: Union[bool, 'FindManyLeagueBOGArgsFromNotification']
    teams: Union[bool, 'FindManyTeamSeasonArgsFromNotification']
    playerHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromNotification']


class LeagueSeasonArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class FindManyLeagueSeasonArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['LeagueSeasonOrderByInput', List['LeagueSeasonOrderByInput']]
    where: 'LeagueSeasonWhereInput'
    cursor: 'LeagueSeasonWhereUniqueInput'
    distinct: List['LeagueSeasonScalarFieldKeys']
    include: 'LeagueSeasonIncludeFromLeagueSeason'


class ConferenceIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    league: Union[bool, 'LeagueArgsFromNotification']
    divisions: Union[bool, 'FindManyDivisionArgsFromNotification']


class ConferenceArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ConferenceIncludeFromConference'


class FindManyConferenceArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ConferenceOrderByInput', List['ConferenceOrderByInput']]
    where: 'ConferenceWhereInput'
    cursor: 'ConferenceWhereUniqueInput'
    distinct: List['ConferenceScalarFieldKeys']
    include: 'ConferenceIncludeFromConference'


class DivisionIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    conference: Union[bool, 'ConferenceArgsFromNotification']
    league: Union[bool, 'LeagueArgsFromNotification']
    teams: Union[bool, 'FindManyTeamArgsFromNotification']


class DivisionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'DivisionIncludeFromDivision'


class FindManyDivisionArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['DivisionOrderByInput', List['DivisionOrderByInput']]
    where: 'DivisionWhereInput'
    cursor: 'DivisionWhereUniqueInput'
    distinct: List['DivisionScalarFieldKeys']
    include: 'DivisionIncludeFromDivision'


class SeasonIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    leagueSeasons: Union[bool, 'FindManyLeagueSeasonArgsFromNotification']
    players: Union[bool, 'FindManyPlayerSeasonArgsFromNotification']


class SeasonArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'SeasonIncludeFromSeason'


class FindManySeasonArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SeasonOrderByInput', List['SeasonOrderByInput']]
    where: 'SeasonWhereInput'
    cursor: 'SeasonWhereUniqueInput'
    distinct: List['SeasonScalarFieldKeys']
    include: 'SeasonIncludeFromSeason'


class LeagueCommissionerIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromNotification']


class LeagueCommissionerArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class FindManyLeagueCommissionerArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['LeagueCommissionerOrderByInput', List['LeagueCommissionerOrderByInput']]
    where: 'LeagueCommissionerWhereInput'
    cursor: 'LeagueCommissionerWhereUniqueInput'
    distinct: List['LeagueCommissionerScalarFieldKeys']
    include: 'LeagueCommissionerIncludeFromLeagueCommissioner'


class LeagueBOGIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromNotification']


class LeagueBOGArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'LeagueBOGIncludeFromLeagueBOG'


class FindManyLeagueBOGArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['LeagueBOGOrderByInput', List['LeagueBOGOrderByInput']]
    where: 'LeagueBOGWhereInput'
    cursor: 'LeagueBOGWhereUniqueInput'
    distinct: List['LeagueBOGScalarFieldKeys']
    include: 'LeagueBOGIncludeFromLeagueBOG'


class MatchIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    teamSeason: Union[bool, 'TeamSeasonArgsFromNotification']
    clubMatchStats: Union[bool, 'FindManyClubMatchStatsArgsFromNotification']
    playerStats: Union[bool, 'FindManyPlayerMatchArgsFromNotification']
    clubAggregateMatchStats: Union[bool, 'FindManyClubAggregateMatchStatsArgsFromNotification']
    matchAnalytics: Union[bool, 'FindManyMatchAnalyticsArgsFromNotification']
    playerSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromNotification']


class MatchArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'MatchIncludeFromMatch'


class FindManyMatchArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['MatchOrderByInput', List['MatchOrderByInput']]
    where: 'MatchWhereInput'
    cursor: 'MatchWhereUniqueInput'
    distinct: List['MatchScalarFieldKeys']
    include: 'MatchIncludeFromMatch'


class ClubMatchStatsIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromNotification']
    match: Union[bool, 'MatchArgsFromNotification']


class ClubMatchStatsArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class FindManyClubMatchStatsArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsOrderByInput', List['ClubMatchStatsOrderByInput']]
    where: 'ClubMatchStatsWhereInput'
    cursor: 'ClubMatchStatsWhereUniqueInput'
    distinct: List['ClubMatchStatsScalarFieldKeys']
    include: 'ClubMatchStatsIncludeFromClubMatchStats'


class ClubMatchStatsDetailsIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    customKit: Union[bool, 'CustomKitArgsFromNotification']
    clubMatchStats: Union[bool, 'ClubMatchStatsArgsFromNotification']


class ClubMatchStatsDetailsArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class FindManyClubMatchStatsDetailsArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ClubMatchStatsDetailsOrderByInput', List['ClubMatchStatsDetailsOrderByInput']]
    where: 'ClubMatchStatsDetailsWhereInput'
    cursor: 'ClubMatchStatsDetailsWhereUniqueInput'
    distinct: List['ClubMatchStatsDetailsScalarFieldKeys']
    include: 'ClubMatchStatsDetailsIncludeFromClubMatchStatsDetails'


class CustomKitIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    details: Union[bool, 'ClubMatchStatsDetailsArgsFromNotification']


class CustomKitArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'CustomKitIncludeFromCustomKit'


class FindManyCustomKitArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['CustomKitOrderByInput', List['CustomKitOrderByInput']]
    where: 'CustomKitWhereInput'
    cursor: 'CustomKitWhereUniqueInput'
    distinct: List['CustomKitScalarFieldKeys']
    include: 'CustomKitIncludeFromCustomKit'


class ClubAggregateMatchStatsIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    match: Union[bool, 'MatchArgsFromNotification']


class ClubAggregateMatchStatsArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class FindManyClubAggregateMatchStatsArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ClubAggregateMatchStatsOrderByInput', List['ClubAggregateMatchStatsOrderByInput']]
    where: 'ClubAggregateMatchStatsWhereInput'
    cursor: 'ClubAggregateMatchStatsWhereUniqueInput'
    distinct: List['ClubAggregateMatchStatsScalarFieldKeys']
    include: 'ClubAggregateMatchStatsIncludeFromClubAggregateMatchStats'


class MatchAnalyticsIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    match: Union[bool, 'MatchArgsFromNotification']


class MatchAnalyticsArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class FindManyMatchAnalyticsArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['MatchAnalyticsOrderByInput', List['MatchAnalyticsOrderByInput']]
    where: 'MatchAnalyticsWhereInput'
    cursor: 'MatchAnalyticsWhereUniqueInput'
    distinct: List['MatchAnalyticsScalarFieldKeys']
    include: 'MatchAnalyticsIncludeFromMatchAnalytics'


class PlayerMatchIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    match: Union[bool, 'MatchArgsFromNotification']
    playerTeamSeason: Union[bool, 'PlayerTeamSeasonArgsFromNotification']
    playerSeason: Union[bool, 'PlayerSeasonArgsFromNotification']


class PlayerMatchArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PlayerMatchIncludeFromPlayerMatch'


class FindManyPlayerMatchArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PlayerMatchOrderByInput', List['PlayerMatchOrderByInput']]
    where: 'PlayerMatchWhereInput'
    cursor: 'PlayerMatchWhereUniqueInput'
    distinct: List['PlayerMatchScalarFieldKeys']
    include: 'PlayerMatchIncludeFromPlayerMatch'


class PlayerSeasonIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']
    season: Union[bool, 'SeasonArgsFromNotification']
    contract: Union[bool, 'ContractArgsFromNotification']
    teamSeasons: Union[bool, 'FindManyPlayerTeamSeasonArgsFromNotification']
    leagueHistory: Union[bool, 'FindManyPlayerLeagueHistoryArgsFromNotification']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromNotification']
    matches: Union[bool, 'FindManyMatchArgsFromNotification']


class PlayerSeasonArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class FindManyPlayerSeasonArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PlayerSeasonOrderByInput', List['PlayerSeasonOrderByInput']]
    where: 'PlayerSeasonWhereInput'
    cursor: 'PlayerSeasonWhereUniqueInput'
    distinct: List['PlayerSeasonScalarFieldKeys']
    include: 'PlayerSeasonIncludeFromPlayerSeason'


class PlayerTeamSeasonIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromNotification']
    rosterTeam: Union[bool, 'TeamSeasonArgsFromNotification']
    trainingCampTeam: Union[bool, 'TeamSeasonArgsFromNotification']
    inactiveTeam: Union[bool, 'TeamSeasonArgsFromNotification']
    playerMatches: Union[bool, 'FindManyPlayerMatchArgsFromNotification']


class PlayerTeamSeasonArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class FindManyPlayerTeamSeasonArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PlayerTeamSeasonOrderByInput', List['PlayerTeamSeasonOrderByInput']]
    where: 'PlayerTeamSeasonWhereInput'
    cursor: 'PlayerTeamSeasonWhereUniqueInput'
    distinct: List['PlayerTeamSeasonScalarFieldKeys']
    include: 'PlayerTeamSeasonIncludeFromPlayerTeamSeason'


class PlayerLeagueHistoryIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromNotification']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromNotification']


class PlayerLeagueHistoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class FindManyPlayerLeagueHistoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PlayerLeagueHistoryOrderByInput', List['PlayerLeagueHistoryOrderByInput']]
    where: 'PlayerLeagueHistoryWhereInput'
    cursor: 'PlayerLeagueHistoryWhereUniqueInput'
    distinct: List['PlayerLeagueHistoryScalarFieldKeys']
    include: 'PlayerLeagueHistoryIncludeFromPlayerLeagueHistory'


class PSNProfileIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']
    avatars: Union[bool, 'FindManyPSNAvatarArgsFromNotification']
    trophySummary: Union[bool, 'PSNTrophyArgsFromNotification']
    games: Union[bool, 'FindManyPSNGameArgsFromNotification']
    syncLogs: Union[bool, 'FindManyPSNSyncLogArgsFromNotification']
    gameTrophies: Union[bool, 'FindManyPSNGameTrophiesArgsFromNotification']


class PSNProfileArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PSNProfileIncludeFromPSNProfile'


class FindManyPSNProfileArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PSNProfileOrderByInput', List['PSNProfileOrderByInput']]
    where: 'PSNProfileWhereInput'
    cursor: 'PSNProfileWhereUniqueInput'
    distinct: List['PSNProfileScalarFieldKeys']
    include: 'PSNProfileIncludeFromPSNProfile'


class PSNAvatarIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    profile: Union[bool, 'PSNProfileArgsFromNotification']


class PSNAvatarArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PSNAvatarIncludeFromPSNAvatar'


class FindManyPSNAvatarArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PSNAvatarOrderByInput', List['PSNAvatarOrderByInput']]
    where: 'PSNAvatarWhereInput'
    cursor: 'PSNAvatarWhereUniqueInput'
    distinct: List['PSNAvatarScalarFieldKeys']
    include: 'PSNAvatarIncludeFromPSNAvatar'


class PSNTrophyIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    profile: Union[bool, 'PSNProfileArgsFromNotification']


class PSNTrophyArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PSNTrophyIncludeFromPSNTrophy'


class FindManyPSNTrophyArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PSNTrophyOrderByInput', List['PSNTrophyOrderByInput']]
    where: 'PSNTrophyWhereInput'
    cursor: 'PSNTrophyWhereUniqueInput'
    distinct: List['PSNTrophyScalarFieldKeys']
    include: 'PSNTrophyIncludeFromPSNTrophy'


class PSNGameIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    profile: Union[bool, 'PSNProfileArgsFromNotification']
    trophyInfo: Union[bool, 'PSNGameTrophiesArgsFromNotification']


class PSNGameArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PSNGameIncludeFromPSNGame'


class FindManyPSNGameArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PSNGameOrderByInput', List['PSNGameOrderByInput']]
    where: 'PSNGameWhereInput'
    cursor: 'PSNGameWhereUniqueInput'
    distinct: List['PSNGameScalarFieldKeys']
    include: 'PSNGameIncludeFromPSNGame'


class PSNSyncLogIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    profile: Union[bool, 'PSNProfileArgsFromNotification']


class PSNSyncLogArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class FindManyPSNSyncLogArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PSNSyncLogOrderByInput', List['PSNSyncLogOrderByInput']]
    where: 'PSNSyncLogWhereInput'
    cursor: 'PSNSyncLogWhereUniqueInput'
    distinct: List['PSNSyncLogScalarFieldKeys']
    include: 'PSNSyncLogIncludeFromPSNSyncLog'


class PSNGameTrophiesIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    profile: Union[bool, 'PSNProfileArgsFromNotification']
    game: Union[bool, 'PSNGameArgsFromNotification']


class PSNGameTrophiesArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class FindManyPSNGameTrophiesArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['PSNGameTrophiesOrderByInput', List['PSNGameTrophiesOrderByInput']]
    where: 'PSNGameTrophiesWhereInput'
    cursor: 'PSNGameTrophiesWhereUniqueInput'
    distinct: List['PSNGameTrophiesScalarFieldKeys']
    include: 'PSNGameTrophiesIncludeFromPSNGameTrophies'


class TeamIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    league: Union[bool, 'LeagueArgsFromNotification']
    division: Union[bool, 'DivisionArgsFromNotification']
    seasons: Union[bool, 'FindManyTeamSeasonArgsFromNotification']
    nhlAffiliate: Union[bool, 'TeamArgsFromNotification']
    ahlAffiliate: Union[bool, 'TeamArgsFromNotification']
    ahlAffiliates: Union[bool, 'FindManyTeamArgsFromNotification']
    echlAffiliates: Union[bool, 'FindManyTeamArgsFromNotification']


class TeamArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TeamIncludeFromTeam'


class FindManyTeamArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TeamOrderByInput', List['TeamOrderByInput']]
    where: 'TeamWhereInput'
    cursor: 'TeamWhereUniqueInput'
    distinct: List['TeamScalarFieldKeys']
    include: 'TeamIncludeFromTeam'


class TeamSeasonIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    team: Union[bool, 'TeamArgsFromNotification']
    leagueSeason: Union[bool, 'LeagueSeasonArgsFromNotification']
    matches: Union[bool, 'FindManyMatchArgsFromNotification']
    rosterPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromNotification']
    trainingCampPlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromNotification']
    inactivePlayers: Union[bool, 'FindManyPlayerTeamSeasonArgsFromNotification']
    bids: Union[bool, 'FindManyBidArgsFromNotification']
    managers: Union[bool, 'FindManyTeamManagerArgsFromNotification']


class TeamSeasonArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TeamSeasonIncludeFromTeamSeason'


class FindManyTeamSeasonArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TeamSeasonOrderByInput', List['TeamSeasonOrderByInput']]
    where: 'TeamSeasonWhereInput'
    cursor: 'TeamSeasonWhereUniqueInput'
    distinct: List['TeamSeasonScalarFieldKeys']
    include: 'TeamSeasonIncludeFromTeamSeason'


class TeamManagerIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']
    teamSeason: Union[bool, 'TeamSeasonArgsFromNotification']


class TeamManagerArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'TeamManagerIncludeFromTeamManager'


class FindManyTeamManagerArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['TeamManagerOrderByInput', List['TeamManagerOrderByInput']]
    where: 'TeamManagerWhereInput'
    cursor: 'TeamManagerWhereUniqueInput'
    distinct: List['TeamManagerScalarFieldKeys']
    include: 'TeamManagerIncludeFromTeamManager'


class BidIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    contract: Union[bool, 'ContractArgsFromNotification']
    teamSeason: Union[bool, 'TeamSeasonArgsFromNotification']


class BidArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'BidIncludeFromBid'


class FindManyBidArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['BidOrderByInput', List['BidOrderByInput']]
    where: 'BidWhereInput'
    cursor: 'BidWhereUniqueInput'
    distinct: List['BidScalarFieldKeys']
    include: 'BidIncludeFromBid'


class ContractIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    playerSeason: Union[bool, 'PlayerSeasonArgsFromNotification']
    bids: Union[bool, 'FindManyBidArgsFromNotification']


class ContractArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'ContractIncludeFromContract'


class FindManyContractArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['ContractOrderByInput', List['ContractOrderByInput']]
    where: 'ContractWhereInput'
    cursor: 'ContractWhereUniqueInput'
    distinct: List['ContractScalarFieldKeys']
    include: 'ContractIncludeFromContract'


class UserIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    notifications: Union[bool, 'FindManyNotificationArgsFromNotification']
    forumPosts: Union[bool, 'FindManyForumPostArgsFromNotification']
    forumComments: Union[bool, 'FindManyForumCommentArgsFromNotification']
    forumReactions: Union[bool, 'FindManyForumReactionArgsFromNotification']
    forumFollowing: Union[bool, 'FindManyForumFollowerArgsFromNotification']
    forumSubscriptions: Union[bool, 'FindManyForumPostSubscriptionArgsFromNotification']
    eaIdHistory: Union[bool, 'FindManyEaIdHistoryArgsFromNotification']
    systemHistory: Union[bool, 'FindManySystemHistoryArgsFromNotification']
    gamertags: Union[bool, 'FindManyGamertagHistoryArgsFromNotification']
    leagueCommissioners: Union[bool, 'FindManyLeagueCommissionerArgsFromNotification']
    leagueBogs: Union[bool, 'FindManyLeagueBOGArgsFromNotification']
    activeSeasons: Union[bool, 'FindManyPlayerSeasonArgsFromNotification']
    teamManagement: Union[bool, 'FindManyTeamManagerArgsFromNotification']
    psnProfile: Union[bool, 'PSNProfileArgsFromNotification']


class UserArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'UserIncludeFromUser'


class FindManyUserArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUser'


class EaIdHistoryIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']


class EaIdHistoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class FindManyEaIdHistoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['EaIdHistoryOrderByInput', List['EaIdHistoryOrderByInput']]
    where: 'EaIdHistoryWhereInput'
    cursor: 'EaIdHistoryWhereUniqueInput'
    distinct: List['EaIdHistoryScalarFieldKeys']
    include: 'EaIdHistoryIncludeFromEaIdHistory'


class SystemHistoryIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']


class SystemHistoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'SystemHistoryIncludeFromSystemHistory'


class FindManySystemHistoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['SystemHistoryOrderByInput', List['SystemHistoryOrderByInput']]
    where: 'SystemHistoryWhereInput'
    cursor: 'SystemHistoryWhereUniqueInput'
    distinct: List['SystemHistoryScalarFieldKeys']
    include: 'SystemHistoryIncludeFromSystemHistory'


class GamertagHistoryIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']


class GamertagHistoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class FindManyGamertagHistoryArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['GamertagHistoryOrderByInput', List['GamertagHistoryOrderByInput']]
    where: 'GamertagHistoryWhereInput'
    cursor: 'GamertagHistoryWhereUniqueInput'
    distinct: List['GamertagHistoryScalarFieldKeys']
    include: 'GamertagHistoryIncludeFromGamertagHistory'


class NotificationIncludeFromNotification(TypedDict, total=False):
    """Relational arguments for Notification"""
    user: Union[bool, 'UserArgsFromNotification']


class NotificationArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    include: 'NotificationIncludeFromNotification'


class FindManyNotificationArgsFromNotification(TypedDict, total=False):
    """Arguments for Notification"""
    take: int
    skip: int
    order_by: Union['NotificationOrderByInput', List['NotificationOrderByInput']]
    where: 'NotificationWhereInput'
    cursor: 'NotificationWhereUniqueInput'
    distinct: List['NotificationScalarFieldKeys']
    include: 'NotificationIncludeFromNotification'




FindManyNotificationArgs = FindManyNotificationArgsFromNotification
FindFirstNotificationArgs = FindManyNotificationArgsFromNotification


class NotificationWhereInput(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    userId: Union[_str, 'types.StringFilter']
    type: 'enums.NotificationType'
    title: Union[_str, 'types.StringFilter']
    message: Union[_str, 'types.StringFilter']
    status: 'enums.NotificationStatus'
    link: Union[None, _str, 'types.StringFilter']
    metadata: Union[None, 'fields.Json', 'types.JsonFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']
    user: 'UserRelationFilter'

    # should be noted that AND and NOT should be Union['NotificationWhereInput', List['NotificationWhereInput']]
    # but this causes mypy to hang :/
    AND: List['NotificationWhereInput']
    OR: List['NotificationWhereInput']
    NOT: List['NotificationWhereInput']



# aggregate Notification types


class NotificationScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Notification arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    userId: Union[_str, 'types.StringWithAggregatesFilter']
    type: 'enums.NotificationType'
    title: Union[_str, 'types.StringWithAggregatesFilter']
    message: Union[_str, 'types.StringWithAggregatesFilter']
    status: 'enums.NotificationStatus'
    link: Union[_str, 'types.StringWithAggregatesFilter']
    metadata: Union['fields.Json', 'types.JsonWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['NotificationScalarWhereWithAggregatesInput']
    OR: List['NotificationScalarWhereWithAggregatesInput']
    NOT: List['NotificationScalarWhereWithAggregatesInput']



class NotificationGroupByOutput(TypedDict, total=False):
    id: _str
    userId: _str
    type: 'enums.NotificationType'
    title: _str
    message: _str
    status: 'enums.NotificationStatus'
    link: _str
    metadata: 'fields.Json'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'NotificationSumAggregateOutput'
    _avg: 'NotificationAvgAggregateOutput'
    _min: 'NotificationMinAggregateOutput'
    _max: 'NotificationMaxAggregateOutput'
    _count: 'NotificationCountAggregateOutput'


class NotificationAvgAggregateOutput(TypedDict, total=False):
    """Notification output for aggregating averages"""


class NotificationSumAggregateOutput(TypedDict, total=False):
    """Notification output for aggregating sums"""


class NotificationScalarAggregateOutput(TypedDict, total=False):
    """Notification output including scalar fields"""
    id: _str
    userId: _str
    type: 'enums.NotificationType'
    title: _str
    message: _str
    status: 'enums.NotificationStatus'
    link: _str
    metadata: 'fields.Json'
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


NotificationMinAggregateOutput = NotificationScalarAggregateOutput
NotificationMaxAggregateOutput = NotificationScalarAggregateOutput


class NotificationMaxAggregateInput(TypedDict, total=False):
    """Notification input for aggregating by max"""
    id: bool
    userId: bool
    type: bool
    title: bool
    message: bool
    status: bool
    link: bool
    metadata: bool
    createdAt: bool
    updatedAt: bool


class NotificationMinAggregateInput(TypedDict, total=False):
    """Notification input for aggregating by min"""
    id: bool
    userId: bool
    type: bool
    title: bool
    message: bool
    status: bool
    link: bool
    metadata: bool
    createdAt: bool
    updatedAt: bool


class NotificationNumberAggregateInput(TypedDict, total=False):
    """Notification input for aggregating numbers"""


NotificationAvgAggregateInput = NotificationNumberAggregateInput
NotificationSumAggregateInput = NotificationNumberAggregateInput


NotificationCountAggregateInput = TypedDict(
    'NotificationCountAggregateInput',
    {
        'id': bool,
        'userId': bool,
        'type': bool,
        'title': bool,
        'message': bool,
        'status': bool,
        'link': bool,
        'metadata': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

NotificationCountAggregateOutput = TypedDict(
    'NotificationCountAggregateOutput',
    {
        'id': int,
        'userId': int,
        'type': int,
        'title': int,
        'message': int,
        'status': int,
        'link': int,
        'metadata': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


NotificationKeys = Literal[
    'id',
    'userId',
    'type',
    'title',
    'message',
    'status',
    'link',
    'metadata',
    'createdAt',
    'updatedAt',
    'user',
]
NotificationScalarFieldKeys = Literal[
    'id',
    'userId',
    'type',
    'title',
    'message',
    'status',
    'link',
    'metadata',
    'createdAt',
    'updatedAt',
]
NotificationScalarFieldKeysT = TypeVar('NotificationScalarFieldKeysT', bound=NotificationScalarFieldKeys)

NotificationRelationalFieldKeys = Literal[
        'user',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields