// --------- Player Season & Stats ---------
model PlayerSeason {
    id     String @id @default(uuid())
    userId String @map("user_id")

    // Season reference
    seasonId String @map("season_id")

    // Contract
    contractId String @unique @map("contract_id")

    // Position
    primaryPosition PlayerPosition @map("primary_position")
    positionGroup   PositionGroup  @map("position_group")

    isInBidding Boolean @default(true) @map("is_in_bidding")

    // Relations
    user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
    season        Season                @relation(fields: [seasonId], references: [id], onDelete: Cascade)
    contract      Contract              @relation(fields: [contractId], references: [id], onDelete: Cascade)
    teamSeasons   PlayerTeamSeason[]
    leagueHistory PlayerLeagueHistory[] // Changed from tierHistory

    // Match-related relations
    playerMatches PlayerMatch[]
    matches       Match[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("player_seasons")
}

model PlayerTeamSeason {
    id             String @id @default(uuid())
    playerSeasonId String @map("player_season_id")
    teamSeasonId   String @map("team_season_id")

    leagueType LeagueType @map("league_type")

    // Relationship references
    rosterTeamId       String? @map("roster_team_id")
    trainingCampTeamId String? @map("training_camp_team_id")
    inactiveTeamId     String? @map("inactive_team_id")

    // Status flags
    isRosterPlayer       Boolean @default(false) @map("is_roster_player")
    isTrainingCampPlayer Boolean @default(false) @map("is_training_camp_player")
    isInactivePlayer     Boolean @default(false) @map("is_inactive_player")

    // Relationships
    playerSeason     PlayerSeason @relation(fields: [playerSeasonId], references: [id], onDelete: Cascade)
    rosterTeam       TeamSeason?  @relation("RosterPlayers", fields: [rosterTeamId], references: [id])
    trainingCampTeam TeamSeason?  @relation("TrainingCampPlayers", fields: [trainingCampTeamId], references: [id])
    inactiveTeam     TeamSeason?  @relation("InactivePlayers", fields: [inactiveTeamId], references: [id])

    playerMatches PlayerMatch[]

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("player_team_seasons")
}

model PlayerLeagueHistory {
    id             String    @id @default(uuid())
    playerSeasonId String    @map("player_season_id")
    leagueSeasonId String    @map("league_season_id") // Changed from tierId
    startDate      DateTime  @default(now()) @map("start_date")
    endDate        DateTime? @map("end_date")
    createdAt      DateTime  @default(now()) @map("created_at")
    updatedAt      DateTime  @updatedAt @map("updated_at")

    playerSeason PlayerSeason @relation(fields: [playerSeasonId], references: [id], onDelete: Cascade)
    leagueSeason LeagueSeason @relation(fields: [leagueSeasonId], references: [id], onDelete: Cascade)

    @@index([playerSeasonId])
    @@index([leagueSeasonId])
    @@map("player_league_history")
}
